set cut_paste_input [stack 0]
version 15.1 v4
BackdropNode {
 inputs 0
 name BackdropNode27
 tile_color 0x565656ff
 label "workshop nodes"
 note_font "Bebas Neue"
 note_font_size 100
 note_font_color 0xfff6f6ff
 selected true
 xpos 10062
 ypos 1193
 bdwidth 662
 bdheight 1816
}
push $cut_paste_input
add_layer {P P.X P.Y P.Z P.red P.green P.blue}
add_layer {motionvector motionvector.red motionvector.green motionvector.blue}
Group {
 name Gnomon_PW_projector_
 tile_color 0x8c1169ff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10165
 ypos 1806
 addUserKnob {20 pWcontrols l Controls}
 addUserKnob {26 detection l Detection}
 addUserKnob {6 isThereProjCam l "Projection Camera Found" +STARTLINE}
 isThereProjCam {{"\[exists input1]"}}
 addUserKnob {6 hasAOVbundle l "AOV bundle found" -STARTLINE}
 hasAOVbundle {{"\[exists input0]"}}
 addUserKnob {26 ""}
 addUserKnob {26 dmpNote l "" +STARTLINE T "The DMP will consider the RGBA<br />\nThe alpha will be projected and outputted too. "}
 addUserKnob {26 ""}
 addUserKnob {26 note l "" +STARTLINE T "If the input camera has animation, use"}
 addUserKnob {41 frameToHold l " frame" -STARTLINE T pCamValues.frameToHold}
 addUserKnob {26 ""}
 addUserKnob {4 outputChannels M {"projection only (as RGBA) " "MBprojection only (as RGBA)" "projection(RGBA) + MBprojection(RGBA) " ""}}
 addUserKnob {20 motionBlur l "Motion Blur"}
 addUserKnob {41 mv_presets l "mv presets" T VectorBlur1.mv_presets}
 addUserKnob {41 blur_type l "blur type" T VectorBlur1.blur_type}
 addUserKnob {41 scale l "motion amount" T VectorBlur1.scale}
 addUserKnob {41 motion_falloff l "motion falloff" T VectorBlur1.motion_falloff}
 addUserKnob {41 offset l "shutter offset" T VectorBlur1.offset}
 addUserKnob {20 AOVs}
 addUserKnob {20 inputLayers l "Input Layers" n 1}
 addUserKnob {20 endGroup n -1}
 addUserKnob {41 in l pWorld T ShuffleP.in}
 addUserKnob {6 unpremultP -STARTLINE}
 addUserKnob {41 in_1 l "Motion Vector" T ShuffleMV.in}
 addUserKnob {6 unpremultMV -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {20 Info}
 addUserKnob {26 infoText l "" +STARTLINE T "Gnomon Workshop Example by  <font color=\"green\"><b>Nacho Thomas</b></font><br />\nThis node will let you project your DMP over the Position pass.<br />\nProjection cameras can be created with the <font color=\"red\"><b>Gnomon_setProjector</b></font> node,<br />\nOnly PWorld will work with this node, <br />\nYou can automate the motion blur of the projection.<br />\nChoose whether you want the  dmp projected, <br />\nthe dmp projected with motion blur or both (as extra layer)<br />\n\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x71c67100
  label "read cam matrix"
  note_font_size 42
  xpos 1259
  ypos 77
  bdwidth 397
  bdheight 213
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x8e388e00
  label "unpremults and output channels"
  note_font_size 42
  xpos -218
  ypos -376
  bdwidth 645
  bdheight 502
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x8e388e00
  label "evaluate cg"
  note_font_size 42
  xpos -432
  ypos 240
  bdwidth 422
  bdheight 146
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0xaaaaaa00
  label "pW to Pcam then pCamNorm"
  note_font_size 42
  xpos 789
  ypos 461
  bdwidth 596
  bdheight 534
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x71c67100
  label "mult proj by alpha"
  note_font_size 42
  xpos -10
  ypos 1144
  bdwidth 899
  bdheight 174
 }
 Input {
  inputs 0
  name InputAOVbundle
  label "\[value number]"
  xpos 0
  ypos -538
 }
 Dot {
  name Dot10
  xpos 34
  ypos -296
 }
add_layer {mvTemp mvTemp.red mvTemp.green mvTemp.blue mvTemp.alpha}
 Shuffle {
  in motionvector
  in2 alpha
  alpha red2
  out mvTemp
  name ShuffleMV
  xpos -1
  ypos -265
 }
set N424b6800 [stack 0]
 Unpremult {
  channels mvTemp
  name Unpremult2
  xpos -208
  ypos -242
 }
push $N424b6800
 Switch {
  inputs 2
  which {{parent.unpremultMV}}
  name SwitchUnpremultMV
  xpos -1
  ypos -207
 }
 Shuffle {
  in mvTemp
  out motionvector
  name ShuffleOutputMotionVector
  xpos 0
  ypos -164
 }
set N424b7000 [stack 0]
 Remove {
  channels mvTemp
  name Remove3
  xpos 0
  ypos -109
 }
add_layer {Ptemp Ptemp.red Ptemp.green Ptemp.blue Ptemp.alpha}
 Shuffle {
  in {P.X P.Y P.Z -P.red}
  in2 alpha
  alpha red2
  out Ptemp
  name ShuffleP
  xpos 0
  ypos -48
 }
set N424b7800 [stack 0]
 Unpremult {
  channels Ptemp
  name Unpremult1
  xpos -86
  ypos -17
 }
push $N424b7800
 Switch {
  inputs 2
  which {{parent.unpremultP}}
  name Switch1
  xpos 0
  ypos 11
 }
set N424d4500 [stack 0]
 Shuffle {
  in Ptemp
  out P
  name ShuffleOutputP
  xpos 0
  ypos 63
 }
 Remove {
  channels Ptemp
  name Remove4
  xpos 0
  ypos 94
 }
 Dot {
  name Dot1
  xpos 34
  ypos 165
 }
set N424fa800 [stack 0]
 Dot {
  name Dot4
  xpos -388
  ypos 165
 }
 NoOp {
  name evaluateOscan
  xpos -422
  ypos 320
  addUserKnob {20 User}
  addUserKnob {14 incomingSize R 0 100}
  incomingSize {{width} {height}}
  addUserKnob {7 imageAspect -STARTLINE}
  imageAspect {{incomingSize.w/incomingSize.h}}
  addUserKnob {7 pixelAspect}
  pixelAspect {{pixel_aspect}}
  addUserKnob {26 ""}
  addUserKnob {15 incomingImageSize}
  incomingImageSize {{format.x} {format.y} {format.r} {format.t}}
  addUserKnob {15 incomingBbox}
  incomingBbox {{bbox.x} {bbox.y} {bbox.r} {bbox.t}}
  addUserKnob {15 margins}
  margins {{(incomingBbox)<=0?(abs(incomingBbox)):0} {(incomingBbox)<=0?(abs(incomingBbox)):0} {(incomingBbox)>=(incomingImageSize)?(abs(incomingBbox)-(incomingImageSize)):0} {(incomingBbox)>=(incomingImageSize)?(abs(incomingBbox)-(incomingImageSize)):0}}
  addUserKnob {14 maxMargins R 0 100}
  maxMargins {{"max(margins.x, margins.r)"} {"max(margins.y, margins.t)"}}
  addUserKnob {15 bboxWithMaxMargins}
  bboxWithMaxMargins {{incomingImageSize-maxMargins.w} {incomingImageSize-maxMargins.h} {incomingImageSize+maxMargins.w} {incomingImageSize+maxMargins.h}}
  addUserKnob {14 overscanFactor R 0 100}
  overscanFactor {{(-bboxWithMaxMargins.x+bboxWithMaxMargins.r)/incomingImageSize.r} {(-bboxWithMaxMargins.y+bboxWithMaxMargins.t)/incomingImageSize.t}}
 }
 Input {
  inputs 0
  name InputProjCamera
  label "\[value number]"
  xpos 1430
  ypos -9
  number 1
 }
 Camera2 {
  inputs 0
  useMatrix true
  matrix {
      {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(1)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(2)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(3)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
      {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(4)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(5)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(6)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(7)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
      {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(8)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(9)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(10)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(11)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
      {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(12)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(13)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(14)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(15)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
    }
  focal {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  haperture {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  vaperture {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  near {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  far {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  win_translate {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(1)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  win_scale {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(1)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  winroll {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  focal_point {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  fstop {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  name pCamValues
  label "inputNumber = \[value inputNumber]\nis Frameholded = \[value isFrameholded]\nframeToHold = \[value frameToHold] \n\[value world_matrix.3], \[value world_matrix.7], \[value world_matrix.11]\n\n\n"
  xpos 1359
  ypos 201
  addUserKnob {20 User}
  addUserKnob {3 inputNumber}
  inputNumber 1
  addUserKnob {6 isFrameholded +STARTLINE}
  isFrameholded true
  addUserKnob {3 frameToHold -STARTLINE}
  frameToHold 1001
 }
push $N424b7000
push $N424d4500
 Dot {
  name Dot5
  xpos 833
  ypos 14
 }
 Shuffle {
  in Ptemp
  in2 alpha
  alpha red2
  name ShufflePtempToRGB
  xpos 799
  ypos 154
 }
 Expression {
  expr0 r-parent.pCamValues.world_matrix.3
  expr1 g-parent.pCamValues.world_matrix.7
  expr2 b-parent.pCamValues.world_matrix.11
  name Expression1
  label "moving points so cam is 0,0,0"
  xpos 799
  ypos 541
 }
set N42536400 [stack 0]
 ColorMatrix {
  matrix {
      {{parent.pCamValues.matrix.0} {parent.pCamValues.matrix.1} {parent.pCamValues.matrix.2}}
      {{parent.pCamValues.matrix.4} {parent.pCamValues.matrix.5} {parent.pCamValues.matrix.6}}
      {{parent.pCamValues.matrix.8} {parent.pCamValues.matrix.9} {parent.pCamValues.matrix.10}}
    }
  invert true
  name ColorMatrix1
  label "changing pW to Pcam\n"
  xpos 913
  ypos 630
 }
push $N42536400
 Switch {
  inputs 2
  which {{parent.isThereProjCam}}
  name Switch3
  xpos 799
  ypos 721
 }
 Expression {
  expr2 -b
  name Expression2
  label "inverting Z\n"
  xpos 799
  ypos 783
 }
 Expression {
  temp_name0 htan
  temp_expr0 "(parent.pCamValues.haperture /2) / (parent.pCamValues.focal)"
  temp_name1 vtan
  temp_expr1 "(parent.pCamValues.vaperture /2) / (parent.pCamValues.focal)"
  expr0 "(0.5 * r) / (b * htan)"
  expr1 "(0.5 * g) / (b * vtan)"
  expr2 0
  name Expression3
  label "normalize pcam\n"
  xpos 799
  ypos 871
 }
 Expression {
  expr0 "r + 0.5"
  expr1 "g + 0.5"
  name Expression4
  xpos 799
  ypos 943
 }
 Input {
  inputs 0
  name InputDMP
  label "\[value number]"
  xpos 1759
  ypos -6
  number 2
 }
 Dot {
  name Dot6
  xpos 1793
  ypos 1098
 }
 STMap {
  inputs 2
  uv rgb
  name STMap1
  xpos 799
  ypos 1089
 }
 Dot {
  name Dot8
  xpos 833
  ypos 1227
 }
set N42578400 [stack 0]
push $N424fa800
 Merge2 {
  inputs 2
  operation multiply
  name Merge1
  xpos 0
  ypos 1224
 }
 Dot {
  name Dot2
  xpos 34
  ypos 1287
 }
push $N42578400
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos 799
  ypos 1278
 }
 Remove {
  operation keep
  channels rgba
  name Remove2
  xpos 799
  ypos 1385
 }
set N42579400 [stack 0]
 ShuffleCopy {
  inputs 2
  in {{{parent.ShuffleOutputMotionVector.in}}}
  red red
  green green
  blue blue
  out {{{parent.ShuffleOutputMotionVector.out}}}
  name ShuffleCopy1
  xpos 652
  ypos 1477
 }
 VectorBlur2 {
  uv motionvector
  mv_presets Arnold
  blur_uv uniform
  scale 1
  normalize false
  name VectorBlur1
  xpos 652
  ypos 1562
 }
set N42579c00 [stack 0]
add_layer {MBprojection MBprojection.red MBprojection.green MBprojection.blue MBprojection.alpha}
 AddChannels {
  channels MBprojection
  name AddChannels1
  xpos 652
  ypos 1621
 }
 Shuffle {
  out MBprojection
  name Shuffle1
  xpos 652
  ypos 1657
 }
 Remove {
  channels motionvector
  name Remove1
  xpos 652
  ypos 1694
 }
push $N42579400
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels MBprojection
  name Copy2
  xpos 771
  ypos 1688
 }
push $N42579c00
push $N42579400
 Switch {
  inputs 3
  which {{outputChannels}}
  name Switch2
  xpos 799
  ypos 1849
 }
 Output {
  name Output1
  xpos 799
  ypos 1915
 }
 Viewer {
  frame_range 1025-1050
  monitorOutNDISenderName "NukeX - testAOVs_v01 - Viewer1"
  name Viewer1
  xpos 799
  ypos 1998
 }
end_group
push $cut_paste_input
Group {
 name GNOMON_setProjector_
 tile_color 0x511d7fff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10165
 ypos 1676
 addUserKnob {20 setProjectorControls l Controls}
 addUserKnob {26 ""}
 addUserKnob {3 projectionFrame l "Projection Frame"}
 projectionFrame 1223
 addUserKnob {6 isThereAnyInput1 -STARTLINE +INVISIBLE}
 isThereAnyInput1 {{"\[exists input1]"}}
 addUserKnob {6 isInput1aCamera -STARTLINE +INVISIBLE}
 isInput1aCamera {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Camera2\\\"\\ or\\ toI.Class()\\ ==\\ \\\"Camera3\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 1\\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Camera2\\\"\\ or\\ toI.Class()\\ ==\\ \\\"Camera3\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 1\\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0\\n\\n]"}}
 addUserKnob {26 ""}
 addUserKnob {14 cgautodetected l "CG autoDetected Overscan" R 0 100}
 cgautodetected {{evalOscan.overscanFactorw} {evalOscan.overscanFactorh}}
 addUserKnob {22 bringAutodetectedOverscan l "Use Autodetected Overscan" T "tn = nuke.thisNode()\ntg = nuke.thisGroup()\n\nautoHo = tg.knob(\"cgautodetected\").getValue(0)\nautoVo = tg.knob(\"cgautodetected\").getValue(1)\n\ntg.knob(\"outputOverscanFactor\").setValue(autoHo, 0)\ntg.knob(\"outputOverscanFactor\").setValue(autoVo, 1)" +STARTLINE}
 addUserKnob {14 outputOverscanFactor l "Output Overscan Factor" t "the overscan you actually want to output" R 0 100}
 outputOverscanFactor {1.1 1.3}
 addUserKnob {7 dmpResolutionMultiplier l "DMP Resolution Multiplier" t "Before taking your image to photoshop, apply a rescale / tvi scale to work with a larger base image" R 1 3}
 dmpResolutionMultiplier 2
 addUserKnob {41 filter -STARTLINE T Reformat2.filter}
 addUserKnob {14 outputSize l "Output Size" R 0 100}
 outputSize {{evalOutputImage.bboxWithMaxMarginsr} {evalOutputImage.bboxWithMaxMarginst}}
 addUserKnob {26 ""}
 addUserKnob {6 labelImage +STARTLINE}
 labelImage true
 addUserKnob {7 textSizeMult l "Text Size" R 0.1 5}
 textSizeMult 0.8
 addUserKnob {26 ""}
 addUserKnob {22 createProjectionCamera l "Create Projection Camera" T "import nuke\n\ndef createCamera():\n    tg = nuke.thisGroup()\n    tg.knob(\"selected\").setValue(True)\n    toCam = nuke.toNode(\"frameholdedCameraWithOverscan\")\n    camTrX = toCam.knob(\"translate\").getValue(0)\n    camTrY =  toCam.knob(\"translate\").getValue(1)\n    camTrZ =  toCam.knob(\"translate\").getValue(2)\n    camRoX = toCam.knob('rotate').getValue(0)\n    camRoY = toCam.knob('rotate').getValue(1)\n    camRoZ = toCam.knob('rotate').getValue(2)\n    camScX = toCam.knob('scaling').getValue(0)\n    camScY = toCam.knob('scaling').getValue(1)\n    camScZ = toCam.knob('scaling').getValue(2)\n    camUs = toCam.knob('uniform_scale').getValue(0)\n    camSkewX = toCam.knob('skew').getValue(0)\n    camSkewY = toCam.knob('skew').getValue(1)\n    camSkewZ = toCam.knob('skew').getValue(2)\n    camPivotX = toCam.knob('pivot').getValue(0)\n    camPivotY = toCam.knob('pivot').getValue(1)\n    camPivotZ = toCam.knob('pivot').getValue(2)\n    camFocalLength = toCam.knob('focal').getValue(0)\n    camHap = toCam.knob('haperture').getValue(0)\n    camVap = toCam.knob('vaperture').getValue(0)\n    camNear = toCam.knob('near').getValue(0)\n    camFar = toCam.knob('far').getValue(1)\n    camtr2dx = toCam.knob('win_translate').getValue(0)\n    camtr2dy = toCam.knob('win_translate').getValue(1)\n    camFdist = toCam.knob('win_scale').getValue(0)\n    camFstop = toCam.knob('win_scale').getValue(0)\n    projFrame = tg.knob(\"projectionFrame\").getValue()\n    overscanH = tg.knob(\"outputOverscanFactor\").getValue(0)\n    overscanV = tg.knob(\"outputOverscanFactor\").getValue(1)\n    input1nameA = tg.input(1).name()\n    newCamName = input1nameA + \"_projection_\" + str(int(projFrame)) + \"_\"\n    nuke.root().end()\n    myRoot = nuke.toNode(\"root\")\n    CamP = nuke.createNode(\"Camera2\", inpanel = False)\n    CamP.setName(newCamName)\n    CamP\[\"tile_color\"].setValue(503551743)\n    CamP\[\"translate\"].setValue(camTrX, 0)    \n    CamP\[\"translate\"].setValue(camTrY, 1 )\n    CamP\[\"translate\"].setValue(camTrZ, 2 )\n    CamP\[\"rotate\"].setValue(camRoX, 0 )\n    CamP\[\"rotate\"].setValue(camRoY, 1 )\n    CamP\[\"rotate\"].setValue(camRoZ, 2 )\n    CamP\[\"scaling\"].setValue(camScX, 0 )\n    CamP\[\"scaling\"].setValue(camScY, 1 )\n    CamP\[\"scaling\"].setValue(camScZ, 2 )\n    CamP\[\"uniform_scale\"].setValue(camUs )\n    CamP\[\"skew\"].setValue(camSkewX, 0 )\n    CamP\[\"skew\"].setValue(camSkewY, 1 )\n    CamP\[\"skew\"].setValue(camSkewZ, 2 )\n    CamP\[\"pivot\"].setValue(camPivotX, 0 )\n    CamP\[\"pivot\"].setValue(camPivotY, 1 )\n    CamP\[\"pivot\"].setValue(camPivotZ, 2 )\n    CamP\[\"focal\"].setValue(camFocalLength )\n    CamP\[\"haperture\"].setValue(camHap )\n    CamP\[\"vaperture\"].setValue(camVap )\n    CamP\[\"near\"].setValue(camNear )\n    CamP\[\"far\"].setValue(camFar )\n    CamP\[\"win_translate\"].setValue(camtr2dx, 0 )\n    CamP\[\"win_translate\"].setValue(camtr2dy, 1 )\n    CamP\[\"focal_point\"].setValue(camFdist )\n    CamP\[\"fstop\"].setValue(camFstop )\n    CamP\[\"label\"].setValue(\"htal overscan = \" + str(overscanH) + \", vtal verscan =\" + str(overscanV)  )\ncreateCamera()" +STARTLINE}
 addUserKnob {20 checkProjection}
 addUserKnob {6 checkProjectionBool l "Check Projection" +STARTLINE}
 addUserKnob {26 explainText l "" +STARTLINE T "Checkerboard shows coverage and alignment\n"}
 addUserKnob {20 AOVs}
 addUserKnob {41 in l P T pWprojector.in}
 addUserKnob {20 Info}
 addUserKnob {26 infotext l "" +STARTLINE T "Gnomon Workshop Example by  <font color=\"green\"><b>Nacho Thomas</b></font><br />\nThis node will let you prepare your CG for paintover. <br />\n1. Choose your projection frame <br />\n2. Decide the output overscan factor and resolution multiplier<br />\n3. Decide if you want to label your image (recommended)<br />\n(If you loose your camera, you can always reconstruct it)<br />\n4. Press \"Create Projection Camera\" and use it to project the paintover. <br />\n5. (Optional) Use the checkProjection to evaluate coverage\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x71c67100
  label "labels\n"
  note_font_size 42
  xpos 218
  ypos 746
  bdwidth 236
  bdheight 156
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x7171c600
  label "checker pattern"
  note_font_size 30
  xpos 396
  ypos 979
  bdwidth 230
  bdheight 253
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x8e8e3800
  note_font_size 42
  xpos 147
  ypos 366
  bdwidth 451
  bdheight 188
 }
 Input {
  inputs 0
  name InputCamera
  label "\[value number]"
  xpos 649
  ypos 2
  number 1
 }
 Input {
  inputs 0
  name InputAOVbundle
  label "\[value number]"
  xpos 0
  ypos -551
 }
set N4263a400 [stack 0]
 Dot {
  name Dot2
  xpos 34
  ypos -126
 }
 Dot {
  name Dot1
  xpos 34
  ypos 88
 }
set N4263ac00 [stack 0]
 Dot {
  name Dot5
  xpos 34
  ypos 439
 }
set N4263b000 [stack 0]
 Dot {
  name Dot6
  xpos 191
  ypos 439
 }
 Reformat {
  type scale
  scale {{parent.outputOverscanFactor.w} {parent.outputOverscanFactor.h}}
  resize none
  name Reformat1
  xpos 157
  ypos 481
 }
 Reformat {
  type scale
  scale {{parent.dmpResolutionMultiplier}}
  name Reformat2
  xpos 157
  ypos 522
 }
 Dot {
  name Dot7
  xpos 191
  ypos 579
 }
set N4265c800 [stack 0]
 FrameHold {
  firstFrame {{parent.projectionFrame}}
  name FrameHold1
  xpos 157
  ypos 651
 }
 Dot {
  name Dot9
  xpos 191
  ypos 770
 }
set N4265cc00 [stack 0]
 Dot {
  name Dot11
  xpos 257
  ypos 770
 }
set N4265d000 [stack 0]
 Dot {
  name Dot8
  xpos 398
  ypos 770
 }
push $N4263ac00
 Dot {
  name Dot12
  xpos -153
  ypos 88
 }
 NoOp {
  name evalOscan
  xpos -187
  ypos 168
  addUserKnob {20 User}
  addUserKnob {3 incomingSizew}
  incomingSizew {{width}}
  addUserKnob {3 incomingSizeh -STARTLINE}
  incomingSizeh {{height}}
  addUserKnob {7 imageAspect}
  imageAspect {{incomingSizew/incomingSizeh}}
  addUserKnob {7 pixelAspect -STARTLINE}
  pixelAspect {{pixel_aspect}}
  addUserKnob {3 incomingImageSizex}
  incomingImageSizex {{format.x}}
  addUserKnob {3 incomingImageSizey -STARTLINE}
  incomingImageSizey {{format.y}}
  addUserKnob {3 incomingImageSizer}
  incomingImageSizer {{format.r}}
  addUserKnob {3 incomingImageSizet -STARTLINE}
  incomingImageSizet {{format.t}}
  addUserKnob {3 incomingBboxx}
  incomingBboxx {{bbox.x}}
  addUserKnob {3 incomingBboxy -STARTLINE}
  incomingBboxy {{bbox.y}}
  addUserKnob {3 incomingBboxr}
  incomingBboxr {{bbox.r}}
  addUserKnob {3 incomingBboxt -STARTLINE}
  incomingBboxt {{bbox.t}}
  addUserKnob {3 marginsx}
  marginsx {{(incomingBboxx)<=0?(abs(incomingBboxx)):0}}
  addUserKnob {3 marginsy -STARTLINE}
  marginsy {{(incomingBboxy)<=0?(abs(incomingBboxy)):0}}
  addUserKnob {3 marginsr}
  marginsr {{(incomingBboxr)>=(incomingImageSizer)?(abs(incomingBboxr)-(incomingImageSizer)):0}}
  addUserKnob {3 marginst -STARTLINE}
  marginst {{(incomingBboxt)>=(incomingImageSizet)?(abs(incomingBboxt)-(incomingImageSizet)):0}}
  addUserKnob {3 maxMarginsw}
  maxMarginsw {{"max(marginsx, marginsr)"}}
  addUserKnob {3 maxMarginsh -STARTLINE}
  maxMarginsh {{"max(marginsy, marginst)"}}
  addUserKnob {3 bboxWithMaxMarginsx}
  bboxWithMaxMarginsx {{incomingImageSizex-maxMarginsw}}
  addUserKnob {3 bboxWithMaxMarginsy -STARTLINE}
  bboxWithMaxMarginsy {{incomingImageSizey-maxMarginsh}}
  addUserKnob {3 bboxWithMaxMarginsr}
  bboxWithMaxMarginsr {{incomingImageSizer+maxMarginsw}}
  addUserKnob {3 bboxWithMaxMarginst -STARTLINE}
  bboxWithMaxMarginst {{incomingImageSizet+maxMarginsh}}
  addUserKnob {7 overscanFactorw}
  overscanFactorw {{(-bboxWithMaxMarginsx+bboxWithMaxMarginsr)/incomingImageSizer}}
  addUserKnob {7 overscanFactorh -STARTLINE}
  overscanFactorh {{(-bboxWithMaxMarginsy+bboxWithMaxMarginst)/incomingImageSizet}}
 }
push $N4265c800
 NoOp {
  name evalOutputImage
  xpos 256
  ypos 576
  addUserKnob {20 User}
  addUserKnob {3 incomingSizew}
  incomingSizew {{width}}
  addUserKnob {3 incomingSizeh -STARTLINE}
  incomingSizeh {{height}}
  addUserKnob {7 imageAspect}
  imageAspect {{incomingSizew/incomingSizeh}}
  addUserKnob {7 pixelAspect}
  pixelAspect {{pixel_aspect}}
  addUserKnob {3 incomingImageSizex}
  incomingImageSizex {{format.x}}
  addUserKnob {3 incomingImageSizey -STARTLINE}
  incomingImageSizey {{format.y}}
  addUserKnob {3 incomingImageSizer}
  incomingImageSizer {{format.r}}
  addUserKnob {3 incomingImageSizet -STARTLINE}
  incomingImageSizet {{format.t}}
  addUserKnob {3 incomingBboxx}
  incomingBboxx {{bbox.x}}
  addUserKnob {3 incomingBboxy -STARTLINE}
  incomingBboxy {{bbox.y}}
  addUserKnob {3 incomingBboxr}
  incomingBboxr {{bbox.r}}
  addUserKnob {3 incomingBboxt -STARTLINE}
  incomingBboxt {{bbox.t}}
  addUserKnob {3 marginsx}
  marginsx {{(incomingBboxx)<=0?(abs(incomingBboxx)):0}}
  addUserKnob {3 marginsy -STARTLINE}
  marginsy {{(incomingBboxy)<=0?(abs(incomingBboxy)):0}}
  addUserKnob {3 marginsr}
  marginsr {{(incomingBboxr)>=(incomingImageSizer)?(abs(incomingBboxr)-(incomingImageSizer)):0}}
  addUserKnob {3 marginst -STARTLINE}
  marginst {{(incomingBboxt)>=(incomingImageSizet)?(abs(incomingBboxt)-(incomingImageSizet)):0}}
  addUserKnob {3 maxMarginsw}
  maxMarginsw {{"max(marginsx, marginsr)"}}
  addUserKnob {3 maxMarginsh -STARTLINE}
  maxMarginsh {{"max(marginsy, marginst)"}}
  addUserKnob {3 bboxWithMaxMarginsx}
  bboxWithMaxMarginsx {{incomingImageSizex-maxMarginsw}}
  addUserKnob {3 bboxWithMaxMarginsy -STARTLINE}
  bboxWithMaxMarginsy {{incomingImageSizey-maxMarginsh}}
  addUserKnob {3 bboxWithMaxMarginsr}
  bboxWithMaxMarginsr {{incomingImageSizer+maxMarginsw}}
  addUserKnob {3 bboxWithMaxMarginst -STARTLINE}
  bboxWithMaxMarginst {{incomingImageSizet+maxMarginsh}}
  addUserKnob {7 overscanFactorw}
  overscanFactorw {{(-bboxWithMaxMarginsx+bboxWithMaxMarginsr)/incomingImageSizer}}
  addUserKnob {7 overscanFactorh}
  overscanFactorh {{(-bboxWithMaxMarginsy+bboxWithMaxMarginst)/incomingImageSizet}}
 }
 CheckerBoard2 {
  inputs 0
  name CheckerBoard1
  xpos 536
  ypos 1059
 }
 Reformat {
  type "to box"
  box_width {{parent.evalOutputImage.incomingSizew}}
  box_height {{parent.evalOutputImage.incomingSizeh}}
  box_fixed true
  resize distort
  name Reformat3
  xpos 536
  ypos 1128
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.green 0 1 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 rgba.red 0 0 rgba.alpha 0 3"
  name Shuffle1
  xpos 536
  ypos 1152
 }
 ColorCorrect {
  channels alpha
  gain 4
  name ColorCorrect1
  xpos 536
  ypos 1176
 }
 BlackOutside {
  name BlackOutside1
  xpos 536
  ypos 1208
 }
set N42685800 [stack 0]
push $N4265d000
 Text2 {
  font_size_toolbar 60
  font_width_toolbar 100
  font_height_toolbar 100
  message "projection frame \[value projectionFrame], original size is \[value evalOscan.incomingSizew]x\[value evalOscan.incomingSizeh], with overscan multiplier of \[value parent.outputOverscanFactor.w] htal and \[value parent.outputOverscanFactor.h] vtal, multiplied by \[value parent.dmpResolutionMultiplier] resulting in \[value evalOutputImage.incomingSizew]x\[value evalOutputImage.incomingSizeh]\nbased on \[value \[topnode this.parent.input0].file]\ncamera used \[value \[topnode this.parent.input1].file]\nprojection camera> translate >(\[ value frameholdedCameraWithOverscan.translate.x], \[ value frameholdedCameraWithOverscan.translate.y], \[ value frameholdedCameraWithOverscan.translate.z]), rotate >(\[ value frameholdedCameraWithOverscan.rotate.x], \[ value frameholdedCameraWithOverscan.rotate.y], \[ value frameholdedCameraWithOverscan.rotate.z]), focal> \[ value frameholdedCameraWithOverscan.focal], haperture> \[ value frameholdedCameraWithOverscan.haperture], vaperture> \[ value frameholdedCameraWithOverscan.vaperture]"
  old_message {{112 114 111 106 101 99 116 105 111 110 32 102 114 97 109 101 32 49 50 50 51 44 32 111 114 105 103 105 110 97 108 32 115 105 122 101 32 105 115 32 49 57 50 48 120 49 48 56 48 44 32 119 105 116 104 32 111 118 101 114 115 99 97 110 32 109 117 108 116 105 112 108 105 101 114 32 111 102 32 49 46 49 32 104 116 97 108 32 97 110 100 32 49 46 51 32 118 116 97 108 44 32 109 117 108 116 105 112 108 105 101 100 32 98 121 32 50 32 114 101 115 117 108 116 105 110 103 32 105 110 32 52 50 50 52 120 50 56 48 56 10 98 97 115 101 100 32 111 110 32 68 58 47 71 110 111 109 111 110 87 111 114 107 115 104 111 112 47 50 68 47 114 101 110 100 101 114 115 47 78 89 67 95 98 101 97 117 116 121 95 49 49 51 52 46 101 120 114 10 99 97 109 101 114 97 32 117 115 101 100 32 68 58 47 71 110 111 109 111 110 95 84 117 116 111 114 105 97 108 47 109 97 121 97 80 114 111 106 101 99 116 47 99 97 99 104 101 47 97 108 101 109 98 105 99 47 77 97 110 104 97 116 116 97 110 95 48 50 95 99 97 109 101 114 97 80 114 111 112 111 115 97 108 49 95 118 48 50 46 97 98 99 10 112 114 111 106 101 99 116 105 111 110 32 99 97 109 101 114 97 62 32 116 114 97 110 115 108 97 116 101 32 62 40 45 52 51 50 56 55 46 49 44 32 51 49 50 50 56 46 51 44 32 45 55 50 48 54 55 41 44 32 114 111 116 97 116 101 32 62 40 45 50 48 46 55 51 53 54 44 32 45 49 52 48 46 57 55 55 44 32 48 46 57 54 50 56 53 41 44 32 102 111 99 97 108 62 32 50 56 44 32 104 97 112 101 114 116 117 114 101 62 32 50 55 46 51 56 49 50 48 50 51 50 44 32 118 97 112 101 114 116 117 114 101 62 32 49 56 46 49 57 52 48 49 57 51 50}
    }
  old_expression_markers {{17 20 40 43 45 48 79 81 92 94 116 116 131 134 136 139 150 197 211 291 324 331 334 340 343 348 361 368 371 378 381 387 398 399 413 423 437 447}
    }
  box {20 20 {parent.evalOutputImage.incomingSizew-20} {parent.evalOutputImage.incomingSizeh/10}}
  yjustify bottom
  transforms {{0 2}
    }
  font_size_values {{0 60 1 60 2 60 3 60 4 60 5 60 6 60 7 60 8 60 9 60 10 60 11 60 12 60 13 60 14 60 15 60 16 60 17 60 18 60 19 60 20 60 21 60 22 60 23 60 24 60 25 60 26 60 27 60 28 60 29 60 30 60 31 60 32 60 33 60 34 60 35 60 0 30 36 60 37 60 38 60 39 60 40 60 41 60 42 60 43 60 44 60 45 60 46 60 47 60 48 60 49 60 50 60 51 60 52 60 53 60 54 60 55 60 56 60 57 60 58 60 59 60 60 60 61 60 62 60 63 60 64 60 65 60 66 60 67 60 68 60 69 60 70 60 71 60 72 60 73 60 74 60 75 60 76 60 77 60 78 60 79 60 80 60 81 60 82 60 83 60 84 60 85 60 86 60 87 60 88 60 89 60 90 60 91 60 92 60 93 60 94 60 95 60 96 60 97 60 98 60 99 60 100 60 101 60 102 60 103 60 104 60 105 60 106 60 107 60 108 60 109 60 110 60 111 60 112 60 113 60 114 60 115 60 116 60 117 60 118 60 119 60 120 60 121 60 122 60 123 60 124 60 125 60 126 60 127 60 128 60 129 60 130 60 131 60 132 60 133 60 134 60 135 60 136 60 137 60 138 60 139 60 140 60 141 60 142 60 143 60 144 60 145 60 146 60 147 60 148 60 149 60 150 60 151 60 152 60 153 60 154 60 155 60 156 60 157 60 158 60 159 60 160 60 161 60 162 60 163 60 164 60 165 60 166 60 167 60 168 60 169 60 170 60 171 60 172 60 173 60 174 60 175 60 176 60 177 60 178 60 179 60 180 60 181 60 182 60 183 60 184 60 185 60 186 60 187 60 188 60 189 60 190 60 191 60 192 60 193 60 194 60 195 60 196 60 197 60 198 60 199 60 200 60 201 60 202 60 203 60 204 60 205 60 206 60 207 60 208 60 209 60 210 60 211 60 212 60 213 60 214 60 215 60 216 60 217 60 218 60 219 60 220 60 221 60 222 60 223 60 224 60 292 60 293 60 294 60 295 60 296 60 297 60 298 60 299 60 300 60 301 60 302 60 303 60 304 60 305 60 306 60 307 60 308 60 309 60 310 60 311 60 312 60 313 60 314 60 315 60 316 60 317 60 318 60 319 60 320 60 321 60 322 60 323 60 324 60 325 60 326 60 327 60 328 60 329 60 330 60 331 60 332 60 333 60 334 60 335 60 336 60 337 60 338 60 339 60 340 60 341 60 342 60 343 60 344 60 345 60 346 60 347 60 348 60 349 60 36 {curve x1001 54} 37 {curve x1001 54} 38 60 39 60 40 60 41 60 42 60 43 60 72 60 73 60 74 60 75 60 76 60 77 60 78 60 79 60 80 60 81 60 82 60 83 60 84 60 85 60 86 60 87 60 88 60 89 60 90 60 91 60 92 60 93 60 94 60 95 60 96 60 97 60 98 60 99 60 100 60 101 60 102 60 103 60 106 60 107 60 108 60 109 60 110 60 111 60 112 60 113 60 114 60 115 60 116 60 119 60 120 60 121 60 122 60 123 60 124 60 125 60 126 60 127 60 128 60 129 60 130 60 131 60 132 60 133 60 134 60 135 60 136 60 137 60 138 60 139 60 140 60 141 60 142 60 143 60 144 60 145 60 146 60 147 60 148 60 149 60 150 60 151 60 152 60 153 60 154 60 155 60 156 60 157 60 158 60 159 60 160 60 161 60 162 60 163 60 350 60 351 60 352 60 353 60 354 60 355 60 356 60 357 60 358 60 359 60 360 60 361 60 362 60 363 60 364 60 365 60 366 60 367 60 368 60 369 60 370 60 371 60 372 60 373 60 374 60 375 60 376 60 377 60 378 60 379 60 380 60 381 60 382 60 383 60 384 60 385 60 386 60 387 60 388 60 389 60 390 60 391 60 392 60 393 60 394 60 395 60 396 60 397 60 398 60 399 60 400 60 401 60 402 60 403 60 404 60 405 60 406 60 407 60 408 60 409 60 410 60 411 60 412 60 413 60 414 60 415 60 416 60 417 60 418 60 419 60 420 60 421 60 422 60 423 60 424 60 425 60 426 60 427 60 428 60 429 60 430 60 431 60 432 60 433 60 434 60 435 60 436 60 437 60 438 60 439 60 440 60 441 60 442 60 443 60 444 60 445 60 446 60 447 60 350 {curve x1001 54} 351 {curve x1001 54} 352 {curve x1001 54} 353 {curve x1001 54} 354 78.408 355 78.408 356 78.408 357 78.408 358 78.408 359 78.408 360 78.408 361 78.408 369 78.408 370 78.408 371 78.408 379 78.408 380 78.408 381 78.408 388 78.408 389 78.408 390 78.408 391 78.408 392 78.408 393 78.408 394 78.408 395 78.408 397 78.408 398 78.408 400 78.408 401 78.408 402 78.408 403 78.408 404 78.408 405 78.408 406 78.408 408 78.408 409 78.408 410 78.408 411 78.408 412 78.408 413 78.408 424 78.408 425 78.408 426 78.408 427 78.408 428 78.408 429 78.408 430 78.408 431 60 432 60 433 60 434 60 435 60 436 60 437 60 225 60 226 60 227 60 228 60 229 60 230 60 231 60 232 60 233 60 234 60 235 60 236 60 237 60 238 60 239 60 240 60 241 60 242 60 243 60 244 60 245 60 246 60 247 60 248 60 249 60 250 60 251 60 252 60 253 60 254 60 255 60 256 60 257 60 258 60 259 60 260 60 261 60 262 60 263 60 264 60 265 60 266 60 267 60 268 60 269 60 270 60 271 60 272 60 273 60 274 60 275 60 276 60 277 60 278 60 279 60 280 60 281 60 282 60 283 60 284 60 285 60 286 60 287 60 288 60 289 60 290 60 291 60 225 60 226 60 227 60 228 60 229 60 230 60 231 60 232 60 233 60 234 60 235 60 236 60 237 60 238 60 239 60 240 60 241 60 242 60 243 60 244 60 245 60 246 60 247 60 248 60 249 60 250 60 251 60 252 60 253 60 254 60 255 60 256 60 257 60 258 60 259 60 260 60 261 60 262 60 263 60 264 60 265 60 266 60 267 60 268 60 269 60 270 60 271 60 272 60 273 60 274 60 275 60 276 60 277 60 278 60 279 60 280 60 281 60 282 60 283 60 284 60 285 60 286 60 287 60 288 60 289 60 290 60 291 60}
    }
  cursor_position 383
  global_font_scale {{parent.textSizeMult}}
  font_size 60
  center {2496 1620}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 3240}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 2496 1620 0 0 1 1 0 0 0 0}
    }
  name Text1
  xpos 97
  ypos 880
 }
push $N4265cc00
 Switch {
  inputs 2
  which {{parent.labelImage}}
  name Switch3
  label label
  xpos 166
  ypos 1127
 }
set N426b1700 [stack 0]
 Grade {
  white {6 1 1 1}
  name Grade1
  xpos 406
  ypos 1133
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos 406
  ypos 1202
 }
 Premult {
  name Premult1
  xpos 406
  ypos 1287
 }
 Dot {
  name Dot4
  xpos 440
  ypos 1323
 }
 Camera2 {
  inputs 0
  translate {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(1)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(2)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  rotate {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(1)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(2)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  scaling {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(1)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(2)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  uniform_scale {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  skew {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(1)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(2)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  pivot_translate {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(1)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(2)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  focal {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  haperture {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\nho\\ =\\ tg.knob(\\\"outputOverscanFactor\\\").getValue(0)\\nvo\\ =\\ tg.knob(\\\"outputOverscanFactor\\\").getValue(1)\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\ *\\ ho\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)*\\ ho\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  vaperture {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\nho\\ =\\ tg.knob(\\\"outputOverscanFactor\\\").getValue(0)\\nvo\\ =\\ tg.knob(\\\"outputOverscanFactor\\\").getValue(1)\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\ *\\ vo\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\ *\\ vo\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  near {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  far {{"\[python -execlocal tg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\ntk\\ =\\ nuke.thisKnob().name()\\nkp\\ =\\ int(0)\\npf\\ =\\ tg.knob(\\\"projectionFrame\\\").getValue()\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(pf,\\ kp)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
  name frameholdedCameraWithOverscan
  xpos 664
  ypos 66
 }
 Camera2 {
  inputs 0
  name CameraIfNoInputCamera
  xpos 561
  ypos 120
 }
 Switch {
  inputs 2
  which {{parent.isInput1aCamera}}
  name Switch1
  xpos 654
  ypos 241
 }
push $N4263b000
 Dot {
  name Dot10
  xpos 43
  ypos 1390
 }
set N426d9800 [stack 0]
 Group {
  inputs 3
  name pWprojector
  tile_color 0x499900ff
  note_font_size 40
  xpos 654
  ypos 1371
  addUserKnob {20 pWcontrols l Controls}
  addUserKnob {22 pWprojectorDocumentation l Documentation T "import webbrowser\n\ndef openWebpage():\n  webbrowser.open(\"http://nachothomas.com/allNukeToolsDocs.html\")\n\nopenWebpage()" +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {6 isThereProjCam +INVISIBLE +STARTLINE}
  isThereProjCam {{"\[exists input1]"}}
  addUserKnob {41 frameToHold l "Frame to Hold" T pCamValues.frameToHold}
  addUserKnob {20 motionBlur l "Motion Blur"}
  addUserKnob {41 mv_presets l "mv presets" T VectorBlur1.mv_presets}
  addUserKnob {41 blur_type l "blur type" T VectorBlur1.blur_type}
  addUserKnob {41 scale l "motion amount" T VectorBlur1.scale}
  addUserKnob {41 motion_falloff l "motion falloff" T VectorBlur1.motion_falloff}
  addUserKnob {41 offset l "shutter offset" T VectorBlur1.offset}
  addUserKnob {20 AOVs}
  addUserKnob {20 inputLayers l "Input Layers" n 1}
  addUserKnob {20 endGroup n -1}
  addUserKnob {41 in l pWorld T ShuffleP.in}
  addUserKnob {6 unpremultP -STARTLINE}
  addUserKnob {41 in_1 l "Motion Vector" T ShuffleMV.in}
  addUserKnob {6 unpremultMV -STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {20 outputLayers l "Output Layers" n 1}
  addUserKnob {4 outputChannels M {"projection only (as RGBA) " "MBprojection only (as RGBA)" "projection(RGBA) + MBprojection(RGBA) " ""}}
  addUserKnob {20 endGroup_1 l endGroup n -1}
 }
  BackdropNode {
   inputs 0
   name BackdropNode1
   tile_color 0x71c67100
   label "read cam matrix"
   note_font_size 42
   xpos 1259
   ypos 77
   bdwidth 397
   bdheight 213
  }
  BackdropNode {
   inputs 0
   name BackdropNode2
   tile_color 0x8e388e00
   label "unpremults and output channels"
   note_font_size 42
   xpos -218
   ypos -376
   bdwidth 645
   bdheight 502
  }
  BackdropNode {
   inputs 0
   name BackdropNode3
   tile_color 0x8e388e00
   label "evaluate cg"
   note_font_size 42
   xpos -432
   ypos 240
   bdwidth 422
   bdheight 146
  }
  BackdropNode {
   inputs 0
   name BackdropNode4
   tile_color 0xaaaaaa00
   label "pW to Pcam then pCamNorm"
   note_font_size 42
   xpos 789
   ypos 461
   bdwidth 596
   bdheight 534
  }
  BackdropNode {
   inputs 0
   name BackdropNode5
   tile_color 0x71c67100
   label "mult proj by alpha"
   note_font_size 42
   xpos -10
   ypos 1144
   bdwidth 899
   bdheight 174
  }
  Input {
   inputs 0
   name InputAOVbundle
   label "\[value number]"
   xpos 0
   ypos -538
  }
  Dot {
   name Dot10
   xpos 34
   ypos -296
  }
  Shuffle {
   in motionvector
   in2 alpha
   alpha red2
   out mvTemp
   name ShuffleMV
   xpos -1
   ypos -265
  }
set N42738400 [stack 0]
  Unpremult {
   channels mvTemp
   name Unpremult2
   xpos -208
   ypos -242
  }
push $N42738400
  Switch {
   inputs 2
   which {{parent.unpremultMV}}
   name SwitchUnpremultMV
   xpos -1
   ypos -207
  }
  Shuffle {
   in mvTemp
   out motionvector
   name ShuffleOutputMotionVector
   xpos 0
   ypos -164
  }
set N42738c00 [stack 0]
  Remove {
   channels mvTemp
   name Remove3
   xpos 0
   ypos -109
  }
  Shuffle {
   in {P.X P.Y P.Z -P.red}
   in2 alpha
   alpha red2
   out Ptemp
   name ShuffleP
   xpos 0
   ypos -48
  }
set N42739400 [stack 0]
  Unpremult {
   channels Ptemp
   name Unpremult1
   xpos -86
   ypos -17
  }
push $N42739400
  Switch {
   inputs 2
   which {{parent.unpremultP}}
   name Switch1
   xpos 0
   ypos 11
  }
set N426ded00 [stack 0]
  Shuffle {
   in Ptemp
   out P
   name ShuffleOutputP
   xpos 0
   ypos 63
  }
  Remove {
   channels Ptemp
   name Remove4
   xpos 0
   ypos 94
  }
  Dot {
   name Dot1
   xpos 34
   ypos 165
  }
set N42772400 [stack 0]
  Dot {
   name Dot4
   xpos -388
   ypos 165
  }
  NoOp {
   name evaluateOscan
   xpos -422
   ypos 320
   addUserKnob {20 User}
   addUserKnob {14 incomingSize R 0 100}
   incomingSize {{width} {height}}
   addUserKnob {7 imageAspect -STARTLINE}
   imageAspect {{incomingSize.w/incomingSize.h}}
   addUserKnob {7 pixelAspect}
   pixelAspect {{pixel_aspect}}
   addUserKnob {26 ""}
   addUserKnob {15 incomingImageSize}
   incomingImageSize {{format.x} {format.y} {format.r} {format.t}}
   addUserKnob {15 incomingBbox}
   incomingBbox {{bbox.x} {bbox.y} {bbox.r} {bbox.t}}
   addUserKnob {15 margins}
   margins {{(incomingBbox)<=0?(abs(incomingBbox)):0} {(incomingBbox)<=0?(abs(incomingBbox)):0} {(incomingBbox)>=(incomingImageSize)?(abs(incomingBbox)-(incomingImageSize)):0} {(incomingBbox)>=(incomingImageSize)?(abs(incomingBbox)-(incomingImageSize)):0}}
   addUserKnob {14 maxMargins R 0 100}
   maxMargins {{"max(margins.x, margins.r)"} {"max(margins.y, margins.t)"}}
   addUserKnob {15 bboxWithMaxMargins}
   bboxWithMaxMargins {{incomingImageSize-maxMargins.w} {incomingImageSize-maxMargins.h} {incomingImageSize+maxMargins.w} {incomingImageSize+maxMargins.h}}
   addUserKnob {14 overscanFactor R 0 100}
   overscanFactor {{(-bboxWithMaxMargins.x+bboxWithMaxMargins.r)/incomingImageSize.r} {(-bboxWithMaxMargins.y+bboxWithMaxMargins.t)/incomingImageSize.t}}
  }
  Input {
   inputs 0
   name InputProjCamera
   label "\[value number]"
   xpos 1430
   ypos -9
   number 1
  }
push $N42738c00
push $N426ded00
  Dot {
   name Dot5
   xpos 833
   ypos 14
  }
  Shuffle {
   in Ptemp
   in2 alpha
   alpha red2
   name ShufflePtempToRGB
   xpos 799
   ypos 154
  }
  Expression {
   expr0 r-parent.pCamValues.world_matrix.3
   expr1 g-parent.pCamValues.world_matrix.7
   expr2 b-parent.pCamValues.world_matrix.11
   name Expression1
   label "moving points so cam is 0,0,0"
   xpos 799
   ypos 541
  }
set N42773c00 [stack 0]
  ColorMatrix {
   matrix {
       {{parent.pCamValues.matrix.0} {parent.pCamValues.matrix.1} {parent.pCamValues.matrix.2}}
       {{parent.pCamValues.matrix.4} {parent.pCamValues.matrix.5} {parent.pCamValues.matrix.6}}
       {{parent.pCamValues.matrix.8} {parent.pCamValues.matrix.9} {parent.pCamValues.matrix.10}}
     }
   invert true
   name ColorMatrix1
   label "changing pW to Pcam\n"
   xpos 913
   ypos 630
  }
push $N42773c00
  Switch {
   inputs 2
   which {{parent.isThereProjCam}}
   name Switch3
   xpos 799
   ypos 721
  }
  Expression {
   expr2 -b
   name Expression2
   label "inverting Z\n"
   xpos 799
   ypos 783
  }
  Expression {
   temp_name0 htan
   temp_expr0 "(parent.pCamValues.haperture /2) / (parent.pCamValues.focal)"
   temp_name1 vtan
   temp_expr1 "(parent.pCamValues.vaperture /2) / (parent.pCamValues.focal)"
   expr0 "(0.5 * r) / (b * htan)"
   expr1 "(0.5 * g) / (b * vtan)"
   expr2 0
   name Expression3
   label "normalize pcam\n"
   xpos 799
   ypos 871
  }
  Expression {
   expr0 "r + 0.5"
   expr1 "g + 0.5"
   name Expression4
   xpos 799
   ypos 943
  }
  Input {
   inputs 0
   name InputDMP
   label "\[value number]"
   xpos 1759
   ypos -6
   number 2
  }
  Dot {
   name Dot6
   xpos 1793
   ypos 1098
  }
  STMap {
   inputs 2
   uv rgb
   name STMap1
   xpos 799
   ypos 1089
  }
  Dot {
   name Dot8
   xpos 833
   ypos 1227
  }
set N4279bc00 [stack 0]
push $N42772400
  Merge2 {
   inputs 2
   operation multiply
   name Merge1
   xpos 0
   ypos 1224
  }
  Dot {
   name Dot2
   xpos 34
   ypos 1287
  }
push $N4279bc00
  Copy {
   inputs 2
   from0 rgba.alpha
   to0 rgba.alpha
   name Copy1
   xpos 799
   ypos 1278
  }
  Remove {
   operation keep
   channels rgba
   name Remove2
   xpos 799
   ypos 1385
  }
set N427dcc00 [stack 0]
  ShuffleCopy {
   inputs 2
   in {{{parent.ShuffleOutputMotionVector.in}}}
   red red
   green green
   blue blue
   out {{{parent.ShuffleOutputMotionVector.out}}}
   name ShuffleCopy1
   xpos 652
   ypos 1477
  }
  VectorBlur2 {
   uv motionvector
   mv_presets "V-Ray Velocity"
   uv_offset -0.5
   scale 10
   soft_lines true
   normalize false
   name VectorBlur1
   xpos 652
   ypos 1562
  }
set N427dd400 [stack 0]
  AddChannels {
   channels MBprojection
   name AddChannels1
   xpos 652
   ypos 1621
  }
  Shuffle {
   out MBprojection
   name Shuffle1
   xpos 652
   ypos 1657
  }
  Remove {
   channels motionvector
   name Remove1
   xpos 652
   ypos 1694
  }
push $N427dcc00
  Copy {
   inputs 2
   from0 -rgba.alpha
   to0 -rgba.alpha
   channels MBprojection
   name Copy2
   xpos 771
   ypos 1688
  }
push $N427dd400
push $N427dcc00
  Switch {
   inputs 3
   which {{outputChannels}}
   name Switch2
   xpos 799
   ypos 1849
  }
set N42824000 [stack 0]
  Output {
   name Output1
   xpos 799
   ypos 1915
  }
  Camera2 {
   inputs 0
   useMatrix true
   matrix {
       {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(1)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(2)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(3)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
       {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(4)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(5)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(6)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(7)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
       {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(8)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(9)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(10)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(11)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
       {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(12)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(13)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(14)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ \\\"world_matrix\\\"\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\nknobItem\\ =\\ int(15)\\nactiveSwitch\\ =\\ 0\\n\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
     }
   focal {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   haperture {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   vaperture {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   near {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   far {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   win_translate {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(1)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   win_scale {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(1)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   winroll {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   focal_point {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   fstop {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\ntk\\ =\\ nuke.thisKnob().name()\\n\\n\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ int(tn.knob(\\\"inputNumber\\\").getValue())\\nknobItem\\ =\\ int(0)\\nactiveSwitch\\ =\\ 0\\nisfh\\ =\\ int(tn.knob(\\\"isFrameholded\\\").getValue())\\nfth\\ =\\ int(tn.knob(\\\"frameToHold\\\").getValue())\\n\\n\\nif\\ tg.input(camInput):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue(0)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ isfh\\ ==\\ 1:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).valueAt(fth,\\ knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(tk).getValue(knobItem)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
   name pCamValues
   label "inputNumber = \[value inputNumber]\nis Frameholded = \[value isFrameholded]\nframeToHold = \[value frameToHold] \n\[value world_matrix.3], \[value world_matrix.7], \[value world_matrix.11]\n\n\n"
   xpos 1359
   ypos 201
   addUserKnob {20 User}
   addUserKnob {3 inputNumber}
   inputNumber 1
   addUserKnob {6 isFrameholded +STARTLINE}
   isFrameholded true
   addUserKnob {3 frameToHold -STARTLINE}
   frameToHold 1001
  }
push $N42824000
  Viewer {
   frame_range 1025-1050
   monitorOutNDISenderName "NukeX - testAOVs_v01 - Viewer1"
   name Viewer1
   xpos 799
   ypos 1998
  }
 end_group
push $N426d9800
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.green 0 1 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 white -1 -1 rgba.alpha 0 3"
  name Shuffle2
  xpos 107
  ypos 1449
 }
 Merge2 {
  inputs 2
  name Merge1
  xpos 484
  ypos 1511
 }
push $N42685800
 Dot {
  name Dot3
  xpos 570
  ypos 1265
 }
push $N426b1700
 CopyBBox {
  inputs 2
  name CopyBBox1
  xpos 166
  ypos 1262
 }
 Switch {
  inputs 2
  which {{parent.checkProjectionBool}}
  name Switch4
  label "check projection "
  xpos 166
  ypos 1722
 }
 Output {
  name Output1
  xpos 166
  ypos 1828
 }
push $N4263a400
 Viewer {
  frame_range 1025-1025
  ignore_pixel_aspect true
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos 166
  ypos 1941
 }
end_group
push $cut_paste_input
Group {
 name GNOMON_Spec_Breakup_
 tile_color 0x2d3bbaff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7a00ff
 selected true
 xpos 10514
 ypos 2462
 addUserKnob {20 User}
 addUserKnob {6 hasAOVbundle +STARTLINE}
 hasAOVbundle {{"\[exists input0]"}}
 addUserKnob {6 hasBreakup +STARTLINE}
 hasBreakup {{"\[exists input1]"}}
}
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x8e388e00
  label specular
  note_font_size 42
  xpos -483
  ypos -236
  bdwidth 346
  bdheight 306
 }
 Input {
  inputs 0
  name InputBreakup_A
  xpos -1039
  ypos -72
  number 1
 }
 Dot {
  name Dot2
  xpos -1005
  ypos 235
 }
set N6791a400 [stack 0]
push $N6791a400
 Input {
  inputs 0
  name InputAOVbundle
  xpos -1652
  ypos -450
 }
set N6791a800 [stack 0]
 Dot {
  name Dot1
  xpos -705
  ypos -156
 }
set N6791ac00 [stack 0]
 Dot {
  name Dot25
  xpos -315
  ypos -156
 }
set N6791b000 [stack 0]
 Dot {
  name Dot26
  xpos -193
  ypos -156
 }
add_layer {lgt1_specular lgt1_specular.red lgt1_specular.green lgt1_specular.blue lgt1_specular.alpha}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_specular
  fromInput2 {{0} B}
  mappings "4 lgt1_specular.red 0 0 rgba.red 0 0 lgt1_specular.green 0 1 rgba.green 0 1 lgt1_specular.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle20
  xpos -227
  ypos -116
 }
 Dot {
  name Dot5
  xpos -193
  ypos 28
 }
set N6791bc00 [stack 0]
 Merge2 {
  inputs 2+1
  operation multiply
  name Merge1
  xpos -227
  ypos 232
 }
 Dot {
  name Dot8
  xpos -191
  ypos 450
 }
set N67936400 [stack 0]
 Dot {
  name Dot9
  xpos -191
  ypos 952
 }
push $N6791a400
 Dot {
  name Dot3
  xpos -1005
  ypos 314
 }
set N67936c00 [stack 0]
push $N67936c00
push $N6791b000
add_layer {lgt0_specular lgt0_specular.red lgt0_specular.green lgt0_specular.blue lgt0_specular.alpha}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_specular
  fromInput2 {{0} B}
  mappings "4 lgt0_specular.red 0 0 rgba.red 0 0 lgt0_specular.green 0 1 rgba.green 0 1 lgt0_specular.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle19
  xpos -349
  ypos -117
 }
 Dot {
  name Dot4
  xpos -315
  ypos -22
 }
set N67937400 [stack 0]
 Merge2 {
  inputs 2+1
  operation multiply
  name Merge5
  xpos -349
  ypos 311
 }
 Dot {
  name Dot7
  xpos -313
  ypos 413
 }
set N67937c00 [stack 0]
 Dot {
  name Dot10
  xpos -313
  ypos 902
 }
push $N67936400
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt1_specular
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt1_specular.red 0 0 rgba.green 0 1 lgt1_specular.green 0 1 rgba.blue 0 2 lgt1_specular.blue 0 2 black -1 -1 lgt1_specular.alpha 0 3"
  name Shuffle1
  xpos -499
  ypos 680
 }
push $N67937c00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt0_specular
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt0_specular.red 0 0 rgba.green 0 1 lgt0_specular.green 0 1 rgba.blue 0 2 lgt0_specular.blue 0 2 black -1 -1 lgt0_specular.alpha 0 3"
  name Shuffle2
  xpos -497
  ypos 551
 }
push $N6791bc00
push $N67937400
push $N6791ac00
 Merge2 {
  inputs 2
  operation difference
  name Merge2
  xpos -737
  ypos -25
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge3
  xpos -737
  ypos 25
 }
 Dot {
  name Dot6
  xpos -703
  ypos 491
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_specular
  name Copy1
  xpos -737
  ypos 545
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_specular
  name Copy2
  xpos -737
  ypos 668
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge8
  xpos -737
  ypos 899
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge9
  xpos -737
  ypos 949
 }
push $N6791ac00
 Dot {
  name Dot11
  xpos -818
  ypos -156
 }
 NoOp {
  name NoOp1
  xpos -852
  ypos 1035
 }
 Switch {
  inputs 2
  which {{parent.hasBreakup}}
  name Switch1
  xpos -737
  ypos 1130
 }
push $N6791a800
 Switch {
  inputs 2
  which {{parent.hasAOVbundle}}
  name Switch2
  xpos -1652
  ypos 1262
 }
 Output {
  name Output1
  xpos -1652
  ypos 1448
 }
set N67995000 [stack 0]
push $N67995000
 Viewer {
  inputs 2
  frame_range 1025-1225
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos -737
  ypos 1586
 }
end_group
push $cut_paste_input
add_layer {lgt1_diffuse lgt1_diffuse.red lgt1_diffuse.green lgt1_diffuse.blue lgt1_diffuse.alpha}
add_layer {lgt1_sss lgt1_sss.red lgt1_sss.green lgt1_sss.blue lgt1_sss.alpha}
add_layer {lgt1_transmission lgt1_transmission.red lgt1_transmission.green lgt1_transmission.blue lgt1_transmission.alpha}
Group {
 name GNOMON_CC_lightGroup_
 tile_color 0x4f3e93ff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10177
 ypos 2334
 addUserKnob {20 User l Main}
 addUserKnob {6 hasAOVbundle +INVISIBLE +STARTLINE}
 hasAOVbundle {{"\[exists input0]"}}
 addUserKnob {22 detectChannels l "Detect Channels" T "import nuke\nimport os\nn2C = nuke.thisNode() \nn = nuke.thisGroup()\nhasAOV = n.knob(\"hasAOVbundle\").getValue()\nif hasAOV == 0:\n    nuke.message (\"no AOV bundle attached\")\nelse:\n    n2C.begin()\n    chCheck = nuke.toNode('channelCheck')\n    allChannelsRaw = list()\n    allChannelsFiltered = list()\n    for chan in chCheck.channels():\n        nameSplit = chan.rsplit(\"_\").__getitem__(0)\n        if nameSplit not in allChannelsRaw:\n            if \"lgt\" in nameSplit:\n                allChannelsRaw.append(nameSplit)\n\n\nselLgtGrp = n.knob(\"lightGroup\").setValues(allChannelsRaw) " +STARTLINE}
 addUserKnob {26 affectText l "Apply CC to "}
 addUserKnob {4 lightGroup M {lgt0 lgt1}}
 lightGroup lgt1
 addUserKnob {22 UpdateLayers l "Update Layers" T "selLgtGrp = n.knob(\"lightGroup\").value()\nsetDif = selLgtGrp + \"_diffuse\"\nsetSpec = selLgtGrp + \"_specular\"\nsetSSS = selLgtGrp + \"_sss\"\nsetTrans = selLgtGrp + \"_transmission\"\nn.knob(\"lgtDiffuse\").setValue(setDif)\nn.knob(\"lgtSpec\").setValue(setSpec)\nn.knob(\"lgtSss\").setValue(setSSS)\nn.knob(\"lgtTrans\").setValue(setTrans)" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 lgtLayers l "Light Group Layers "}
 addUserKnob {41 lgtDiffuse l diffuse T ShuffleLgtDIFUSE.in1}
 addUserKnob {41 lgtSpec l specular T ShuffleLgtSPECULAR.in1}
 addUserKnob {41 lgtSss l sss T ShuffleLgtSSS.in1}
 addUserKnob {41 lgtTrans l transmission T ShuffleLgtTRANSMISSION.in1}
 addUserKnob {26 ""}
 addUserKnob {26 applyTo l "Apply To"}
 addUserKnob {6 ApplyDiffuse l Diffuse +STARTLINE}
 ApplyDiffuse true
 addUserKnob {6 ApplySpecular l Specular -STARTLINE}
 ApplySpecular true
 addUserKnob {6 ApplySSS l SSS -STARTLINE}
 ApplySSS true
 addUserKnob {6 ApplyTransmission l Transmission -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {20 master l "@b;master" n 1}
 addUserKnob {41 saturation T ColorCorrect1.saturation}
 addUserKnob {41 contrast T ColorCorrect1.contrast}
 addUserKnob {41 gamma T ColorCorrect1.gamma}
 addUserKnob {41 gain T ColorCorrect1.gain}
 addUserKnob {41 offset T ColorCorrect1.offset}
 addUserKnob {20 "" n -1}
 addUserKnob {20 shadows l "@b;shadows" n 1}
 shadows 0
 addUserKnob {41 shadows.saturation l saturation T ColorCorrect1.shadows.saturation}
 addUserKnob {41 shadows.contrast l contrast T ColorCorrect1.shadows.contrast}
 addUserKnob {41 shadows.gamma l gamma T ColorCorrect1.shadows.gamma}
 addUserKnob {41 shadows.gain l gain T ColorCorrect1.shadows.gain}
 addUserKnob {41 shadows.offset l offset T ColorCorrect1.shadows.offset}
 addUserKnob {20 "" n -1}
 addUserKnob {20 midtones l "@b;midtones" n 1}
 midtones 0
 addUserKnob {41 midtones.saturation l saturation T ColorCorrect1.midtones.saturation}
 addUserKnob {41 midtones.contrast l contrast T ColorCorrect1.midtones.contrast}
 addUserKnob {41 midtones.gamma l gamma T ColorCorrect1.midtones.gamma}
 addUserKnob {41 midtones.gain l gain T ColorCorrect1.midtones.gain}
 addUserKnob {41 midtones.offset l offset T ColorCorrect1.midtones.offset}
 addUserKnob {20 "" n -1}
 addUserKnob {20 highlights l "@b;highlights" n 1}
 highlights 0
 addUserKnob {41 highlights.saturation l saturation T ColorCorrect1.highlights.saturation}
 addUserKnob {41 highlights.contrast l contrast T ColorCorrect1.highlights.contrast}
 addUserKnob {41 highlights.gamma l gamma T ColorCorrect1.highlights.gamma}
 addUserKnob {41 highlights.gain l gain T ColorCorrect1.highlights.gain}
 addUserKnob {41 highlights.offset l offset T ColorCorrect1.highlights.offset}
 addUserKnob {20 "" n -1}
 addUserKnob {20 Info}
 addUserKnob {26 CustomTextNacho l "" +STARTLINE T "Gnomon Workshop Example by  <font color=\"green\"><b>Nacho Thomas</b></font>"}
}
 Input {
  inputs 0
  name InputAOVbundle
  xpos 0
  ypos -1001
 }
 Dot {
  name Dot54
  note_font "Bitstream Vera Sans"
  xpos 34
  ypos -834
 }
set N67a16000 [stack 0]
 NoOp {
  name channelCheck
  note_font "Bitstream Vera Sans"
  xpos -222
  ypos -837
 }
 Input {
  inputs 0
  name InputMask
  xpos 999
  ypos 444
  number 1
 }
 Dot {
  name Dot22
  xpos 1033
  ypos 538
 }
 Dot {
  name Dot23
  xpos 904
  ypos 538
 }
set N67a17000 [stack 0]
push $N67a16000
 Dot {
  name Dot1
  xpos 34
  ypos -94
 }
set N67a17400 [stack 0]
 Dot {
  name Dot2
  xpos 542
  ypos -94
 }
set N67a17800 [stack 0]
 Dot {
  name Dot3
  xpos 649
  ypos -94
 }
set N67a17c00 [stack 0]
 Dot {
  name Dot4
  xpos 750
  ypos -94
 }
set N67a32000 [stack 0]
 Dot {
  name Dot5
  xpos 857
  ypos -94
 }
add_layer {lgtCurrent_transmission lgtCurrent_transmission.red lgtCurrent_transmission.green lgtCurrent_transmission.blue lgtCurrent_transmission.alpha}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_transmission
  out1 lgtCurrent_transmission
  fromInput2 {{0} B}
  mappings "4 lgt1_transmission.red 0 0 lgtCurrent_transmission.red 0 0 lgt1_transmission.green 0 1 lgtCurrent_transmission.green 0 1 lgt1_transmission.blue 0 2 lgtCurrent_transmission.blue 0 2 black -1 -1 lgtCurrent_transmission.alpha 0 3"
  name ShuffleLgtTRANSMISSION
  xpos 823
  ypos -12
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_transmission
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_transmission.red 0 0 rgba.red 0 0 lgtCurrent_transmission.green 0 1 rgba.green 0 1 lgtCurrent_transmission.blue 0 2 rgba.blue 0 2 lgtCurrent_transmission.alpha 0 3 rgba.alpha 0 3"
  name Shuffle4
  xpos 823
  ypos 50
 }
 Dot {
  name Dot9
  xpos 857
  ypos 389
 }
set N67a33000 [stack 0]
 Dot {
  name Dot17
  xpos 857
  ypos 469
 }
 ColorCorrect {
  inputs 1+1
  gain 1.04
  name ColorCorrect1
  xpos 823
  ypos 590
 }
 set C67a33800 [stack 0]
 Dot {
  name Dot21
  xpos 857
  ypos 840
 }
set N67a33c00 [stack 0]
 Dot {
  name Dot10
  xpos 857
  ypos 1980
 }
push $N67a17000
 Dot {
  name Dot24
  xpos 783
  ypos 538
 }
set N67a62400 [stack 0]
push $N67a32000
add_layer {lgtCurrent_sss lgtCurrent_sss.red lgtCurrent_sss.green lgtCurrent_sss.blue lgtCurrent_sss.alpha}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_sss
  out1 lgtCurrent_sss
  fromInput2 {{0} B}
  mappings "4 lgt1_sss.red 0 0 lgtCurrent_sss.red 0 0 lgt1_sss.green 0 1 lgtCurrent_sss.green 0 1 lgt1_sss.blue 0 2 lgtCurrent_sss.blue 0 2 black -1 -1 lgtCurrent_sss.alpha 0 3"
  name ShuffleLgtSSS
  xpos 716
  ypos -14
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_sss
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_sss.red 0 0 rgba.red 0 0 lgtCurrent_sss.green 0 1 rgba.green 0 1 lgtCurrent_sss.blue 0 2 rgba.blue 0 2 lgtCurrent_sss.alpha 0 3 rgba.alpha 0 3"
  name Shuffle3
  xpos 716
  ypos 49
 }
 Dot {
  name Dot8
  xpos 750
  ypos 302
 }
set N67a63000 [stack 0]
 Dot {
  name Dot16
  xpos 750
  ypos 480
 }
clone $C67a33800 {
  inputs 1+1
  xpos 716
  ypos 594
  selected false
 }
 Dot {
  name Dot20
  xpos 750
  ypos 795
 }
set N67a63c00 [stack 0]
 Dot {
  name Dot11
  xpos 750
  ypos 1893
 }
push $N67a62400
 Dot {
  name Dot25
  xpos 687
  ypos 538
 }
set N67a8c400 [stack 0]
push $N67a17c00
add_layer {lgtCurrent_specular lgtCurrent_specular.red lgtCurrent_specular.green lgtCurrent_specular.blue lgtCurrent_specular.alpha}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_specular
  out1 lgtCurrent_specular
  fromInput2 {{0} B}
  mappings "4 lgt1_specular.red 0 0 lgtCurrent_specular.red 0 0 lgt1_specular.green 0 1 lgtCurrent_specular.green 0 1 lgt1_specular.blue 0 2 lgtCurrent_specular.blue 0 2 black -1 -1 lgtCurrent_specular.alpha 0 3"
  name ShuffleLgtSPECULAR
  xpos 615
  ypos -14
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_specular
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_specular.red 0 0 rgba.red 0 0 lgtCurrent_specular.green 0 1 rgba.green 0 1 lgtCurrent_specular.blue 0 2 rgba.blue 0 2 lgtCurrent_specular.alpha 0 3 rgba.alpha 0 3"
  name Shuffle2
  xpos 615
  ypos 49
 }
 Dot {
  name Dot7
  xpos 649
  ypos 219
 }
set N67a8d000 [stack 0]
 Dot {
  name Dot15
  xpos 649
  ypos 475
 }
clone $C67a33800 {
  inputs 1+1
  xpos 615
  ypos 598
  selected false
 }
 Dot {
  name Dot19
  xpos 649
  ypos 733
 }
set N67a8dc00 [stack 0]
 Dot {
  name Dot12
  xpos 649
  ypos 1810
 }
push $N67a8c400
 Dot {
  name Dot26
  xpos 588
  ypos 538
 }
push $N67a17800
add_layer {lgtCurrent_diffuse lgtCurrent_diffuse.red lgtCurrent_diffuse.green lgtCurrent_diffuse.blue lgtCurrent_diffuse.alpha}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_diffuse
  out1 lgtCurrent_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt1_diffuse.red 0 0 lgtCurrent_diffuse.red 0 0 lgt1_diffuse.green 0 1 lgtCurrent_diffuse.green 0 1 lgt1_diffuse.blue 0 2 lgtCurrent_diffuse.blue 0 2 black -1 -1 lgtCurrent_diffuse.alpha 0 3"
  name ShuffleLgtDIFUSE
  xpos 508
  ypos -12
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_diffuse
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_diffuse.red 0 0 rgba.red 0 0 lgtCurrent_diffuse.green 0 1 rgba.green 0 1 lgtCurrent_diffuse.blue 0 2 rgba.blue 0 2 lgtCurrent_diffuse.alpha 0 3 rgba.alpha 0 3"
  name Shuffle1
  xpos 508
  ypos 56
 }
 Dot {
  name Dot6
  xpos 542
  ypos 148
 }
set N67abf000 [stack 0]
 Dot {
  name Dot14
  xpos 542
  ypos 466
 }
clone $C67a33800 {
  inputs 1+1
  xpos 508
  ypos 597
  selected false
 }
 Dot {
  name Dot18
  xpos 542
  ypos 710
 }
set N67abfc00 [stack 0]
 Dot {
  name Dot13
  xpos 542
  ypos 1739
 }
push $N67a33c00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgtCurrent_transmission
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgtCurrent_transmission.red 0 0 rgba.green 0 1 lgtCurrent_transmission.green 0 1 rgba.blue 0 2 lgtCurrent_transmission.blue 0 2 rgba.alpha 0 3 lgtCurrent_transmission.alpha 0 3"
  name Shuffle8
  xpos 757
  ypos 993
 }
push $N67a63c00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgtCurrent_sss
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgtCurrent_sss.red 0 0 rgba.green 0 1 lgtCurrent_sss.green 0 1 rgba.blue 0 2 lgtCurrent_sss.blue 0 2 rgba.alpha 0 3 lgtCurrent_sss.alpha 0 3"
  name Shuffle7
  xpos 658
  ypos 918
 }
push $N67a8dc00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgtCurrent_specular
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgtCurrent_specular.red 0 0 rgba.green 0 1 lgtCurrent_specular.green 0 1 rgba.blue 0 2 lgtCurrent_specular.blue 0 2 rgba.alpha 0 3 lgtCurrent_specular.alpha 0 3"
  name Shuffle6
  xpos 542
  ypos 849
 }
push $N67abfc00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgtCurrent_diffuse
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgtCurrent_diffuse.red 0 0 rgba.green 0 1 lgtCurrent_diffuse.green 0 1 rgba.blue 0 2 lgtCurrent_diffuse.blue 0 2 rgba.alpha 0 3 lgtCurrent_diffuse.alpha 0 3"
  name Shuffle5
  xpos 427
  ypos 784
 }
push $N67a33000
push $N67a63000
push $N67a8d000
push $N67abf000
push $N67a17400
 Merge2 {
  inputs 2
  operation difference
  name Merge1
  xpos 0
  ypos 145
  disable {{1-parent.ApplyDiffuse}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge2
  xpos -2
  ypos 216
  disable {{1-parent.ApplySpecular}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge3
  xpos -4
  ypos 299
  disable {{1-parent.ApplySSS}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge4
  xpos -6
  ypos 386
  disable {{1-parent.ApplyTransmission}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgtCurrent_diffuse
  name Copy1
  xpos -6
  ypos 772
  disable {{1-parent.ApplyDiffuse}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgtCurrent_specular
  name Copy2
  xpos -6
  ypos 837
  disable {{1-parent.ApplySpecular}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgtCurrent_sss
  name Copy3
  xpos -6
  ypos 906
  disable {{1-parent.ApplySSS}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgtCurrent_transmission
  name Copy4
  xpos -6
  ypos 981
  disable {{1-parent.ApplyTransmission}}
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_diffuse
  out1 {{{parent.ShuffleLgtDIFUSE.in1}}}
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_diffuse.red 0 0 lgt1_diffuse.red 0 0 lgtCurrent_diffuse.green 0 1 lgt1_diffuse.green 0 1 lgtCurrent_diffuse.blue 0 2 lgt1_diffuse.blue 0 2 lgtCurrent_diffuse.alpha 0 3 lgt1_diffuse.alpha 0 3"
  name Shuffle9
  xpos -6
  ypos 1116
  disable {{1-parent.ApplyDiffuse}}
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_specular
  out1 {{{parent.ShuffleLgtSPECULAR.in1}}}
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_specular.red 0 0 lgt1_specular.red 0 0 lgtCurrent_specular.green 0 1 lgt1_specular.green 0 1 lgtCurrent_specular.blue 0 2 lgt1_specular.blue 0 2 lgtCurrent_specular.alpha 0 3 lgt1_specular.alpha 0 3"
  name Shuffle10
  xpos -6
  ypos 1190
  disable {{1-parent.ApplySpecular}}
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_sss
  out1 {{{parent.ShuffleLgtSSS.in1}}}
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_sss.red 0 0 lgt1_sss.red 0 0 lgtCurrent_sss.green 0 1 lgt1_sss.green 0 1 lgtCurrent_sss.blue 0 2 lgt1_sss.blue 0 2 lgtCurrent_sss.alpha 0 3 lgt1_sss.alpha 0 3"
  name Shuffle11
  xpos -5
  ypos 1256
  disable {{1-parent.ApplySSS}}
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_transmission
  out1 {{{parent.ShuffleLgtTRANSMISSION.in1}}}
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_transmission.red 0 0 lgt1_transmission.red 0 0 lgtCurrent_transmission.green 0 1 lgt1_transmission.green 0 1 lgtCurrent_transmission.blue 0 2 lgt1_transmission.blue 0 2 lgtCurrent_transmission.alpha 0 3 lgt1_transmission.alpha 0 3"
  name Shuffle12
  xpos -5
  ypos 1330
  disable {{1-parent.ApplyTransmission}}
 }
 Remove {
  channels lgtCurrent_diffuse
  channels2 lgtCurrent_specular
  channels3 lgtCurrent_sss
  channels4 lgtCurrent_transmission
  name Remove1
  xpos -5
  ypos 1435
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge5
  xpos 0
  ypos 1736
  disable {{1-parent.ApplyDiffuse}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge6
  xpos -2
  ypos 1807
  disable {{1-parent.ApplySpecular}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge7
  xpos -4
  ypos 1890
  disable {{1-parent.ApplySSS}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge8
  xpos -6
  ypos 1977
  disable {{1-parent.ApplyTransmission}}
 }
 Output {
  name Output1
  xpos -6
  ypos 2110
 }
set N67b5d800 [stack 0]
push $N67b5d800
 Viewer {
  inputs 2
  frame_range 1025-1225
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos -26
  ypos 2308
 }
end_group
push $cut_paste_input
Group {
 name GNOMON_CC_layer_
 tile_color 0x5f3893ff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10180
 ypos 2214
 addUserKnob {20 User l Main}
 addUserKnob {6 hasAOVbundle +INVISIBLE +STARTLINE}
 hasAOVbundle {{"\[exists input0]"}}
 addUserKnob {26 ""}
 addUserKnob {26 applyTo l "Apply To"}
 addUserKnob {6 ApplyDiffuse l Diffuse +STARTLINE}
 addUserKnob {6 ApplySpecular l Specular -STARTLINE}
 addUserKnob {6 ApplySSS l SSS -STARTLINE}
 addUserKnob {6 ApplyTransmission l Transmission -STARTLINE}
 addUserKnob {6 emission l Emission -STARTLINE}
 emission true
 addUserKnob {26 ""}
 addUserKnob {20 master l "@b;master" n 1}
 addUserKnob {41 saturation T ColorCorrect1.saturation}
 addUserKnob {41 contrast T ColorCorrect1.contrast}
 addUserKnob {41 gamma T ColorCorrect1.gamma}
 addUserKnob {41 gain T ColorCorrect1.gain}
 addUserKnob {41 offset T ColorCorrect1.offset}
 addUserKnob {20 "" n -1}
 addUserKnob {20 shadows l "@b;shadows" n 1}
 shadows 0
 addUserKnob {41 shadows.saturation l saturation T ColorCorrect1.shadows.saturation}
 addUserKnob {41 shadows.contrast l contrast T ColorCorrect1.shadows.contrast}
 addUserKnob {41 shadows.gamma l gamma T ColorCorrect1.shadows.gamma}
 addUserKnob {41 shadows.gain l gain T ColorCorrect1.shadows.gain}
 addUserKnob {41 shadows.offset l offset T ColorCorrect1.shadows.offset}
 addUserKnob {20 "" n -1}
 addUserKnob {20 midtones l "@b;midtones" n 1}
 midtones 0
 addUserKnob {41 midtones.saturation l saturation T ColorCorrect1.midtones.saturation}
 addUserKnob {41 midtones.contrast l contrast T ColorCorrect1.midtones.contrast}
 addUserKnob {41 midtones.gamma l gamma T ColorCorrect1.midtones.gamma}
 addUserKnob {41 midtones.gain l gain T ColorCorrect1.midtones.gain}
 addUserKnob {41 midtones.offset l offset T ColorCorrect1.midtones.offset}
 addUserKnob {20 "" n -1}
 addUserKnob {20 highlights l "@b;highlights" n 1}
 highlights 0
 addUserKnob {41 highlights.saturation l saturation T ColorCorrect1.highlights.saturation}
 addUserKnob {41 highlights.contrast l contrast T ColorCorrect1.highlights.contrast}
 addUserKnob {41 highlights.gamma l gamma T ColorCorrect1.highlights.gamma}
 addUserKnob {41 highlights.gain l gain T ColorCorrect1.highlights.gain}
 addUserKnob {41 highlights.offset l offset T ColorCorrect1.highlights.offset}
 addUserKnob {20 "" n -1}
 addUserKnob {20 Info}
 addUserKnob {26 CustomTextNacho l "" +STARTLINE T "Gnomon Workshop Example by  <font color=\"green\"><b>Nacho Thomas</b></font>"}
}
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x7171c600
  label diffuse
  note_font_size 42
  xpos 2090
  ypos -75
  bdwidth 390
  bdheight 940
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x8e388e00
  label specular
  note_font_size 42
  xpos 2559
  ypos -80
  bdwidth 346
  bdheight 306
 }
 BackdropNode {
  inputs 0
  name BackdropNode7
  tile_color 0x8e8e3800
  label sss
  note_font_size 42
  xpos 3049
  ypos -80
  bdwidth 352
  bdheight 319
 }
 BackdropNode {
  inputs 0
  name BackdropNode8
  tile_color 0x8e8e3800
  label transmission
  note_font_size 42
  xpos 3697
  ypos -81
  bdwidth 350
  bdheight 306
 }
 Input {
  inputs 0
  name InputAOVbundle
  xpos 1661
  ypos -816
 }
 Dot {
  name Dot54
  note_font "Bitstream Vera Sans"
  xpos 1695
  ypos -649
 }
set N67bc0800 [stack 0]
 NoOp {
  name channelCheck
  note_font "Bitstream Vera Sans"
  xpos 1439
  ypos -652
 }
push $N67bc0800
 Dot {
  name Dot22
  xpos 1695
  ypos -4
 }
set N67bc1000 [stack 0]
 Dot {
  name Dot23
  xpos 1904
 }
set N67bc1400 [stack 0]
 Dot {
  name Dot25
  xpos 2244
 }
set N67bc1800 [stack 0]
 Dot {
  name Dot26
  xpos 2366
 }
set N67bc1c00 [stack 0]
 Dot {
  name Dot28
  xpos 2727
 }
set N67c10000 [stack 0]
 Dot {
  name Dot29
  xpos 2849
 }
set N67c10400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_specular
  fromInput2 {{0} B}
  mappings "4 lgt1_specular.red 0 0 rgba.red 0 0 lgt1_specular.green 0 1 rgba.green 0 1 lgt1_specular.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle20
  xpos 2815
  ypos 131
  disable {{1-parent.ApplySpecular}}
 }
set N67c10800 [stack 0]
 Input {
  inputs 0
  name InputMask
  xpos 4012
  ypos 362
  number 1
 }
 Dot {
  name Dot1
  xpos 4046
  ypos 456
 }
set N67c11000 [stack 0]
push $N67c10400
 Dot {
  name Dot31
  xpos 3223
 }
set N67c11400 [stack 0]
 Dot {
  name Dot32
  xpos 3345
 }
set N67c11800 [stack 0]
 Dot {
  name Dot38
  xpos 3869
  ypos -1
 }
set N67c11c00 [stack 0]
 Dot {
  name Dot39
  xpos 3991
  ypos -1
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_transmission
  fromInput2 {{0} B}
  mappings "4 lgt1_transmission.red 0 0 rgba.red 0 0 lgt1_transmission.green 0 1 rgba.green 0 1 lgt1_transmission.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle24
  xpos 3957
  ypos 131
  disable {{1-parent.ApplyTransmission}}
 }
set N67c2c400 [stack 0]
 ColorCorrect {
  inputs 1+1
  gain 0
  name ColorCorrect1
  xpos 3957
  ypos 538
 }
 set C67c2c800 [stack 0]
set N67c2c800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt1_transmission
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt1_transmission.red 0 0 rgba.green 0 1 lgt1_transmission.green 0 1 rgba.blue 0 2 lgt1_transmission.blue 0 2 black -1 -1 lgt1_transmission.alpha 0 3"
  name Shuffle9
  xpos 3957
  ypos 963
  disable {{1-parent.ApplyTransmission}}
 }
push $N67c11000
 Dot {
  name Dot2
  xpos 3917
  ypos 456
 }
set N67c2d000 [stack 0]
push $N67c11c00
add_layer {lgt0_transmission lgt0_transmission.red lgt0_transmission.green lgt0_transmission.blue lgt0_transmission.alpha}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_transmission
  fromInput2 {{0} B}
  mappings "4 lgt0_transmission.red 0 0 rgba.red 0 0 lgt0_transmission.green 0 1 rgba.green 0 1 lgt0_transmission.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle23
  xpos 3835
  ypos 132
  disable {{1-parent.ApplyTransmission}}
 }
set N67c2d400 [stack 0]
clone $C67c2c800 {
  inputs 1+1
  xpos 3835
  ypos 537
  selected false
 }
set N67c2d800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt0_transmission
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt0_transmission.red 0 0 rgba.green 0 1 lgt0_transmission.green 0 1 rgba.blue 0 2 lgt0_transmission.blue 0 2 black -1 -1 lgt0_transmission.alpha 0 3"
  name Shuffle8
  xpos 3835
  ypos 959
  disable {{1-parent.ApplyTransmission}}
 }
push $N67c2d000
 Dot {
  name Dot3
  xpos 3441
  ypos 456
 }
set N67c66000 [stack 0]
push $N67c11800
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_sss
  fromInput2 {{0} B}
  mappings "4 lgt1_sss.red 0 0 rgba.red 0 0 lgt1_sss.green 0 1 rgba.green 0 1 lgt1_sss.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle22
  xpos 3311
  ypos 132
  disable {{1-parent.ApplySSS}}
 }
set N67c66400 [stack 0]
clone $C67c2c800 {
  inputs 1+1
  xpos 3311
  ypos 537
  selected false
 }
set N67c66800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt1_sss
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt1_sss.red 0 0 rgba.green 0 1 lgt1_sss.green 0 1 rgba.blue 0 2 lgt1_sss.blue 0 2 black -1 -1 lgt1_sss.alpha 0 3"
  name Shuffle7
  xpos 3311
  ypos 961
  disable {{1-parent.ApplySSS}}
 }
push $N67c66000
 Dot {
  name Dot4
  xpos 3305
  ypos 456
 }
set N67c67000 [stack 0]
push $N67c11400
add_layer {lgt0_sss lgt0_sss.red lgt0_sss.green lgt0_sss.blue lgt0_sss.alpha}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_sss
  fromInput2 {{0} B}
  mappings "4 lgt0_sss.red 0 0 rgba.red 0 0 lgt0_sss.green 0 1 rgba.green 0 1 lgt0_sss.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle21
  xpos 3189
  ypos 132
  disable {{1-parent.ApplySSS}}
 }
set N67c67400 [stack 0]
clone $C67c2c800 {
  inputs 1+1
  xpos 3189
  ypos 530
  selected false
 }
set N67c67800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt0_sss
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt0_sss.red 0 0 rgba.green 0 1 lgt0_sss.green 0 1 rgba.blue 0 2 lgt0_sss.blue 0 2 black -1 -1 lgt0_sss.alpha 0 3"
  name Shuffle6
  xpos 3189
  ypos 957
  disable {{1-parent.ApplySSS}}
 }
push $N67c67000
 Dot {
  name Dot5
  xpos 2947
  ypos 456
 }
set N67ca4000 [stack 0]
push $N67c10800
clone $C67c2c800 {
  inputs 1+1
  xpos 2815
  ypos 525
  selected false
 }
set N67ca4400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt1_specular
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt1_specular.red 0 0 rgba.green 0 1 lgt1_specular.green 0 1 rgba.blue 0 2 lgt1_specular.blue 0 2 black -1 -1 lgt1_specular.alpha 0 3"
  name Shuffle5
  xpos 2815
  ypos 961
 }
push $N67ca4000
 Dot {
  name Dot6
  xpos 2783
  ypos 456
 }
set N67ca4c00 [stack 0]
push $N67c10000
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_specular
  fromInput2 {{0} B}
  mappings "4 lgt0_specular.red 0 0 rgba.red 0 0 lgt0_specular.green 0 1 rgba.green 0 1 lgt0_specular.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle19
  xpos 2693
  ypos 131
  disable {{1-parent.ApplySpecular}}
 }
set N67ca5000 [stack 0]
clone $C67c2c800 {
  inputs 1+1
  xpos 2693
  ypos 524
  selected false
 }
set N67ca5400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt0_specular
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt0_specular.red 0 0 rgba.green 0 1 lgt0_specular.green 0 1 rgba.blue 0 2 lgt0_specular.blue 0 2 black -1 -1 lgt0_specular.alpha 0 3"
  name Shuffle4
  xpos 2693
  ypos 957
 }
push $N67ca4c00
 Dot {
  name Dot7
  xpos 2435
  ypos 452
 }
set N67ca5c00 [stack 0]
push $N67bc1c00
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt1_diffuse.red 0 0 rgba.red 0 0 lgt1_diffuse.green 0 1 rgba.green 0 1 lgt1_diffuse.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle18
  xpos 2332
  ypos 132
  disable {{1-parent.ApplyDiffuse}}
 }
set N67ce8000 [stack 0]
clone $C67c2c800 {
  inputs 1+1
  xpos 2332
  ypos 523
  selected false
 }
set N67ce8400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt1_diffuse
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt1_diffuse.red 0 0 rgba.green 0 1 lgt1_diffuse.green 0 1 rgba.blue 0 2 lgt1_diffuse.blue 0 2 black -1 -1 lgt1_diffuse.alpha 0 3"
  name Shuffle3
  xpos 2332
  ypos 980
 }
push $N67ca5c00
 Dot {
  name Dot8
  xpos 2331
  ypos 452
 }
set N67ce8c00 [stack 0]
push $N67bc1800
add_layer {lgt0_diffuse lgt0_diffuse.red lgt0_diffuse.green lgt0_diffuse.blue lgt0_diffuse.alpha}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt0_diffuse.red 0 0 rgba.red 0 0 lgt0_diffuse.green 0 1 rgba.green 0 1 lgt0_diffuse.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle14
  xpos 2210
  ypos 132
  disable {{1-parent.ApplyDiffuse}}
 }
set N67ce9000 [stack 0]
clone $C67c2c800 {
  inputs 1+1
  xpos 2210
  ypos 525
  selected false
 }
set N67ce9400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt0_diffuse
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt0_diffuse.red 0 0 rgba.green 0 1 lgt0_diffuse.green 0 1 rgba.blue 0 2 lgt0_diffuse.blue 0 2 black -1 -1 lgt0_diffuse.alpha 0 3"
  name Shuffle2
  xpos 2210
  ypos 976
 }
push $N67ce8c00
 Dot {
  name Dot9
  xpos 2000
  ypos 452
 }
push $N67bc1400
add_layer {emission emission.red emission.green emission.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  in1 emission
  fromInput2 {{0} B}
  mappings "4 emission.red 0 0 rgba.red 0 0 emission.green 0 1 rgba.green 0 1 emission.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle13
  xpos 1870
  ypos 187
  disable {{1-parent.emission}}
 }
set N67d24000 [stack 0]
clone $C67c2c800 {
  inputs 1+1
  xpos 1870
  ypos 520
  selected false
 }
set N67d24400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  out1 emission
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 emission.red 0 0 rgba.green 0 1 emission.green 0 1 rgba.blue 0 2 emission.blue 0 2"
  name Shuffle1
  xpos 1870
  ypos 982
  disable {{1-parent.emission}}
 }
push $N67c2d800
push $N67c2c800
 Merge2 {
  inputs 2
  operation plus
  name Merge18
  xpos 3894
  ypos 628
  disable {{1-parent.ApplyTransmission}}
 }
push $N67c67800
push $N67c66800
 Merge2 {
  inputs 2
  operation plus
  name Merge17
  xpos 3242
  ypos 625
  disable {{1-parent.ApplySSS}}
 }
push $N67ca5400
push $N67ca4400
 Merge2 {
  inputs 2
  operation plus
  name Merge16
  xpos 2754
  ypos 607
  disable {{1-parent.ApplySpecular}}
 }
push $N67ce9400
push $N67ce8400
 Merge2 {
  inputs 2
  operation plus
  name Merge15
  xpos 2262
  ypos 609
 }
push $N67d24400
push $N67c2d400
push $N67c2c400
 Merge2 {
  inputs 2
  operation plus
  name Merge3
  xpos 3888
  ypos 184
  disable {{1-parent.ApplyTransmission}}
 }
push $N67c67400
push $N67c66400
 Merge2 {
  inputs 2
  operation plus
  name Merge2
  xpos 3257
  ypos 185
  disable {{1-parent.ApplySSS}}
 }
push $N67ca5000
push $N67c10800
 Merge2 {
  inputs 2
  operation plus
  name Merge11
  xpos 2747
  ypos 196
  disable {{1-parent.ApplySpecular}}
 }
push $N67ce9000
push $N67ce8000
 Merge2 {
  inputs 2
  operation plus
  name Merge12
  xpos 2279
  ypos 207
  disable {{1-parent.ApplyDiffuse}}
 }
push $N67d24000
push $N67bc1000
 Merge2 {
  inputs 2
  operation difference
  name Merge9
  xpos 1661
  ypos 198
  disable {{1-parent.emission}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge10
  xpos 1661
  ypos 260
  disable {{1-parent.ApplyDiffuse}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge13
  xpos 1661
  ypos 319
  disable {{1-parent.ApplySpecular}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge1
  xpos 1661
  ypos 375
  disable {{1-parent.ApplySSS}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge4
  xpos 1661
  ypos 434
  disable {{1-parent.ApplyTransmission}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge5
  xpos 1661
  ypos 629
  disable {{1-parent.emission}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge6
  xpos 1661
  ypos 690
  disable {{1-parent.ApplyDiffuse}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge7
  xpos 1661
  ypos 752
  disable {{1-parent.ApplySpecular}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge8
  xpos 1661
  ypos 806
  disable {{1-parent.ApplySSS}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge14
  xpos 1661
  ypos 864
  disable {{1-parent.ApplyTransmission}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels emission
  name Copy1
  xpos 1661
  ypos 1088
  disable {{1-parent.emission}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_diffuse
  name Copy2
  xpos 1661
  ypos 1184
  disable {{1-parent.ApplyDiffuse}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_diffuse
  name Copy3
  xpos 1661
  ypos 1254
  disable {{1-parent.ApplyDiffuse}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_specular
  name Copy4
  xpos 1661
  ypos 1330
  disable {{1-parent.ApplySpecular}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_specular
  name Copy5
  xpos 1661
  ypos 1414
  disable {{1-parent.ApplySpecular}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_sss
  name Copy6
  xpos 1661
  ypos 1507
  disable {{1-parent.ApplySSS}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_sss
  name Copy7
  xpos 1661
  ypos 1587
  disable {{1-parent.ApplySSS}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_transmission
  name Copy8
  xpos 1661
  ypos 1676
  disable {{1-parent.ApplyTransmission}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_transmission
  name Copy9
  xpos 1661
  ypos 1763
  disable {{1-parent.ApplyTransmission}}
 }
 Output {
  name Output1
  xpos 1661
  ypos 2015
 }
 Viewer {
  inputs 2
  frame_range 1025-1225
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos 1661
  ypos 2252
 }
end_group
push $cut_paste_input
Group {
 name GNOMON_Spec_ADD_
 tile_color 0x3647ff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7e00ff
 selected true
 xpos 10509
 ypos 2341
 addUserKnob {20 User}
 addUserKnob {6 hasAOVbundle +STARTLINE}
 hasAOVbundle {{"\[exists input0]"}}
 addUserKnob {6 hasBreakup +STARTLINE}
 hasBreakup {{"\[exists input1]"}}
 addUserKnob {26 ""}
 addUserKnob {4 addTo l "Add to " M {lgt0 lgt1}}
 addTo lgt1
}
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x8e388e00
  label specular
  note_font_size 42
  xpos -483
  ypos -236
  bdwidth 346
  bdheight 306
 }
 Input {
  inputs 0
  name InputBreakup_A
  xpos -1039
  ypos -72
  number 1
 }
 Dot {
  name Dot2
  xpos -1005
  ypos 235
 }
 Dot {
  name Dot3
  xpos -369
  ypos 235
 }
set N67e6ac00 [stack 0]
push 0
 Switch {
  inputs 2
  which {{addTo}}
  name Switch4
  xpos -283
  ypos 232
 }
 Input {
  inputs 0
  name InputAOVbundle
  xpos -1652
  ypos -450
 }
set N67e6b000 [stack 0]
 Dot {
  name Dot1
  xpos -705
  ypos -156
 }
set N67e6b400 [stack 0]
 Dot {
  name Dot25
  xpos -315
  ypos -156
 }
set N67e6b800 [stack 0]
 Dot {
  name Dot26
  xpos -193
  ypos -156
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_specular
  fromInput2 {{0} B}
  mappings "4 lgt1_specular.red 0 0 rgba.red 0 0 lgt1_specular.green 0 1 rgba.green 0 1 lgt1_specular.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle20
  xpos -227
  ypos -116
 }
 Dot {
  name Dot5
  xpos -193
  ypos 28
 }
set N67eb2400 [stack 0]
 Merge2 {
  inputs 2
  operation plus
  name Merge1
  xpos -227
  ypos 307
 }
 Dot {
  name Dot8
  xpos -191
  ypos 450
 }
set N67eb2c00 [stack 0]
 Dot {
  name Dot9
  xpos -191
  ypos 952
 }
push $N67e6ac00
 Switch {
  which {{addTo}}
  name Switch3
  xpos -403
  ypos 289
 }
push $N67e6b800
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_specular
  fromInput2 {{0} B}
  mappings "4 lgt0_specular.red 0 0 rgba.red 0 0 lgt0_specular.green 0 1 rgba.green 0 1 lgt0_specular.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle19
  xpos -349
  ypos -117
 }
 Dot {
  name Dot4
  xpos -315
  ypos -22
 }
set N67eb3800 [stack 0]
 Merge2 {
  inputs 2
  operation plus
  name Merge4
  xpos -347
  ypos 331
 }
 Dot {
  name Dot7
  xpos -313
  ypos 413
 }
set N67ee0000 [stack 0]
 Dot {
  name Dot10
  xpos -313
  ypos 902
 }
push $N67eb2c00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt1_specular
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt1_specular.red 0 0 rgba.green 0 1 lgt1_specular.green 0 1 rgba.blue 0 2 lgt1_specular.blue 0 2 black -1 -1 lgt1_specular.alpha 0 3"
  name Shuffle1
  xpos -499
  ypos 680
 }
push $N67ee0000
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgt0_specular
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgt0_specular.red 0 0 rgba.green 0 1 lgt0_specular.green 0 1 rgba.blue 0 2 lgt0_specular.blue 0 2 black -1 -1 lgt0_specular.alpha 0 3"
  name Shuffle2
  xpos -497
  ypos 551
 }
push $N67eb2400
push $N67eb3800
push $N67e6b400
 Merge2 {
  inputs 2
  operation difference
  name Merge2
  xpos -737
  ypos -25
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge3
  xpos -737
  ypos 25
 }
 Dot {
  name Dot6
  xpos -703
  ypos 491
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_specular
  name Copy1
  xpos -737
  ypos 545
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_specular
  name Copy2
  xpos -737
  ypos 668
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge8
  xpos -737
  ypos 899
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge9
  xpos -737
  ypos 949
 }
push $N67e6b400
 Dot {
  name Dot11
  xpos -818
  ypos -156
 }
 NoOp {
  name NoOp1
  xpos -852
  ypos 1035
 }
 Switch {
  inputs 2
  which {{parent.hasBreakup}}
  name Switch1
  xpos -737
  ypos 1130
 }
push $N67e6b000
 Switch {
  inputs 2
  which {{parent.hasAOVbundle}}
  name Switch2
  xpos -1652
  ypos 1262
 }
 Output {
  name Output1
  xpos -1652
  ypos 1448
 }
set N67f13400 [stack 0]
push $N67f13400
 Viewer {
  inputs 2
  frame_range 1025-1225
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos -737
  ypos 1586
 }
end_group
push $cut_paste_input
add_layer {N N.X N.Y N.Z N.red N.green N.blue}
add_layer {uvs uvs.red uvs.green}
Group {
 name GNOMON_CGselector_
 tile_color 0x273f7aff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10511
 ypos 1675
 addUserKnob {20 MaskType l "Mask Type"}
 addUserKnob {22 docCGsel l Documentation T "import webbrowser\n\ndef openWebpage():\n  webbrowser.open(\"http://nachothomas.com/allNukeToolsDocs.html\")\n\nopenWebpage()" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {6 overlayOutputMask l "Overlay Output Mask" +STARTLINE}
 overlayOutputMask true
 addUserKnob {26 ""}
 addUserKnob {26 auxText l "" +STARTLINE T "Mask Type (Intersection of selected)"}
 addUserKnob {6 allInactive +INVISIBLE +STARTLINE}
 allInactive {{"positionMask == 0 &&normalsMask == 0 && udimMask == 0 && objectIDmask == 0 && curvatureMask == 0 && facingMask == 0 && pDepthMask == 0 ? 1 : 0"}}
 addUserKnob {6 positionMask l "Position Mask" +STARTLINE}
 addUserKnob {6 positionMaskInvert l Invert -STARTLINE}
 addUserKnob {6 normalsMask l "Normals Mask " +STARTLINE}
 addUserKnob {6 normalsMaskInvert l Invert -STARTLINE}
 addUserKnob {6 udimMask l "Udim Mask      " +STARTLINE}
 addUserKnob {6 udimMaskInvert l Invert -STARTLINE}
 addUserKnob {6 objectIDmask l "ObjectID Mask" +STARTLINE}
 addUserKnob {6 objectIDmaskInvert l Invert -STARTLINE}
 addUserKnob {6 curvatureMask l "Curvature Mask" +STARTLINE}
 addUserKnob {6 curvatureMaskInvert l Invert -STARTLINE}
 addUserKnob {26 camDep l Extras T "(require camera)  "}
 addUserKnob {6 camInput l "Camera Found" t "tn = nuke.thisNode()\ntg = nuke.thisGroup()\nmaxIt = 20\ncamInput = 1\nactiveSwitch = 0\n\nif tg.input(int(camInput)):\n    toI = tg.input(int(camInput))\n    if toI.Class() in \{\"Camera\" , \"Camera2\"\}:\n        sv = toI.knob(\"world_matrix\")\n        sv = toI.knob(\"world_matrix\").getValue(3)\n        ret = sv \n    else:\n        for i in range(maxIt):\n            if tg.input(int(activeSwitch)):\n                if  i == 0:\n                    toI = tg.input(int(camInput))\n                if  i != 0:\n                    toI = tg.input(int(activeSwitch))                  \n                if toI.Class() == \"Switch\":\n                    activeSwitch = toI.knob(\"which\").getValue()\n                if toI.Class() in \{\"Camera\" , \"Camera2\"\}:\n                    sv = toI.knob(\"world_matrix\").getValue(3)\n                    ret = sv   \n                else:\n                    tg = toI\n            else:\n                ret = 0\nelse:\n    ret = 0" -STARTLINE}
 camInput {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\n\\nif\\ tg.input(int(camInput)):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\"\\ ,\\ \\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 1\\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue()\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ in\\ \\\{\\\"Camera\\\"\\ ,\\ \\\"Camera2\\\",\\ \\ \\\"Camera3\\\"\\\}:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 1\\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
 addUserKnob {6 facingMask l "Facing Mask" +STARTLINE}
 addUserKnob {6 facingMaskInvert l Invert -STARTLINE}
 addUserKnob {6 pDepthMask l "pDepth Mask" +STARTLINE}
 addUserKnob {6 pDepthMaskInvert l Invert -STARTLINE}
 addUserKnob {20 MaskControls l "Mask Controls"}
 addUserKnob {20 positionMaskGroup l "Position Mask Controls" n 1}
 positionMaskGroup 0
 addUserKnob {6 showPositionAOV l "Show Position AOV" +STARTLINE}
 addUserKnob {18 positionPicker l "Position Picker"}
 positionPicker {661.2949219 2754.532227 -9744.349609}
 addUserKnob {6 positionPicker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {41 rotate l Rotate T AxisPositionWorldAxis.rotate}
 addUserKnob {7 positionUniformScaleMultiplier l "Position Uniform Scale Multiplier" R 0.01 100}
 positionUniformScaleMultiplier 7
 addUserKnob {41 uniform_scale l "uniform scale" +INVISIBLE T AxisPositionWorldAxis.uniform_scale}
 addUserKnob {41 scaling l scale +INVISIBLE T AxisPositionWorldAxis.scaling}
 addUserKnob {13 positionScalingMultiplier l "Position Scaling Multiplier"}
 positionScalingMultiplier {1 1 1}
 addUserKnob {26 ""}
 addUserKnob {4 positionMaskType l "Position Mask Type" M {sphere cube axis ""}}
 addUserKnob {20 sphereControls l "Sphere Controls" n 1}
 sphereControls 0
 addUserKnob {7 positionSphereRadius l Radius R 0.01 1000}
 positionSphereRadius 592
 addUserKnob {7 positionSphereFalloff l Falloff R 0.1 100}
 positionSphereFalloff 82.4
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {20 cubeControls l "Cube Controls" n 1}
 cubeControls 0
 addUserKnob {13 cubeSize l Size}
 cubeSize {2100 1600 1800}
 addUserKnob {13 cubeFalloff l Falloff}
 cubeFalloff {1 0 330}
 addUserKnob {20 endGroup_2 l endGroup n -1}
 addUserKnob {20 positionAxisControls l "Axis Controls" n 1}
 positionAxisControls 0
 addUserKnob {4 positionAxisSelection l Axis M {+x -x +y -y +z -z ""}}
 positionAxisSelection -y
 addUserKnob {7 axisFalloff l Falloff R 0 10}
 axisFalloff 1
 addUserKnob {20 endGroup_3 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 endGroup n -1}
 addUserKnob {20 normalsMaskGroup l "Normals Mask Controls" n 1}
 normalsMaskGroup 0
 addUserKnob {6 showNormalsAOV l "Show Normals AOV" +STARTLINE}
 addUserKnob {18 normalPicker l "Normal Picker"}
 normalPicker {-1 0 0}
 addUserKnob {6 normalPicker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 angleThreshold l Threshold}
 angleThreshold 0.465
 addUserKnob {13 normalsRotation l "Normals Rotation"}
 addUserKnob {20 endGroup_4 l endGroup n -1}
 addUserKnob {20 pDepthControls l "pDepth Controls" n 1}
 pDepthControls 0
 addUserKnob {41 blackpoint l nearest T Grade2.blackpoint}
 addUserKnob {41 whitepoint l farthest T Grade2.whitepoint}
 addUserKnob {20 endGroup_5 l endGroup n -1}
 addUserKnob {20 facingRatioControls l "Facing Ratio Controls" n 1}
 facingRatioControls 0
 addUserKnob {6 useFilter l "Use Filter" +STARTLINE}
 addUserKnob {41 gamma l Gamma T GradeFacingRatio.gamma}
 addUserKnob {20 endGroup_6 l endGroup n -1}
 addUserKnob {20 UDIMControls l "UDIM Controls" n 1}
 UDIMControls 0
 addUserKnob {6 showUDIMsAOV l "Show UDIMs AOV" +STARTLINE}
 addUserKnob {18 UDIMPicker l "UDIM Picker"}
 UDIMPicker {6.051369667 7.296519279 7.296519279}
 addUserKnob {6 UDIMPicker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {3 resultingUDIM l "Resulting UDIM"}
 resultingUDIM {{1001+truncUDIMPicker.r+(10*truncUDIMPicker.g)}}
 addUserKnob {6 truncUDIMPicker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN +INVISIBLE}
 addUserKnob {20 endGroup_7 l endGroup n -1}
 addUserKnob {20 objectIDcontrols l "Object ID Controls" n 1}
 objectIDcontrols 0
 addUserKnob {6 showObjectIdAOV l "Show ObjectID AOV" +STARTLINE}
 addUserKnob {18 objectIDpicker l "ObjectID Picker"}
 objectIDpicker {0 0 0}
 addUserKnob {6 objectIDpicker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 objectIDthreshold l Threshold}
 addUserKnob {20 endGroup_8 l endGroup n -1}
 addUserKnob {20 curvatureControls l "Curvature Controls" n 1}
 curvatureControls 0
 addUserKnob {7 curvSearchDistance l " Search Distance" R 0.5 5}
 curvSearchDistance 1.92
 addUserKnob {7 curvThreshold l Threshold}
 curvThreshold 0.295
 addUserKnob {41 gamma_1 l Gamma T GradeCurvRes.gamma}
 addUserKnob {20 endGroup_9 l endGroup n -1}
 addUserKnob {20 AOVs}
 addUserKnob {41 in l position T ShuffleP.in}
 addUserKnob {6 unpremultP l unpremult -STARTLINE}
 addUserKnob {41 in_1 l normals T ShuffleN.in}
 addUserKnob {6 unpremultN l unpremult -STARTLINE}
 addUserKnob {41 in_2 l UVs T ShuffleUVs.in}
 addUserKnob {6 unpremultUVs l unpremult -STARTLINE}
 addUserKnob {41 in_3 l objectID T ShuffleObjectID.in}
 addUserKnob {6 unpremultObjectID l unpremult -STARTLINE}
 addUserKnob {18 truncUDIMPicker +INVISIBLE}
 truncUDIMPicker {{trunc(UDIMPicker.r)} {trunc(UDIMPicker.g)} 0}
 addUserKnob {6 truncUDIMPicker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {20 InfoTab l Info}
 addUserKnob {26 InfoText l "" +STARTLINE T "Gnomon Workshop Example by  <font color=\"green\"><b>Nacho Thomas</b></font><br />\nA tool with multiple mask options based in CG passes <br />\nThey work as an intersection boolean.<br />\nThe mask is overlayed in red over the beauty.\n\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x7171c600
  label position
  note_font_size 42
  xpos 402
  ypos 155
  bdwidth 1123
  bdheight 543
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x8e8e3800
  label normals
  note_font_size 42
  xpos 1899
  ypos 144
  bdwidth 336
  bdheight 556
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x71c67100
  label curvature
  note_font_size 42
  xpos 6185
  ypos -73
  bdwidth 370
  bdheight 1443
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0x388e8e00
  label "objectID\n"
  note_font_size 42
  xpos 5006
  ypos -73
  bdwidth 561
  bdheight 1427
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x8e388e00
  label udim
  note_font_size 42
  xpos 3932
  ypos -73
  bdwidth 437
  bdheight 1436
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x388e8e00
  label facing
  note_font_size 42
  xpos 3071
  ypos -73
  bdwidth 287
  bdheight 1437
 }
 Input {
  inputs 0
  name InputCamera
  label "\[value number]"
  xpos 2687
  ypos -158
  number 1
 }
 Dot {
  inputs 0
  name Dot31
  xpos 5016
  ypos 965
 }
 Axis2 {
  inputs 0
  rotate {{parent.normalsRotation.x} {parent.normalsRotation.y} {parent.normalsRotation.z}}
  name AxisNormalRotations
  xpos 2132
  ypos 272
 }
 Axis2 {
  inputs 0
  xform_order RTS
  scaling {{1/parent.positionScalingMultiplier.x} {1/parent.positionScalingMultiplier.y} {1/parent.positionScalingMultiplier.z}}
  uniform_scale {{1/parent.positionUniformScaleMultiplier}}
  name AxisPositionWorldAxis
  xpos 676
  ypos 347
 }
 NoOp {
  inputs 0
  name evalCam
  xpos 2761
  ypos 98
  addUserKnob {20 User}
  addUserKnob {13 camPos}
  camPos {{"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\n\\nif\\ tg.input(int(camInput)):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Camera\\\"\\ or\\ \\\"Camera2\\\"\\ or\\ \\ \\\"Camera3\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(\\\"world_matrix\\\").getValue(3)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue()\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Camera\\\"\\ or\\ \\\"Camera2\\\"\\ or\\ \\ \\\"Camera3\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(\\\"world_matrix\\\").getValue(3)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\n\\nif\\ tg.input(int(camInput)):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Camera\\\"\\ or\\ \\\"Camera2\\\"\\ or\\ \\ \\\"Camera3\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(\\\"world_matrix\\\").getValue(7)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue()\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Camera\\\"\\ or\\ \\\"Camera2\\\"\\ or\\ \\ \\\"Camera3\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(\\\"world_matrix\\\").getValue(7)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"} {"\[python -execlocal tn\\ =\\ nuke.thisNode()\\ntg\\ =\\ nuke.thisGroup()\\nmaxIt\\ =\\ 20\\ncamInput\\ =\\ 1\\nactiveSwitch\\ =\\ 0\\n\\nif\\ tg.input(int(camInput)):\\n\\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Camera\\\"\\ or\\ \\\"Camera2\\\"\\ or\\ \\ \\\"Camera3\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(\\\"world_matrix\\\").getValue(11)\\n\\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\n\\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ for\\ i\\ in\\ range(maxIt):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ tg.input(int(activeSwitch)):\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ ==\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(camInput))\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ \\ i\\ !=\\ 0:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ toI\\ =\\ tg.input(int(activeSwitch))\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Switch\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ activeSwitch\\ =\\ toI.knob(\\\"which\\\").getValue()\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ if\\ toI.Class()\\ ==\\ \\\"Camera\\\"\\ or\\ \\\"Camera2\\\"\\ or\\ \\ \\\"Camera3\\\":\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ sv\\ =\\ toI.knob(\\\"world_matrix\\\").getValue(11)\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ sv\\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ tg\\ =\\ toI\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ else:\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ret\\ =\\ 0\\nelse:\\n\\ \\ \\ \\ ret\\ =\\ 0]"}}
 }
 Input {
  inputs 0
  name InputAOVbundle
  label "\[value number]"
  xpos 18
  ypos -119
 }
 Dot {
  name Dot1
  xpos 52
  ypos 7
 }
set N67fc3800 [stack 0]
 Dot {
  name Dot2
  xpos 515
  ypos 7
 }
set N67fc3c00 [stack 0]
 Dot {
  name Dot3
  xpos 1943
  ypos 7
 }
set N67ff0000 [stack 0]
 Dot {
  name Dot20
  xpos 2557
  ypos 7
 }
set N67ff0400 [stack 0]
 Shuffle {
  in P
  in2 alpha
  alpha red2
  name ShuffleP
  label "\[value in]"
  xpos 2523
  ypos 150
 }
 set C67ff0800 [stack 0]
 Expression {
  expr0 r-parent.evalCam.camPos.x
  expr1 g-parent.evalCam.camPos.y
  expr2 b-parent.evalCam.camPos.x
  name ExpressioncamTo0
  xpos 2523
  ypos 244
 }
 Expression {
  temp_name0 dist
  temp_expr0 sqrt(r*r+g*g+b*b)
  expr0 dist
  expr1 dist
  expr2 dist
  expr3 dist
  name Expression11
  xpos 2523
  ypos 302
 }
 Dot {
  name Dot45
  xpos 2556
  ypos 563
 }
set N67ff1400 [stack 0]
 Grade {
  channels rgba
  blackpoint 41700
  whitepoint 718000
  name Grade2
  xpos 2523
  ypos 662
 }
set N67ff1800 [stack 0]
push $N67ff0400
 Dot {
  name Dot22
  xpos 3115
  ypos 7
 }
set N67ff1c00 [stack 0]
 Dot {
  name Dot23
  xpos 3302
  ypos 7
 }
set N68024000 [stack 0]
 Dot {
  name Dot24
  xpos 3942
  ypos 7
 }
 Dot {
  name Dot4
  xpos 4313
  ypos 7
 }
set N68024800 [stack 0]
 Dot {
  name Dot5
  xpos 5401
  ypos 7
 }
set N68024c00 [stack 0]
 Shuffle {
  in none
  name ShuffleObjectID
  label "\[value in]"
  xpos 5367
  ypos 65
 }
set N68025000 [stack 0]
 Dot {
  name Dot29
  xpos 5097
  ypos 272
 }
 Dot {
  name Dot30
  xpos 4537
  ypos 1839
 }
push $N68024800
 Shuffle {
  in uvs
  name ShuffleUVs
  label "\[value in]"
  xpos 4279
  ypos 63
 }
set N68025c00 [stack 0]
 Dot {
  name Dot27
  xpos 4058
  ypos 295
 }
 Dot {
  name Dot28
  xpos 3520
  ypos 1749
 }
push $N67ff0000
 Shuffle {
  in N
  in2 alpha
  alpha red2
  name ShuffleN
  label "\[value in]"
  xpos 1909
  ypos 223
 }
 set C68044800 [stack 0]
 Unpremult {
  name UnpremultN
  xpos 1909
  ypos 293
  disable {{1-parent.unpremultN}}
 }
 ColorMatrix {
  matrix {
      {{parent.AxisNormalRotations.world_matrix.0} {parent.AxisNormalRotations.world_matrix.1} {parent.AxisNormalRotations.world_matrix.2}}
      {{parent.AxisNormalRotations.world_matrix.4} {parent.AxisNormalRotations.world_matrix.5} {parent.AxisNormalRotations.world_matrix.6}}
      {{parent.AxisNormalRotations.world_matrix.8} {parent.AxisNormalRotations.world_matrix.9} {parent.AxisNormalRotations.world_matrix.10}}
    }
  name ColorMatrix2
  xpos 1909
  ypos 374
 }
 Dot {
  name Dot18
  xpos 1943
  ypos 433
 }
set N68045400 [stack 0]
 Dot {
  name Dot17
  xpos 1943
  ypos 1670
 }
push $N67fc3c00
clone $C67ff0800 {
  xpos 481
  ypos 235
  selected false
 }
set N68045c00 [stack 0]
 Dot {
  name Dot9
  xpos 412
  ypos 287
 }
 Dot {
  name Dot61
  xpos 412
  ypos 1623
 }
push $N67fc3800
 Dot {
  name Dot6
  xpos 52
  ypos 198
 }
 Dot {
  name Dot7
  xpos 300
  ypos 198
 }
 Dot {
  name Dot36
  xpos 300
  ypos 846
 }
set N68073000 [stack 0]
 Dot {
  name Dot8
  xpos 300
  ypos 987
 }
set N68073400 [stack 0]
push $N68073000
 Dot {
  name Dot39
  xpos 443
  ypos 846
 }
set N68073800 [stack 0]
 Dot {
  name Dot37
  xpos 525
  ypos 846
 }
set N68073c00 [stack 0]
 Dot {
  name Dot41
  xpos 1961
  ypos 827
 }
set N6808a000 [stack 0]
 Dot {
  name Dot46
  xpos 2384
  ypos 827
 }
set N6808a400 [stack 0]
 Dot {
  name Dot48
  xpos 3175
  ypos 827
 }
set N6808a800 [stack 0]
 Dot {
  name Dot51
  xpos 4186
  ypos 827
 }
set N6808ac00 [stack 0]
 Dot {
  name Dot54
  xpos 5247
  ypos 827
 }
set N6808b000 [stack 0]
 Dot {
  name Dot57
  xpos 6255
  ypos 827
 }
push $N68024c00
 Dot {
  name Dot33
  xpos 6389
  ypos 7
 }
clone $C68044800 {
  xpos 6355
  ypos 94
  selected false
 }
set N6808bc00 [stack 0]
 Expression {
  expr0 a==0?0:abs(b)
  expr1 0
  expr2 0
  name Expression24
  xpos 6465
  ypos 170
 }
 Expression {
  temp_name0 sd
  temp_expr0 parent.curvSearchDistance
  temp_name1 sArea
  temp_expr1 "max(r(x+sd,y+sd), r(x+sd,y-sd), r(x-sd,y+sd), r(x-sd,y-sd))"
  expr0 a==0?0:sArea
  expr1 r
  name Expression25
  xpos 6465
  ypos 211
 }
 Expression {
  temp_name0 res
  temp_expr0 abs(g-r)
  temp_name1 resT
  temp_expr1 parent.curvThreshold*res
  expr0 a==0?0:resT
  expr1 0
  expr2 0
  name Expression26
  xpos 6465
  ypos 245
 }
push 0
push $N6808bc00
 Expression {
  expr0 a==0?0:abs(r)
  expr1 0
  expr2 0
  name Expression18
  xpos 6222
  ypos 163
 }
 Expression {
  temp_name0 sd
  temp_expr0 parent.curvSearchDistance
  temp_name1 sArea
  temp_expr1 "max(r(x+sd,y+sd), r(x+sd,y-sd), r(x-sd,y+sd), r(x-sd,y-sd))"
  expr0 a==0?0:sArea
  expr1 r
  name Expression19
  xpos 6222
  ypos 205
 }
 Expression {
  temp_name0 res
  temp_expr0 abs(g-r)
  temp_name1 resT
  temp_expr1 parent.curvThreshold*res
  expr0 a==0?0:resT
  expr1 0
  expr2 0
  name Expression20
  xpos 6222
  ypos 239
 }
push $N6808bc00
 Expression {
  expr0 a==0?0:abs(g)
  expr1 0
  expr2 0
  name Expression21
  xpos 6352
  ypos 172
 }
 Expression {
  temp_name0 sd
  temp_expr0 parent.curvSearchDistance
  temp_name1 sArea
  temp_expr1 "max(r(x+sd,y+sd), r(x+sd,y-sd), r(x-sd,y+sd), r(x-sd,y-sd))"
  expr0 a==0?0:sArea
  expr1 r
  name Expression22
  xpos 6352
  ypos 213
 }
 Expression {
  temp_name0 res
  temp_expr0 abs(g-r)
  temp_name1 resT
  temp_expr1 parent.curvThreshold*res
  expr0 a==0?0:resT
  expr1 0
  expr2 0
  name Expression23
  xpos 6352
  ypos 247
 }
 Merge2 {
  inputs 3+1
  operation max
  name Merge2
  xpos 6348
  ypos 303
 }
 Grade {
  gamma 0.465
  name GradeCurvRes
  xpos 6348
  ypos 344
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.red 0 0 rgba.alpha 0 3 rgba.red 0 0 rgba.blue 0 2 rgba.red 0 0 rgba.green 0 1"
  name Shuffle1
  xpos 6348
  ypos 368
 }
 Dot {
  name Dot58
  xpos 6382
  ypos 747
 }
set N680f5000 [stack 0]
 Expression {
  expr3 1-a
  name Expression33
  xpos 6259
  ypos 744
 }
 Merge2 {
  inputs 2
  operation mask
  name Merge10
  xpos 6259
  ypos 888
 }
push $N680f5000
 Switch {
  inputs 2
  which {{parent.curvatureMaskInvert}}
  name Switch19
  xpos 6348
  ypos 919
 }
push $N68073800
 Dot {
  name Dot38
  xpos 471
  ypos 889
 }
 Expression {
  expr0 1
  expr1 1
  expr2 1
  expr3 1
  name Expression28
  xpos 437
  ypos 1022
 }
set N6813a000 [stack 0]
 Dot {
  name Dot47
  xpos 2034
  ypos 1025
 }
set N6813a400 [stack 0]
 Dot {
  name Dot43
  xpos 2466
  ypos 1025
 }
set N6813a800 [stack 0]
 Dot {
  name Dot50
  xpos 3211
  ypos 1025
 }
set N6813ac00 [stack 0]
 Dot {
  name Dot53
  xpos 4222
  ypos 1025
 }
set N6813b000 [stack 0]
 Dot {
  name Dot56
  xpos 5283
  ypos 1025
 }
set N6813b400 [stack 0]
 Dot {
  name Dot59
  xpos 6291
  ypos 1060
 }
 Switch {
  inputs 2
  which {{parent.curvatureMask}}
  name Switch20
  xpos 6348
  ypos 1117
 }
push $N68073400
 Dot {
  name Dot16
  xpos 553
  ypos 987
 }
set N6813bc00 [stack 0]
 Dot {
  name Dot19
  xpos 1876
  ypos 987
 }
set N6815e000 [stack 0]
 Dot {
  name Dot21
  xpos 2351
  ypos 987
 }
set N6815e400 [stack 0]
 Dot {
  name Dot25
  xpos 3096
  ypos 987
 }
set N6815e800 [stack 0]
 Dot {
  name Dot26
  xpos 4107
  ypos 987
 }
set N6815ec00 [stack 0]
 Dot {
  name Dot32
  xpos 5168
  ypos 987
 }
set N6815f000 [stack 0]
 Dot {
  name Dot34
  xpos 6195
  ypos 987
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy7
  xpos 6348
  ypos 1255
 }
 NoOp {
  name NoOp7
  label "curv\nOutput\n\n"
  xpos 6348
  ypos 1318
 }
push $N6808b000
push $N68025000
 Unpremult {
  name UnpremultObjectID
  xpos 5367
  ypos 126
  disable {{1-parent.unpremultObjectID}}
 }
set N6817e000 [stack 0]
 Expression {
  temp_name0 bMin
  temp_expr0 objectIDpicker.b-objectIDthreshold
  temp_name1 bMax
  temp_expr1 objectIDpicker.b+objectIDthreshold
  expr0 "b>=bMin && b<=bMax ? 1 :0"
  expr1 "b>=bMin && b<=bMax ? 1 :0"
  expr2 "b>=bMin && b<=bMax ? 1 :0"
  expr3 "b>=bMin && b<=bMax ? 1 :0"
  name Expression17
  xpos 5477
  ypos 237
 }
push 0
push $N6817e000
 Expression {
  temp_name0 rMin
  temp_expr0 objectIDpicker.r-objectIDthreshold
  temp_name1 rMax
  temp_expr1 objectIDpicker.r+objectIDthreshold
  expr0 "r>=rMin && r<=rMax ? 1 :0"
  expr1 "r>=rMin && r<=rMax ? 1 :0"
  expr2 "r>=rMin && r<=rMax ? 1 :0"
  expr3 "r>=rMin && r<=rMax ? 1 :0"
  name Expression15
  xpos 5261
  ypos 233
 }
push $N6817e000
 Expression {
  temp_name0 gMin
  temp_expr0 objectIDpicker.g-objectIDthreshold
  temp_name1 gMax
  temp_expr1 objectIDpicker.g+objectIDthreshold
  expr0 "g>=gMin && g<=gMax ? 1 :00"
  expr1 "g>=gMin && g<=gMax ? 1 :0"
  expr2 "g>=gMin && g<=gMax ? 1 :0"
  expr3 "g>=gMin && g<=gMax ? 1 :0"
  name Expression16
  xpos 5367
  ypos 237
 }
 Merge2 {
  inputs 3+1
  operation multiply
  name Merge1
  xpos 5340
  ypos 323
 }
 Dot {
  name Dot55
  xpos 5374
  ypos 747
 }
set N6817f400 [stack 0]
 Expression {
  expr3 1-a
  name Expression32
  xpos 5251
  ypos 744
 }
 Merge2 {
  inputs 2
  operation mask
  name Merge9
  xpos 5251
  ypos 888
 }
push $N6817f400
 Switch {
  inputs 2
  which {{parent.objectIDmaskInvert}}
  name Switch17
  xpos 5340
  ypos 919
 }
push $N6813b400
 Switch {
  inputs 2
  which {{parent.objectIDmask}}
  name Switch18
  xpos 5340
  ypos 1082
 }
push $N6815f000
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy6
  xpos 5340
  ypos 1251
 }
 NoOp {
  name NoOp6
  label "udimOutput\n\n"
  xpos 5340
  ypos 1314
 }
push $N6808ac00
push $N68025c00
 Unpremult {
  name UnpremultUVs
  xpos 4279
  ypos 125
  disable {{1-parent.unpremultUVs}}
 }
 Expression {
  expr0 trunc(r)==truncUDIMPicker.r?1:0
  expr1 trunc(g)==truncUDIMPicker.g?1:0
  expr2 0
  name Expression13
  xpos 4279
  ypos 189
 }
 Expression {
  expr3 r*g
  name Expression14
  xpos 4279
  ypos 247
 }
 Dot {
  name Dot52
  xpos 4313
  ypos 747
 }
set N681d3400 [stack 0]
 Expression {
  expr3 1-a
  name Expression31
  xpos 4190
  ypos 744
 }
 Merge2 {
  inputs 2
  operation mask
  name Merge8
  xpos 4190
  ypos 888
 }
push $N681d3400
 Switch {
  inputs 2
  which {{parent.udimMaskInvert}}
  name Switch15
  xpos 4279
  ypos 919
 }
push $N6813b000
 Switch {
  inputs 2
  which {{parent.udimMask}}
  name Switch16
  xpos 4279
  ypos 1082
 }
push $N6815ec00
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy5
  xpos 4279
  ypos 1260
 }
 NoOp {
  name NoOp5
  label "udimOutput\n\n"
  xpos 4279
  ypos 1323
 }
push $N6808a800
push $N67ff1c00
clone $C67ff0800 {
  xpos 3081
  ypos 186
  selected false
 }
 Expression {
  expr0 parent.evalCam.camPos.x-r
  expr1 parent.evalCam.camPos.y-g
  expr2 parent.evalCam.camPos.z-b
  name ExpressioncamTo1
  xpos 3081
  ypos 276
 }
 Expression {
  temp_name0 dist
  temp_expr0 sqrt(r*r+g*g+b*b)
  expr0 r/dist
  expr1 g/dist
  expr2 b/dist
  expr3 dist
  name Expression12
  xpos 3081
  ypos 352
 }
push $N68024000
clone $C68044800 {
  xpos 3268
  ypos 194
  selected false
 }
 MergeExpression {
  inputs 2
  expr0 Ar*Br+Ag*Bg+Ab*Bb
  expr1 Ar*Br+Ag*Bg+Ab*Bb
  expr2 Ar*Br+Ag*Bg+Ab*Bb
  expr3 Ar*Br+Ag*Bg+Ab*Bb
  name MergeExpression1
  xpos 3268
  ypos 403
 }
 Grade {
  channels alpha
  gamma 1.66
  name GradeFacingRatio
  xpos 3268
  ypos 469
 }
 Expression {
  expr0 a==0?0:clamp((a**3),0,1)
  expr1 a==0?0:clamp((a**3),0,1)
  expr2 a==0?0:clamp((a**3),0,1)
  expr3 a==0?0:clamp((a**3),0,1)
  name filter
  xpos 3268
  ypos 562
  disable {{1-parent.useFilter}}
 }
 Dot {
  name Dot49
  xpos 3302
  ypos 747
 }
set N68264400 [stack 0]
 Expression {
  expr3 1-a
  name Expression30
  xpos 3179
  ypos 744
 }
 Merge2 {
  inputs 2
  operation mask
  name Merge7
  xpos 3179
  ypos 888
 }
push $N68264400
 Switch {
  inputs 2
  which {{parent.facingMaskInvert}}
  name Switch13
  xpos 3268
  ypos 919
 }
push $N6813ac00
 Switch {
  inputs 2
  which {{parent.facingMask}}
  name Switch14
  xpos 3268
  ypos 1080
 }
push $N6815e800
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy4
  xpos 3268
  ypos 1261
 }
 NoOp {
  name NoOp4
  label "normalsOutput\n"
  xpos 3268
  ypos 1324
 }
push $N6808a400
push $N67ff1400
 Grade {
  channels rgba
  blackpoint 10
  whitepoint 9000
  black 1
  white 0
  name Grade1
  xpos 2398
  ypos 654
 }
 Merge2 {
  inputs 2
  operation mask
  name Merge6
  xpos 2398
  ypos 885
 }
push $N67ff1800
 Switch {
  inputs 2
  which {{parent.pDepthMaskInvert}}
  name Switch11
  xpos 2523
  ypos 904
 }
 Clamp {
  name Clamp1
  xpos 2523
  ypos 928
 }
push $N6813a800
 Switch {
  inputs 2
  which {{parent.pDepthMask}}
  name Switch12
  xpos 2523
  ypos 1082
 }
push $N6815e400
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy3
  xpos 2523
  ypos 1242
 }
 NoOp {
  name NoOp3
  label "normalsOutput\n"
  xpos 2523
  ypos 1309
 }
push 0
push $N68073c00
push $N68045c00
 Unpremult {
  name UnpremultP
  xpos 481
  ypos 298
  disable {{1-parent.unpremultP}}
 }
 Add {
  value {{-parent.positionPicker.r} {-parent.positionPicker.g} {-parent.positionPicker.b} 0}
  name Add1
  xpos 481
  ypos 356
 }
 ColorMatrix {
  matrix {
      {{parent.AxisPositionWorldAxis.world_matrix.0} {parent.AxisPositionWorldAxis.world_matrix.1} {parent.AxisPositionWorldAxis.world_matrix.2}}
      {{parent.AxisPositionWorldAxis.world_matrix.4} {parent.AxisPositionWorldAxis.world_matrix.5} {parent.AxisPositionWorldAxis.world_matrix.6}}
      {{parent.AxisPositionWorldAxis.world_matrix.8} {parent.AxisPositionWorldAxis.world_matrix.9} {parent.AxisPositionWorldAxis.world_matrix.10}}
    }
  name ColorMatrix1
  xpos 481
  ypos 431
 }
set N682b5400 [stack 0]
 Dot {
  name Dot10
  xpos 943
  ypos 434
 }
set N682b5800 [stack 0]
 Dot {
  name Dot11
  xpos 1045
  ypos 434
 }
set N682b5c00 [stack 0]
 Dot {
  name Dot12
  xpos 1155
  ypos 434
 }
set N682e6000 [stack 0]
 Dot {
  name Dot13
  xpos 1257
  ypos 434
 }
set N682e6400 [stack 0]
 Dot {
  name Dot14
  xpos 1367
  ypos 434
 }
set N682e6800 [stack 0]
 Dot {
  name Dot15
  xpos 1469
  ypos 434
 }
 Expression {
  expr3 a<=0.5?0:smoothstep(0,axisFalloff,-b)
  name Expression9
  xpos 1435
  ypos 530
 }
push $N682e6800
 Expression {
  expr3 "a<=0.5?0:smoothstep(0,axisFalloff, b)"
  name Expression8
  xpos 1333
  ypos 530
 }
push $N682e6400
 Expression {
  expr3 a<=0.5?0:smoothstep(0,axisFalloff,-g)
  name Expression7
  xpos 1223
  ypos 530
 }
push $N682e6000
 Expression {
  expr3 "a<=0.5?0:smoothstep(0,axisFalloff, g)"
  name Expression6
  xpos 1121
  ypos 530
 }
push $N682b5c00
 Expression {
  expr3 a<=0.5?0:smoothstep(0,axisFalloff,-r)
  name Expression5
  xpos 1011
  ypos 530
 }
push $N682b5800
 Expression {
  expr3 "a<=0.5?0:smoothstep(0,axisFalloff, r)"
  name Expression4
  xpos 909
  ypos 530
 }
 Switch {
  inputs 6
  which {{positionAxisSelection}}
  name Switch3
  xpos 1076
  ypos 619
 }
push $N682b5400
 Expression {
  expr0 abs(r)
  expr1 abs(g)
  expr2 abs(b)
  name Expression1
  xpos 618
  ypos 468
 }
 Expression {
  expr0 1-smoothstep((cubeSize.x/2)-(cubeFalloff.x/2),(cubeSize.x/2)+(cubeFalloff.x/2),r)
  expr1 1-smoothstep((cubeSize.y/2)-(cubeFalloff.y/2),(cubeSize.y/2)+(cubeFalloff.y/2),g)
  expr2 1-smoothstep((cubeSize.z/2)-(cubeFalloff.z/2),(cubeSize.z/2)+(cubeFalloff.z/2),b)
  name Expression2
  xpos 618
  ypos 506
 }
 Expression {
  expr3 a<=0.5?0:r*g*b
  name Expression3
  xpos 618
  ypos 544
 }
push $N682b5400
 Expression {
  temp_name0 dist
  temp_expr0 sqrt(r*r+g*g+b*b)
  expr3 a>=0.5?smoothstep(positionSphereRadius+positionSphereFalloff,positionSphereRadius-positionSphereFalloff,dist):0
  name ExpressionSphereMask
  xpos 481
  ypos 511
 }
 Switch {
  inputs 3
  which {{positionMaskType}}
  name Switch2
  xpos 618
  ypos 670
 }
 Dot {
  name Dot35
  xpos 652
  ypos 766
 }
set N6831b800 [stack 0]
 Expression {
  expr3 1-a
  name Expression27
  xpos 529
  ypos 763
 }
 Merge2 {
  inputs 2
  operation mask
  name Merge3
  xpos 529
  ypos 907
 }
push $N6831b800
 Switch {
  inputs 2
  which {{parent.positionMaskInvert}}
  name Switch7
  xpos 618
  ypos 938
 }
push $N6813a000
 Switch {
  inputs 2
  which {{parent.positionMask}}
  name Switch8
  xpos 618
  ypos 1100
 }
push $N6813bc00
 Dot {
  name Dot40
  xpos 553
  ypos 1163
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos 618
  ypos 1243
 }
 NoOp {
  name NoOp2
  label "positionOutput\n\n"
  xpos 618
  ypos 1321
 }
push $N6808a000
push $N68045400
 Add {
  value {{-parent.normalPicker.r} {-parent.normalPicker.g} {-parent.normalPicker.b} 0}
  name Add2
  xpos 2048
  ypos 480
 }
 Expression {
  temp_name0 dist
  temp_expr0 sqrt(r*r+g*g+b*b)
  expr3 "a<=0.5?0:clamp(1-smoothstep(0, angleThreshold, dist))"
  name Expression10
  xpos 2048
  ypos 555
 }
 Dot {
  name Dot42
  xpos 2082
  ypos 739
 }
set N68373800 [stack 0]
 Expression {
  expr3 1-a
  name Expression29
  xpos 1959
  ypos 736
 }
 Merge2 {
  inputs 2
  operation mask
  name Merge4
  xpos 1959
  ypos 880
 }
push $N68373800
 Switch {
  inputs 2
  which {{parent.normalsMaskInvert}}
  name Switch9
  xpos 2048
  ypos 911
 }
push $N6813a400
 Switch {
  inputs 2
  which {{parent.normalsMask}}
  name Switch10
  xpos 2048
  ypos 1084
 }
push $N6815e000
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos 2048
  ypos 1209
 }
 NoOp {
  name NoOp1
  label "normalsOutput\n"
  xpos 2048
  ypos 1276
 }
 Merge2 {
  inputs 7+1
  operation multiply
  Achannels alpha
  Bchannels alpha
  output alpha
  name Merge5
  xpos 2441
  ypos 1439
 }
 Dot {
  name Dot60
  xpos 2475
  ypos 1534
 }
 Expression {
  expr0 "r + a"
  expr1 g
  expr2 b
  expr3 a
  name ExpressionOverlayExpression
  xpos 333
  ypos 1531
  disable {{1-parent.overlayOutputMask}}
 }
 Switch {
  inputs 2
  which {{parent.allInactive}}
  name SwitchAllInactive
  xpos 266
  ypos 1573
 }
 Switch {
  inputs 2
  which {{parent.showPositionAOV}}
  name Switch1
  xpos 266
  ypos 1620
 }
 Switch {
  inputs 2
  which {{parent.showNormalsAOV}}
  name Switch4
  xpos 266
  ypos 1667
 }
 Switch {
  inputs 2
  which {{parent.showUDIMsAOV}}
  name Switch5
  xpos 266
  ypos 1746
 }
 Switch {
  inputs 2
  which {{parent.showObjectIdAOV}}
  name Switch6
  xpos 266
  ypos 1836
 }
 Output {
  name Output1
  xpos 266
  ypos 1917
 }
 Viewer {
  inputs 2
  frame_range 1025-1025
  colour_sample_bbox {-0.7458333373 -0.1739583313 -0.7447916865 -0.1729166657}
  samplepoints {{-0.7135416865 -0.134375006}
    }
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos 367
  ypos 2059
 }
end_group
push $cut_paste_input
Group {
 name Gnomon_triplanar_
 tile_color 0x2444ff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f1fff
 selected true
 xpos 10517
 ypos 1795
 addUserKnob {20 mainControls}
 addUserKnob {4 units l "3d units" M {cm m inch ""}}
 addUserKnob {26 textExplain l Default T " triplanar map size is 10m ( or 400 inches aprox)"}
 addUserKnob {7 textureTilingGlobal l "<font color=\"green\"><b>Texture tiling</b></font>" R 0.0001 10}
 textureTilingGlobal 0.4
 addUserKnob {26 ""}
 addUserKnob {4 display M {result htal/vtal uvs}}
 addUserKnob {20 normalsRefine l "Refine Areas" n 1}
 addUserKnob {7 midPoint l Balance}
 midPoint 0.125
 addUserKnob {7 fadeDist l "Fade Distance"}
 fadeDist 0.17
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {26 ""}
 addUserKnob {20 textureTransforms n 1}
 addUserKnob {7 transX}
 addUserKnob {7 transY -STARTLINE}
 addUserKnob {7 transZ -STARTLINE}
 addUserKnob {7 rotX}
 addUserKnob {7 rotY -STARTLINE}
 addUserKnob {7 rotZ -STARTLINE}
 addUserKnob {7 scaleX}
 scaleX 1
 addUserKnob {7 scaleY -STARTLINE}
 scaleY 1
 addUserKnob {7 scaleZ -STARTLINE}
 scaleZ 1
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {20 MotionBlurTab l "Motion Blur"}
 addUserKnob {6 applyMB l "Apply Motion Blur" +STARTLINE}
 addUserKnob {41 mv_presets l "mv presets" T VectorBlur1.mv_presets}
 addUserKnob {41 scale l "motion amount" T VectorBlur1.scale}
 addUserKnob {41 motion_falloff l "motion falloff" T VectorBlur1.motion_falloff}
 addUserKnob {41 offset l "shutter offset" T VectorBlur1.offset}
 addUserKnob {20 AOVs}
 addUserKnob {41 in l position T ShuffleP.in}
 addUserKnob {41 in_1 l normals T ShuffleN.in}
 addUserKnob {41 in1 l "motion vector" T Shuffle6.in1}
 addUserKnob {26 ""}
 addUserKnob {20 InfoTab l Info}
 addUserKnob {26 infoText l "" +STARTLINE T "Gnomon Workshop Example by  <font color=\"green\"><b>Nacho Thomas</b></font><br />\nTriplanar map using P and N passes. <br />\nMotion blur available, be careful it can slow things.<br />\n\n\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x8e8e3800
  label "using P to create UV tiles"
  note_font_size 42
  xpos 595
  ypos -11
  bdwidth 667
  bdheight 671
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x7171c600
  label "define areas by normals"
  note_font_size 42
  xpos 1372
  ypos 2
  bdwidth 504
  bdheight 652
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x8e8e3800
  label "display as colors or uvs"
  note_font_size 42
  xpos 1911
  ypos 567
  bdwidth 841
  bdheight 394
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0x7171c600
  label "mult areas"
  note_font_size 42
  xpos 1159
  ypos 708
  bdwidth 465
  bdheight 194
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0xaaaaaa00
  label stmap
  note_font_size 42
  xpos 1363
  ypos 933
  bdwidth 261
  bdheight 128
 }
 Axis2 {
  inputs 0
  rotate {{parent.rotX} {parent.rotY} {parent.rotZ}}
  name Axis1
  xpos 1121
  ypos 218
 }
 Input {
  inputs 0
  name InputAOVbundle
  label "\[value number]"
  xpos 330
  ypos -322
 }
 Dot {
  name Dot5
  xpos 366
  ypos -243
 }
set N68442c00 [stack 0]
 NoOp {
  name checkSize
  xpos 528
  ypos -245
 }
push $N68442c00
 Reformat {
  type "to box"
  box_width {{bbox.w}}
  box_height {{bbox.h}}
  box_fixed true
  resize none
  name Reformat2
  xpos 330
  ypos -179
 }
 Dot {
  name Dot17
  xpos 364
  ypos -110
 }
set N68443c00 [stack 0]
 Dot {
  name Dot1
  xpos 948
  ypos -110
 }
set N69470000 [stack 0]
 Remove {
  operation keep
  channels P
  name Remove1
  xpos 914
  ypos -65
 }
 Shuffle {
  in {P.X P.Y P.Z -P.red}
  name ShuffleP
  label "\[value in]"
  xpos 914
  ypos 9
 }
set N69470800 [stack 0]
 Multiply {
  value 39.3701
  name Multiply4
  label "scale for inches"
  xpos 1120
  ypos 72
 }
push $N69470800
 Multiply {
  value 100
  name Multiply3
  label "scale for m"
  xpos 1009
  ypos 67
 }
push $N69470800
 Switch {
  inputs 3
  which {{units}}
  name Switch3
  label "unit selection"
  xpos 914
  ypos 132
 }
 Multiply {
  value {{parent.textureTilingGlobal/1000}}
  name Multiply1
  label "controls texture tiling globals"
  xpos 914
  ypos 172
 }
 Multiply {
  value {{1/parent.scaleX} {1/parent.scaleY} {1/parent.scaleZ} 1}
  name Multiply2
  label "tiling per axis\n"
  xpos 914
  ypos 243
 }
 ColorMatrix {
  matrix {
      {{parent.Axis1.world_matrix.0} {parent.Axis1.world_matrix.1} {parent.Axis1.world_matrix.2}}
      {{parent.Axis1.world_matrix.4} {parent.Axis1.world_matrix.5} {parent.Axis1.world_matrix.6}}
      {{parent.Axis1.world_matrix.8} {parent.Axis1.world_matrix.9} {parent.Axis1.world_matrix.10}}
    }
  name ColorMatrix1
  label "rotates the world space"
  xpos 914
  ypos 305
 }
 Expression {
  expr0 r+transX
  expr1 g+transY
  expr2 b+transZ
  name Expression7
  label "transforms the triplanar"
  xpos 914
  ypos 351
 }
set N694ac000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.green 0 1 white -1 -1 rgba.alpha 0 3 black -1 -1 rgba.red 0 0"
  name Shuffle3
  label "isolates blue"
  xpos 1080
  ypos 385
 }
 Expression {
  expr2 abs(b)
  name Expression5
  label "absolute blue"
  xpos 1080
  ypos 465
 }
 Expression {
  expr2 b-trunc(b)
  name Expression6
  label "blue (z) to repeating 0-1"
  xpos 1080
  ypos 511
 }
set N694acc00 [stack 0]
push $N68443c00
 Dot {
  name Dot3
  xpos 364
  ypos 1245
 }
 Dot {
  name Dot4
  xpos 1468
  ypos 1245
 }
set N694ad400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 motionvector
  out1 motionvector
  fromInput2 {{0} B}
  mappings "3 motionvector.red 0 0 motionvector.red 0 0 motionvector.green 0 1 motionvector.green 0 1 motionvector.blue 0 2 motionvector.blue 0 2"
  name Shuffle6
  xpos 1434
  ypos 1325
 }
push $N694ad400
push $N69470000
 Dot {
  name Dot2
  xpos 1717
  ypos -110
 }
 Remove {
  operation keep
  channels N
  name Remove2
  xpos 1682
  ypos -49
 }
 Shuffle {
  in {N.X N.Y N.Z -N.red}
  name ShuffleN
  label "\[value in]"
  xpos 1683
  ypos 82
 }
 Expression {
  expr0 abs(r)
  expr1 abs(g)
  expr2 abs(b)
  name Expression10
  label "absolute normals"
  xpos 1683
  ypos 349
 }
 Expression {
  expr0 "smoothstep(midPoint-fadeDist, midPoint+fadeDist, r)"
  expr1 "smoothstep(midPoint-fadeDist, midPoint+fadeDist, g)"
  expr2 "smoothstep(midPoint-fadeDist, midPoint+fadeDist, b)"
  name Expression11
  label "define areas with smooth transitions\n"
  xpos 1683
  ypos 445
 }
set N694e0c00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.green 0 1 rgba.green 0 1 rgba.green 0 1 rgba.red 0 0 rgba.green 0 1 rgba.blue 0 2 rgba.green 0 1 rgba.alpha 0 3"
  name Shuffle7
  label "XY mask"
  xpos 1630
  ypos 588
 }
set N694e1000 [stack 0]
push $N694ac000
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 white -1 -1 rgba.alpha 0 3"
  name Shuffle1
  label "isolates red"
  xpos 743
  ypos 393
 }
 Expression {
  expr0 abs(r)
  name Expression3
  label "absolute red"
  xpos 743
  ypos 448
 }
 Expression {
  expr0 r-trunc(r)
  name Expression4
  label "red (x) to repeating 0-1"
  xpos 743
  ypos 509
 }
set N694e1c00 [stack 0]
push $N694acc00
 ShuffleCopy {
  inputs 2
  red red
  green blue2
  blue black
  alpha white
  name ShuffleCopy1
  label "create uvs for htal surfaces"
  xpos 743
  ypos 612
 }
push $N694e1000
 Merge2 {
  inputs 2
  operation multiply
  name Merge2
  xpos 1373
  ypos 791
 }
 Reformat {
  inputs 0
  format "512 512 0 0 512 512 1 square_512"
  name Reformat1
  xpos 2624
  ypos 641
 }
set N69522800 [stack 0]
 Ramp {
  output {rgba.red -rgba.green -rgba.blue rgba.alpha}
  p0 {0 0}
  p1 {512 0}
  name Ramp1
  xpos 2555
  ypos 716
 }
push $N69522800
 Ramp {
  output {-rgba.red rgba.green -rgba.blue rgba.alpha}
  p0 {0 0}
  p1 {0 512}
  name Ramp2
  xpos 2662
  ypos 721
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge1
  xpos 2600
  ypos 771
 }
set N69523800 [stack 0]
 Constant {
  inputs 0
  channels rgb
  color {1 0 0 0}
  format "512 512 0 0 512 512 1 square_512"
  name Constant1
  xpos 2238
  ypos 700
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.green 0 1 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 white -1 -1 rgba.alpha 0 3"
  name Shuffle4
  xpos 2238
  ypos 772
 }
 Input {
  inputs 0
  name InputHtal
  label "\[value number]"
  xpos 1921
  ypos 715
  number 1
 }
 Switch {
  inputs 3
  which {{parent.display}}
  name Switch1
  xpos 1921
  ypos 879
 }
 STMap {
  inputs 2
  uv rgba
  name STMapHtal
  xpos 1373
  ypos 1013
 }
push $N694acc00
push $N694ac000
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.green 0 1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 white -1 -1 rgba.alpha 0 3 black -1 -1 rgba.red 0 0"
  name Shuffle2
  label "isolates green"
  xpos 914
  ypos 395
 }
 Expression {
  expr1 abs(g)
  name Expression1
  label "absolute green"
  xpos 914
  ypos 463
 }
 Expression {
  expr1 g-trunc(g)
  name Expression2
  label "green (y) to repeating 0-1"
  xpos 914
  ypos 510
 }
set N6955d400 [stack 0]
 ShuffleCopy {
  inputs 2
  red blue
  blue black
  alpha white
  name ShuffleCopy2
  label "create uvs for vtal (YZ) surfaces"
  xpos 914
  ypos 619
 }
push $N694e0c00
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.alpha 0 3 rgba.red 0 0 rgba.blue 0 2 rgba.red 0 0 rgba.green 0 1 rgba.red 0 0 rgba.red 0 0"
  name Shuffle9
  label "YZ mask\n"
  xpos 1382
  ypos 587
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge3
  xpos 1169
  ypos 803
 }
push $N694e1c00
push $N6955d400
 ShuffleCopy {
  inputs 2
  red red
  blue black
  alpha white
  name ShuffleCopy3
  label "create uvs for vtal (XZ) surfaces"
  xpos 1068
  ypos 616
 }
push $N694e0c00
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.blue 0 2 rgba.alpha 0 3 rgba.blue 0 2 rgba.red 0 0 rgba.blue 0 2 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2"
  name Shuffle10
  label "XZ mask"
  xpos 1791
  ypos 587
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge4
  xpos 1534
  ypos 788
 }
 Merge2 {
  inputs 2
  operation max
  name Merge5
  xpos 1534
  ypos 874
 }
push $N69523800
 Constant {
  inputs 0
  channels rgb
  color {0 0 1 0}
  format "512 512 0 0 512 512 1 square_512"
  name Constant2
  xpos 2369
  ypos 704
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.green 0 1 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 white -1 -1 rgba.alpha 0 3"
  name Shuffle5
  xpos 2369
  ypos 776
 }
 Input {
  inputs 0
  name InputVtal
  label "\[value number]"
  xpos 2045
  ypos 713
  number 2
 }
 Switch {
  inputs 3
  which {{parent.display}}
  name Switch2
  xpos 2045
  ypos 933
 }
 STMap {
  inputs 2
  uv rgba
  name STMapVtal
  xpos 1534
  ypos 1022
 }
 Merge2 {
  inputs 2+1
  name Merge6
  xpos 1630
  ypos 1107
 }
 Merge2 {
  inputs 2
  operation mask
  name Merge7
  xpos 1630
  ypos 1242
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels motionvector
  name Copy1
  xpos 1630
  ypos 1313
 }
set N695dcc00 [stack 0]
 VectorBlur2 {
  uv motionvector
  mv_presets Arnold
  blur_uv uniform
  scale 1
  normalize false
  name VectorBlur1
  xpos 1470
  ypos 1461
 }
push $N695dcc00
 Switch {
  inputs 2
  which {{parent.applyMB}}
  name Switch4
  xpos 1630
  ypos 1556
 }
 Reformat {
  type "to box"
  box_width {{checkSize.width}}
  box_height {{checkSize.height}}
  resize none
  pbb true
  name Reformat3
  xpos 1630
  ypos 1616
 }
 Output {
  name Output1
  xpos 1630
  ypos 1732
 }
 Viewer {
  inputs 2
  frame_range 1025-1046
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos 335
  ypos 1741
 }
end_group
push $cut_paste_input
Group {
 name Gnomon_CardPlacer_
 tile_color 0x8e3316ff
 label "\n\n"
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10515
 ypos 1920
 addUserKnob {20 cardControls l "Card Controls"}
 addUserKnob {22 docCardPlacer l Documentation T "def openWebpage():\n  webbrowser.open(\"http://nachothomas.com/tutpWprojector.html\")\nopenWebpage()" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {12 samplePoint l "Sample Point"}
 samplePoint {776 480}
 addUserKnob {41 samplePoint3dcoord T samplePoint3dcoord.samplePoint3dcoord}
 addUserKnob {26 ""}
 addUserKnob {13 extraTranslate l "Extra Translate"}
 addUserKnob {13 fianlPositionOut}
 addUserKnob {13 finalPositionOutput}
 finalPositionOutput {{samplePosXYZ.x+extraTranslate} {samplePosXYZ.y+extraTranslate} {samplePosXYZ.z+extraTranslate}}
 addUserKnob {13 samplePosXYZ}
 samplePosXYZ {{samplePos.sample.r} {samplePos.sample.g} {samplePos.sample.b}}
 addUserKnob {26 ""}
 addUserKnob {13 cameraRotations}
 cameraRotations {{"\[value input1.rotate.x]"} {"\[value input1.rotate.y]"} {"\[value input1.rotate.z]"}}
 addUserKnob {13 extraRotations l "Extra Rotations"}
 extraRotations {111 2 0}
 addUserKnob {13 finalRotationOutput +INVISIBLE}
 finalRotationOutput {{"cameraRotations.x + extraRotations"} {"cameraRotations.y + extraRotations"} {"cameraRotations.z + extraRotations"}}
 addUserKnob {26 ""}
 addUserKnob {41 uniform_scale l "Uniform Scale" T Card1.uniform_scale}
 addUserKnob {41 scaling l Scale T Card1.scaling}
 addUserKnob {26 ""}
 addUserKnob {22 createCard l "Create Card" T "def createCardKnob():\n    tg = nuke.thisGroup()\n    xtg = tg.xpos()\n    ytg = tg.ypos()\n    curNode = nuke.thisGroup().name()\n    n = nuke.toNode(curNode)\n    n.knob(\"selected\").setValue(True)\n    ctX = n.knob(\"finalPositionOutput\").getValue(0)\n    ctY = n.knob(\"finalPositionOutput\").getValue(1)\n    ctZ = n.knob(\"finalPositionOutput\").getValue(2)\n    crX = n.knob(\"finalRotationOutput\").getValue(0)\n    crY = n.knob(\"finalRotationOutput\").getValue(1)\n    crZ = n.knob(\"finalRotationOutput\").getValue(2)\n    csX = n.knob(\"scaling\").getValue(0)\n    csY = n.knob(\"scaling\").getValue(1)\n    csZ = n.knob(\"scaling\").getValue(2)\n    csG = n.knob(\"uniform_scale\").getValue(0)\n    posX = n.knob(\"xpos\").getValue()\n    posY = n.knob(\"ypos\").getValue()\n    nuke.root().end()\n    myRoot = nuke.toNode(\"root\")\n    CardP = nuke.createNode(\"Card\")\n    CardP\['xpos'].setValue( xtg + 100 )\n    CardP\['ypos'].setValue( ytg )\n    CardP\[\"translate\"].setValue(ctX, 0)\n    CardP\[\"translate\"].setValue(ctY, 1 )\n    CardP\[\"translate\"].setValue(ctZ, 2 )\n    CardP\[\"rotate\"].setValue(crX, 0 )\n    CardP\[\"rotate\"].setValue(crY, 1 )\n    CardP\[\"rotate\"].setValue(crZ, 2 )\n    CardP\[\"scaling\"].setValue(csX, 0 )\n    CardP\[\"scaling\"].setValue(csY, 1 )\n    CardP\[\"scaling\"].setValue(csZ, 2 )\n    CardP\[\"uniform_scale\"].setValue(csG, 0 )\n    CardP.setInput(0,None)\n    myRoot = nuke.toNode(\"root\")\n\ncreateCardKnob()" +STARTLINE}
 addUserKnob {20 AOVs}
 addUserKnob {41 in l positionWorld T Shuffle1.in}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0xaaaaaa00
  label "preview card"
  note_font_size 42
  xpos 413
  ypos -423
  bdwidth 561
  bdheight 458
 }
 Input {
  inputs 0
  name InputAOVbundle
  label "\[value number]"
  xpos 174
  ypos -345
 }
 Dot {
  name Dot1
  xpos 208
  ypos -221
 }
set N6963f000 [stack 0]
 NoOp {
  name evaluateOscan
  xpos -109
  ypos -224
  addUserKnob {20 User}
  addUserKnob {14 inputFormat R 0 100}
  inputFormat {{width} {height}}
  addUserKnob {7 imageAspect -STARTLINE}
  imageAspect {{width/height}}
  addUserKnob {7 pixelAspect}
  pixelAspect {{pixel_aspect}}
  addUserKnob {14 bboxSize R 0 100}
  bboxSize {{bbox.w} {bbox.h}}
  addUserKnob {14 normOscanWRONG R 0 100}
  normOscanWRONG {{bboxSize/inputFormat} {bboxSize/inputFormat}}
  addUserKnob {26 ""}
  addUserKnob {15 im}
  im {{format.x} {format.y} {format.r} {format.t}}
  addUserKnob {15 bb}
  bb {{bbox.x} {bbox.y} {bbox.r} {bbox.t}}
  addUserKnob {20 margins n 1}
  addUserKnob {7 leftMargin}
  leftMargin {{-bbox.x-im.x}}
  addUserKnob {7 rightMargin -STARTLINE}
  rightMargin {{bbox.r-im.r}}
  addUserKnob {7 topMargin}
  topMargin {{bbox.t-im.t}}
  addUserKnob {7 bottomMargin -STARTLINE}
  bottomMargin {{-(bbox.y-im.y)}}
  addUserKnob {14 maxMargins R 0 100}
  maxMargins {{"max(leftMargin, rightMargin)"} {"max(topMargin, bottomMargin)"}}
  addUserKnob {20 endGroup n -1}
  addUserKnob {15 maxOscan}
  maxOscan {{im.x-maxMargins.w} {im.y-maxMargins.h} {im.r+maxMargins.w} {im.t+maxMargins.h}}
  addUserKnob {14 maxOscanSize R 0 100}
  maxOscanSize {{maxOscan.r+abs(maxOscan.x)} {maxOscan.t+abs(maxOscan.y)}}
  addUserKnob {14 normOscan R 0 100}
  normOscan {{maxOscanSize/inputFormat} {maxOscanSize/inputFormat}}
 }
push $N6963f000
 Dot {
  name Dot6
  xpos 206
  ypos 70
 }
set N6963f800 [stack 0]
 Dot {
  name Dot2
  xpos 208
  ypos 349
 }
set N6963fc00 [stack 0]
 Dot {
  name Dot3
  xpos -90
  ypos 349
 }
 Shuffle {
  in {P.X P.Y P.Z -P.red}
  name Shuffle1
  xpos -124
  ypos 407
 }
 NoOp {
  name samplePos
  xpos -124
  ypos 471
  addUserKnob {20 User}
  addUserKnob {18 sample l "" +STARTLINE}
  sample {{"\[sample this red parent.samplePoint.x parent.samplePoint.y]"} {"\[sample this green parent.samplePoint.x parent.samplePoint.y]"} {"\[sample this blue parent.samplePoint.x parent.samplePoint.y]"}}
  addUserKnob {6 sample_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Input {
  inputs 0
  name InputCamera
  label "\[value number]"
  xpos 423
  ypos -343
  number 1
 }
 Dot {
  name Dot4
  xpos 457
  ypos -102
 }
 Constant {
  inputs 0
  channels rgb
  color {1 0 0 0}
  color_panelDropped true
  format "512 512 0 0 512 512 1 square_512"
  name Constant2
  xpos 628
  ypos -251
 }
 Reformat {
  type "to box"
  box_width {{parent.evaluateOscan.inputFormat.w}}
  box_height {{parent.evaluateOscan.inputFormat.h}}
  box_pixel_aspect {{parent.evaluateOscan.pixelAspect}}
  resize distort
  black_outside true
  pbb true
  name Reformat2
  xpos 628
  ypos -161
 }
 Card2 {
  translate {{parent.finalPositionOutput.x} {parent.finalPositionOutput.y} {parent.finalPositionOutput.z}}
  rotate {{parent.finalRotationOutput.x} {parent.finalRotationOutput.y} {parent.finalRotationOutput.z}}
  scaling {1.5 1.3 1}
  uniform_scale 2900
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card1
  xpos 628
  ypos -102
 }
push $N6963f800
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 rgba.alpha 0 3 rgba.alpha 0 3"
  name Shuffle2
  xpos 385
  ypos 99
 }
 PositionToPoints2 {
  P_channel P
  N_channel P
  detail 1
  pointSize 1
  name PositionToPoints1
  xpos 385
  ypos 153
 }
 Scene {
  inputs 2
  name Scene1
  xpos 508
  ypos 150
 }
 Constant {
  inputs 0
  channels rgb
  format "512 512 0 0 512 512 1 square_512"
  name Constant1
  xpos 873
  ypos -268
 }
 Reformat {
  type "to box"
  box_width {{parent.evaluateOscan.inputFormat.w}}
  box_height {{parent.evaluateOscan.inputFormat.h}}
  box_pixel_aspect {{parent.evaluateOscan.pixelAspect}}
  resize distort
  black_outside true
  pbb true
  name Reformat1
  xpos 873
  ypos -179
 }
 ScanlineRender {
  inputs 2
  conservative_shader_sampling false
  motion_vectors_type distance
  name ScanlineRender1
  xpos 628
  ypos 270
 }
set N696afc00 [stack 0]
push $N696afc00
 Dot {
  name Dot5
  xpos 662
  ypos 395
 }
push $N6963fc00
 Merge2 {
  inputs 2
  mix 0.215
  name Merge1
  xpos 432
  ypos 561
 }
 Output {
  name Output1
  xpos 432
  ypos 674
 }
 Viewer {
  inputs 2
  frame_range 1025-1050
  monitorOutNDISenderName "NukeX - testAOVs_v03 - Viewer1"
  name Viewer1
  xpos -131
  ypos 563
 }
end_group
push $cut_paste_input
add_layer {diffuse_albedo diffuse_albedo.red diffuse_albedo.green diffuse_albedo.blue}
add_layer {lgt2_diffuse lgt2_diffuse.red lgt2_diffuse.green lgt2_diffuse.blue}
add_layer {lgt2_specular lgt2_specular.red lgt2_specular.green lgt2_specular.blue}
add_layer {lgt2_sss lgt2_sss.red lgt2_sss.green lgt2_sss.blue}
add_layer {lgt2_transmission lgt2_transmission.red lgt2_transmission.green lgt2_transmission.blue}
add_layer {lgt3_diffuse lgt3_diffuse.red lgt3_diffuse.green lgt3_diffuse.blue}
add_layer {lgt3_specular lgt3_specular.red lgt3_specular.green lgt3_specular.blue}
add_layer {lgt3_sss lgt3_sss.red lgt3_sss.green lgt3_sss.blue}
add_layer {lgt3_transmission lgt3_transmission.red lgt3_transmission.green lgt3_transmission.blue}
add_layer {lgt4_diffuse lgt4_diffuse.red lgt4_diffuse.green lgt4_diffuse.blue}
add_layer {lgt4_specular lgt4_specular.red lgt4_specular.green lgt4_specular.blue}
add_layer {lgt4_sss lgt4_sss.red lgt4_sss.green lgt4_sss.blue}
add_layer {lgt4_transmission lgt4_transmission.red lgt4_transmission.green lgt4_transmission.blue}
add_layer {lgt5_diffuse lgt5_diffuse.red lgt5_diffuse.green lgt5_diffuse.blue}
add_layer {lgt5_specular lgt5_specular.red lgt5_specular.green lgt5_specular.blue}
add_layer {lgt5_sss lgt5_sss.red lgt5_sss.green lgt5_sss.blue}
add_layer {lgt5_transmission lgt5_transmission.red lgt5_transmission.green lgt5_transmission.blue}
add_layer {lgt6_diffuse lgt6_diffuse.red lgt6_diffuse.green lgt6_diffuse.blue}
add_layer {lgt6_specular lgt6_specular.red lgt6_specular.green lgt6_specular.blue}
add_layer {lgt6_sss lgt6_sss.red lgt6_sss.green lgt6_sss.blue}
add_layer {lgt6_transmission lgt6_transmission.red lgt6_transmission.green lgt6_transmission.blue}
add_layer {lgt7_diffuse lgt7_diffuse.red lgt7_diffuse.green lgt7_diffuse.blue}
add_layer {lgt7_specular lgt7_specular.red lgt7_specular.green lgt7_specular.blue}
add_layer {lgt7_sss lgt7_sss.red lgt7_sss.green lgt7_sss.blue}
add_layer {lgt7_transmission lgt7_transmission.red lgt7_transmission.green lgt7_transmission.blue}
add_layer {lgt8_diffuse lgt8_diffuse.red lgt8_diffuse.green lgt8_diffuse.blue}
add_layer {lgt8_specular lgt8_specular.red lgt8_specular.green lgt8_specular.blue}
add_layer {lgt8_sss lgt8_sss.red lgt8_sss.green lgt8_sss.blue}
add_layer {lgt8_transmission lgt8_transmission.red lgt8_transmission.green lgt8_transmission.blue}
add_layer {lgt9_diffuse lgt9_diffuse.red lgt9_diffuse.green lgt9_diffuse.blue}
add_layer {lgt9_specular lgt9_specular.red lgt9_specular.green lgt9_specular.blue}
add_layer {lgt9_sss lgt9_sss.red lgt9_sss.green lgt9_sss.blue}
add_layer {lgt9_transmission lgt9_transmission.red lgt9_transmission.green lgt9_transmission.blue}
add_layer {uv_extra uv_extra.red uv_extra.green uv_extra.blue uv_extra.alpha}
Group {
 name GW_name_CONFORM_
 tile_color 0x911031ff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10192
 ypos 1436
 addUserKnob {20 User l Main}
 addUserKnob {6 hasBeauty +STARTLINE}
 hasBeauty {{"\[exists input0]"}}
 addUserKnob {6 hasUtility -STARTLINE}
 hasUtility {{"\[exists input1]"}}
 addUserKnob {26 ""}
 addUserKnob {26 beautyText l Beauty}
 addUserKnob {22 detectChannels l "Detect Channels" T "import nuke\nimport os\nn2C = nuke.thisNode() \nn = nuke.thisGroup()\nhasBeauty = n.knob(\"hasBeauty\").getValue()\nif hasBeauty == 0:\n    nuke.message (\"no AOV bundle attached\")\nelse:\n    n2C.begin()\n    chCheck = nuke.toNode('channelCheckBeauty')\n    n.knob(\"lgt0\").setValue(0)\n    n.knob(\"lgt1\").setValue(0)\n    n.knob(\"lgt2\").setValue(0)\n    n.knob(\"lgt3\").setValue(0)\n    n.knob(\"lgt4\").setValue(0)\n    n.knob(\"lgt5\").setValue(0)\n    n.knob(\"lgt6\").setValue(0)\n    n.knob(\"lgt7\").setValue(0)\n    n.knob(\"lgt8\").setValue(0)\n    n.knob(\"lgt9\").setValue(0)\n    allChannelsRaw = list()\n    allChannelsFiltered = list()\n    for chan in chCheck.channels():\n        nameSplit = chan.rsplit(\"_\").__getitem__(0)\n        if nameSplit not in allChannelsRaw:\n            if \"lgt\" in nameSplit:\n                allChannelsRaw.append(nameSplit)\n                n.knob(nameSplit).setValue(1)\n" +STARTLINE}
 addUserKnob {6 lgt0 +STARTLINE}
 lgt0 true
 addUserKnob {6 lgt1 -STARTLINE}
 lgt1 true
 addUserKnob {6 lgt2 -STARTLINE}
 addUserKnob {6 lgt3 -STARTLINE}
 addUserKnob {6 lgt4 -STARTLINE}
 addUserKnob {6 lgt5 +STARTLINE}
 addUserKnob {6 lgt6 -STARTLINE}
 addUserKnob {6 lgt7 -STARTLINE}
 addUserKnob {6 lgt8 -STARTLINE}
 addUserKnob {6 lgt9 -STARTLINE}
 addUserKnob {6 bypassLGT l "All lgt channels are correct! Bypass the check!" +STARTLINE}
 bypassLGT true
 addUserKnob {26 ""}
 addUserKnob {26 UtilityText l Utility}
 addUserKnob {6 copyCryptos l "Copy Crypto mattes" +STARTLINE}
 copyCryptos true
 addUserKnob {26 txtcrypto l "" +STARTLINE T "(This will copy crypt olayers and metadata. Must keep default names)"}
 addUserKnob {6 bypassUtility l "All utility channels are correct! Bypass the check!" +STARTLINE}
 addUserKnob {20 LightGroupLayers l "Beauty Layers"}
 addUserKnob {26 ""}
 addUserKnob {41 in1_45 l diffuse_albedo T ShuffleAlbedo.in1}
 addUserKnob {41 in1_46 l emission T ShuffleEmission.in1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt0Active l "LGT0 Found" +STARTLINE}
 lgt0Active {{lgt0}}
 addUserKnob {20 lgt0_1 l channels n 1}
 lgt0_1 0
 addUserKnob {41 in1 l lgt0_diffuse T ShufflediffuseLGT0.in1}
 addUserKnob {41 in1_1 l lgt0_specular T ShufflespecularLGT0.in1}
 addUserKnob {41 in1_2 l lgt0_sss T ShufflesssLGT0.in1}
 addUserKnob {41 in1_3 l lgt0_transmission T ShuffleTransmissionLGT0.in1}
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt1Active l "LGT1 Found" +STARTLINE}
 lgt1Active {{lgt1}}
 addUserKnob {20 lgt1_1 l channels n 1}
 lgt1_1 0
 addUserKnob {41 in1_4 l lgt1_diffuse T ShufflediffuseLGT1.in1}
 addUserKnob {41 in1_5 l lgt1_specular T ShufflespecularLGT1.in1}
 addUserKnob {41 in1_6 l lgt1_sss T ShufflesssLGT1.in1}
 addUserKnob {41 in1_7 l lgt1_transmission T ShuffleTransmissionLGT1.in1}
 addUserKnob {20 endGroup_1 n -1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt2Active l "LGT2 Found" +STARTLINE}
 lgt2Active {{lgt2}}
 addUserKnob {20 lgt2_1 l channels n 1}
 lgt2_1 0
 addUserKnob {41 in1_8 l lgt2_diffuse T ShufflediffuseLGT2.in1}
 addUserKnob {41 in1_9 l lgt2_specular T ShufflespecularLGT2.in1}
 addUserKnob {41 in1_10 l lgt2_sss T ShufflesssLGT2.in1}
 addUserKnob {41 in1_11 l lgt2_transmission T ShuffleTransmissionLGT2.in1}
 addUserKnob {20 endGroup_2 n -1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt3Active l "LGT3 Found" +STARTLINE}
 lgt3Active {{lgt3}}
 addUserKnob {20 lgt3_1 l channels n 1}
 lgt3_1 0
 addUserKnob {41 in1_12 l lgt3_diffuse T ShufflediffuseLGT3.in1}
 addUserKnob {41 in1_13 l lgt3_specular T ShufflespecularLGT3.in1}
 addUserKnob {41 in1_14 l lgt3_sss T ShufflesssLGT3.in1}
 addUserKnob {41 in1_15 l lgt3_transmission T ShuffleTransmissionLGT3.in1}
 addUserKnob {20 endGroup_3 n -1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt4Active l "LGT4 Found" +STARTLINE}
 lgt4Active {{lgt4}}
 addUserKnob {20 lgt4grp l channels n 1}
 lgt4grp 0
 addUserKnob {41 in1_16 l in1 T ShufflediffuseLGT4.in1}
 addUserKnob {41 in1_17 l in1 T ShufflespecularLGT4.in1}
 addUserKnob {41 in1_18 l in1 T ShufflesssLGT4.in1}
 addUserKnob {41 in1_19 l in1 T ShuffleTransmissionLGT4.in1}
 addUserKnob {20 endGroup_4 n -1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt5Active l "LGT5 Found" +STARTLINE}
 lgt5Active {{lgt5}}
 addUserKnob {20 lgt5grp l channels n 1}
 lgt5grp 0
 addUserKnob {41 in1_20 l in1 T ShufflediffuseLGT5.in1}
 addUserKnob {41 in1_21 l in1 T ShufflespecularLGT5.in1}
 addUserKnob {41 in1_22 l in1 T ShufflesssLGT5.in1}
 addUserKnob {41 in1_23 l in1 T ShuffleTransmissionLGT5.in1}
 addUserKnob {20 endGroup_5 n -1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt6Active l "LGT6 Found" +STARTLINE}
 lgt6Active {{lgt6}}
 addUserKnob {20 lgt6grp l channels n 1}
 lgt6grp 0
 addUserKnob {41 in1_24 l in1 T ShufflediffuseLGT6.in1}
 addUserKnob {41 in1_25 l in1 T ShufflespecularLGT6.in1}
 addUserKnob {41 in1_26 l in1 T ShufflesssLGT6.in1}
 addUserKnob {41 in1_27 l in1 T ShuffleTransmissionLGT6.in1}
 addUserKnob {20 endGroup_6 n -1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt7Active l "LGT7 Found" +STARTLINE}
 lgt7Active {{lgt7}}
 addUserKnob {20 lgt7grp l channels n 1}
 lgt7grp 0
 addUserKnob {41 in1_28 l in1 T ShufflediffuseLGT7.in1}
 addUserKnob {41 in1_29 l in1 T ShufflespecularLGT7.in1}
 addUserKnob {41 in1_30 l in1 T ShufflesssLGT7.in1}
 addUserKnob {41 in1_31 l in1 T ShuffleTransmissionLGT7.in1}
 addUserKnob {20 endGroup_7 n -1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt8Active l "LGT8 Found" +STARTLINE}
 lgt8Active {{lgt8}}
 addUserKnob {20 lgt8grp l channels n 1}
 lgt8grp 0
 addUserKnob {41 in1_32 l in1 T ShufflediffuseLGT8.in1}
 addUserKnob {41 in1_33 l in1 T ShufflespecularLGT8.in1}
 addUserKnob {41 in1_34 l in1 T ShufflesssLGT8.in1}
 addUserKnob {41 in1_35 l in1 T ShuffleTransmissionLGT8.in1}
 addUserKnob {20 endGroup_8 n -1}
 addUserKnob {26 ""}
 addUserKnob {6 lgt9Active l "LGT9 Found" +STARTLINE}
 lgt9Active {{lgt9}}
 addUserKnob {20 lgt9grp l channels n 1}
 lgt9grp 0
 addUserKnob {41 in1_36 l in1 T ShufflediffuseLGT9.in1}
 addUserKnob {41 in1_37 l in1 T ShufflespecularLGT9.in1}
 addUserKnob {41 in1_38 l in1 T ShufflesssLGT9.in1}
 addUserKnob {41 in1_39 l in1 T ShuffleTransmissionLGT9.in1}
 addUserKnob {20 endGroup_9 n -1}
 addUserKnob {20 UtilityLayersTab l "Utility Layers"}
 addUserKnob {41 in1_40 l P T ShuffleP.in1}
 addUserKnob {41 in1_41 l N T ShuffleN.in1}
 addUserKnob {41 in1_42 l depth T ShuffleDepth.in1}
 addUserKnob {41 in1_43 l uvs T ShuffleUVs.in1}
 addUserKnob {41 in1_44 l motionvector T ShuffleMotionVector.in1}
 addUserKnob {20 Documentation l Info}
 addUserKnob {26 InfoTxt l "" +STARTLINE T "Gnomon Workshop Example by  <font color=\"green\"><b>Nacho Thomas</b></font><br />\n<br />\nThis node will let you combine a beauty and utility pass. <br />\nIt will also guarantee that all output has <br />\ncorrect naming convention for all other nodes to work<br />\nIf you are sure the naming convention is correct, \n<br />\nyou can bypass the rename in the Main Tab\n\n"}
}
 Input {
  inputs 0
  name Inputbeauty
  label "\[value number]"
  xpos -98
  ypos -6671
 }
 Dot {
  name Dot9
  xpos -61
  ypos -6490
 }
set N6972d800 [stack 0]
 Dot {
  name Dot34
  xpos -61
  ypos -6387
 }
set N6972dc00 [stack 0]
push $N6972dc00
 Dot {
  name Dot7
  xpos -311
  ypos -6335
 }
set N6977c000 [stack 0]
 Dot {
  name Dot35
  xpos -439
  ypos -6335
 }
set N6977c400 [stack 0]
 Dot {
  name Dot3
  xpos -511
  ypos -6335
 }
set N6977c800 [stack 0]
 Dot {
  name Dot6
  xpos -639
  ypos -6335
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_diffuse
  out1 lgt0_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt0_diffuse.red 0 0 lgt0_diffuse.red 0 0 lgt0_diffuse.green 0 1 lgt0_diffuse.green 0 1 lgt0_diffuse.blue 0 2 lgt0_diffuse.blue 0 2 black -1 -1 lgt0_diffuse.alpha 0 3"
  name ShufflediffuseLGT0
  xpos -673
  ypos -5989
 }
set N6977d000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_specular
  out1 lgt0_specular
  fromInput2 {{0} B}
  mappings "4 lgt0_specular.red 0 0 lgt0_specular.red 0 0 lgt0_specular.green 0 1 lgt0_specular.green 0 1 lgt0_specular.blue 0 2 lgt0_specular.blue 0 2 black -1 -1 lgt0_specular.alpha 0 3"
  name ShufflespecularLGT0
  xpos -673
  ypos -5911
 }
set N6977d400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_sss
  out1 lgt0_sss
  fromInput2 {{0} B}
  mappings "4 lgt0_sss.red 0 0 lgt0_sss.red 0 0 lgt0_sss.green 0 1 lgt0_sss.green 0 1 lgt0_sss.blue 0 2 lgt0_sss.blue 0 2 black -1 -1 lgt0_sss.alpha 0 3"
  name ShufflesssLGT0
  xpos -673
  ypos -5847
 }
set N6977d800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_transmission
  out1 lgt0_transmission
  fromInput2 {{0} B}
  mappings "4 lgt0_transmission.red 0 0 lgt0_transmission.red 0 0 lgt0_transmission.green 0 1 lgt0_transmission.green 0 1 lgt0_transmission.blue 0 2 lgt0_transmission.blue 0 2 black -1 -1 lgt0_transmission.alpha 0 3"
  name ShuffleTransmissionLGT0
  xpos -673
  ypos -5777
 }
set N6977dc00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_diffuse
  out1 lgt1_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt1_diffuse.red 0 0 lgt1_diffuse.red 0 0 lgt1_diffuse.green 0 1 lgt1_diffuse.green 0 1 lgt1_diffuse.blue 0 2 lgt1_diffuse.blue 0 2 black -1 -1 lgt1_diffuse.alpha 0 3"
  name ShufflediffuseLGT1
  xpos -673
  ypos -5698
 }
set N697a0000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_specular
  out1 lgt1_specular
  fromInput2 {{0} B}
  mappings "4 lgt1_specular.red 0 0 lgt1_specular.red 0 0 lgt1_specular.green 0 1 lgt1_specular.green 0 1 lgt1_specular.blue 0 2 lgt1_specular.blue 0 2 black -1 -1 lgt1_specular.alpha 0 3"
  name ShufflespecularLGT1
  xpos -673
  ypos -5620
 }
set N697a0400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_sss
  out1 lgt1_sss
  fromInput2 {{0} B}
  mappings "4 lgt1_sss.red 0 0 lgt1_sss.red 0 0 lgt1_sss.green 0 1 lgt1_sss.green 0 1 lgt1_sss.blue 0 2 lgt1_sss.blue 0 2 black -1 -1 lgt1_sss.alpha 0 3"
  name ShufflesssLGT1
  xpos -673
  ypos -5556
 }
set N697a0800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_transmission
  out1 lgt1_transmission
  fromInput2 {{0} B}
  mappings "4 lgt1_transmission.red 0 0 lgt1_transmission.red 0 0 lgt1_transmission.green 0 1 lgt1_transmission.green 0 1 lgt1_transmission.blue 0 2 lgt1_transmission.blue 0 2 black -1 -1 lgt1_transmission.alpha 0 3"
  name ShuffleTransmissionLGT1
  xpos -673
  ypos -5486
 }
set N697a0c00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt2_diffuse
  out1 lgt2_diffuse
  fromInput2 {{0} B}
  mappings "3 lgt2_diffuse.red 0 0 lgt2_diffuse.red 0 0 lgt2_diffuse.green 0 1 lgt2_diffuse.green 0 1 lgt2_diffuse.blue 0 2 lgt2_diffuse.blue 0 2"
  name ShufflediffuseLGT2
  xpos -673
  ypos -5176
 }
set N697a1000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt2_specular
  out1 lgt2_specular
  fromInput2 {{0} B}
  mappings "3 lgt2_specular.red 0 0 lgt2_specular.red 0 0 lgt2_specular.green 0 1 lgt2_specular.green 0 1 lgt2_specular.blue 0 2 lgt2_specular.blue 0 2"
  name ShufflespecularLGT2
  xpos -673
  ypos -5098
 }
set N697a1400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt2_sss
  out1 lgt2_sss
  fromInput2 {{0} B}
  mappings "3 lgt2_sss.red 0 0 lgt2_sss.red 0 0 lgt2_sss.green 0 1 lgt2_sss.green 0 1 lgt2_sss.blue 0 2 lgt2_sss.blue 0 2"
  name ShufflesssLGT2
  xpos -673
  ypos -5034
 }
set N697a1800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt2_transmission
  out1 lgt2_transmission
  fromInput2 {{0} B}
  mappings "3 lgt2_transmission.red 0 0 lgt2_transmission.red 0 0 lgt2_transmission.green 0 1 lgt2_transmission.green 0 1 lgt2_transmission.blue 0 2 lgt2_transmission.blue 0 2"
  name ShuffleTransmissionLGT2
  xpos -673
  ypos -4964
 }
set N697a1c00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt3_diffuse
  out1 lgt3_diffuse
  fromInput2 {{0} B}
  mappings "3 lgt3_diffuse.red 0 0 lgt3_diffuse.red 0 0 lgt3_diffuse.green 0 1 lgt3_diffuse.green 0 1 lgt3_diffuse.blue 0 2 lgt3_diffuse.blue 0 2"
  name ShufflediffuseLGT3
  xpos -673
  ypos -4838
 }
set N697cc000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt3_specular
  out1 lgt3_specular
  fromInput2 {{0} B}
  mappings "3 lgt3_specular.red 0 0 lgt3_specular.red 0 0 lgt3_specular.green 0 1 lgt3_specular.green 0 1 lgt3_specular.blue 0 2 lgt3_specular.blue 0 2"
  name ShufflespecularLGT3
  xpos -673
  ypos -4760
 }
set N697cc400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt3_sss
  out1 lgt3_sss
  fromInput2 {{0} B}
  mappings "3 lgt3_sss.red 0 0 lgt3_sss.red 0 0 lgt3_sss.green 0 1 lgt3_sss.green 0 1 lgt3_sss.blue 0 2 lgt3_sss.blue 0 2"
  name ShufflesssLGT3
  xpos -673
  ypos -4696
 }
set N697cc800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt3_transmission
  out1 lgt3_transmission
  fromInput2 {{0} B}
  mappings "3 lgt3_transmission.red 0 0 lgt3_transmission.red 0 0 lgt3_transmission.green 0 1 lgt3_transmission.green 0 1 lgt3_transmission.blue 0 2 lgt3_transmission.blue 0 2"
  name ShuffleTransmissionLGT3
  xpos -673
  ypos -4626
 }
set N697ccc00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt4_diffuse
  out1 lgt4_diffuse
  fromInput2 {{0} B}
  mappings "3 lgt4_diffuse.red 0 0 lgt4_diffuse.red 0 0 lgt4_diffuse.green 0 1 lgt4_diffuse.green 0 1 lgt4_diffuse.blue 0 2 lgt4_diffuse.blue 0 2"
  name ShufflediffuseLGT4
  xpos -673
  ypos -4479
 }
set N697cd000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt4_specular
  out1 lgt4_specular
  fromInput2 {{0} B}
  mappings "3 lgt4_specular.red 0 0 lgt4_specular.red 0 0 lgt4_specular.green 0 1 lgt4_specular.green 0 1 lgt4_specular.blue 0 2 lgt4_specular.blue 0 2"
  name ShufflespecularLGT4
  xpos -673
  ypos -4401
 }
set N697cd400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt4_sss
  out1 lgt4_sss
  fromInput2 {{0} B}
  mappings "3 lgt4_sss.red 0 0 lgt4_sss.red 0 0 lgt4_sss.green 0 1 lgt4_sss.green 0 1 lgt4_sss.blue 0 2 lgt4_sss.blue 0 2"
  name ShufflesssLGT4
  xpos -673
  ypos -4337
 }
set N697cd800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt4_transmission
  out1 lgt4_transmission
  fromInput2 {{0} B}
  mappings "3 lgt4_transmission.red 0 0 lgt4_transmission.red 0 0 lgt4_transmission.green 0 1 lgt4_transmission.green 0 1 lgt4_transmission.blue 0 2 lgt4_transmission.blue 0 2"
  name ShuffleTransmissionLGT4
  xpos -673
  ypos -4267
 }
set N697cdc00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt5_diffuse
  out1 lgt5_diffuse
  fromInput2 {{0} B}
  mappings "3 lgt5_diffuse.red 0 0 lgt5_diffuse.red 0 0 lgt5_diffuse.green 0 1 lgt5_diffuse.green 0 1 lgt5_diffuse.blue 0 2 lgt5_diffuse.blue 0 2"
  name ShufflediffuseLGT5
  xpos -673
  ypos -4132
 }
set N697fe000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt5_specular
  out1 lgt5_specular
  fromInput2 {{0} B}
  mappings "3 black -1 -1 lgt5_specular.red 0 0 black -1 -1 lgt5_specular.green 0 1 black -1 -1 lgt5_specular.blue 0 2"
  name ShufflespecularLGT5
  xpos -673
  ypos -4054
 }
set N697fe400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt5_sss
  out1 lgt5_sss
  fromInput2 {{0} B}
  mappings "3 lgt5_sss.red 0 0 lgt5_sss.red 0 0 lgt5_sss.green 0 1 lgt5_sss.green 0 1 lgt5_sss.blue 0 2 lgt5_sss.blue 0 2"
  name ShufflesssLGT5
  xpos -673
  ypos -3990
 }
set N697fe800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt5_transmission
  out1 lgt5_transmission
  fromInput2 {{0} B}
  mappings "3 lgt5_transmission.red 0 0 lgt5_transmission.red 0 0 lgt5_transmission.green 0 1 lgt5_transmission.green 0 1 lgt5_transmission.blue 0 2 lgt5_transmission.blue 0 2"
  name ShuffleTransmissionLGT5
  xpos -673
  ypos -3920
 }
set N697fec00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt6_diffuse
  out1 lgt6_diffuse
  fromInput2 {{0} B}
  mappings "3 lgt6_diffuse.red 0 0 lgt6_diffuse.red 0 0 lgt6_diffuse.green 0 1 lgt6_diffuse.green 0 1 lgt6_diffuse.blue 0 2 lgt6_diffuse.blue 0 2"
  name ShufflediffuseLGT6
  xpos -673
  ypos -3769
 }
set N697ff000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt6_specular
  out1 lgt6_specular
  fromInput2 {{0} B}
  mappings "3 black -1 -1 lgt6_specular.red 0 0 black -1 -1 lgt6_specular.green 0 1 black -1 -1 lgt6_specular.blue 0 2"
  name ShufflespecularLGT6
  xpos -673
  ypos -3691
 }
set N697ff400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt6_sss
  out1 lgt6_sss
  fromInput2 {{0} B}
  mappings "3 lgt6_sss.red 0 0 lgt6_sss.red 0 0 lgt6_sss.green 0 1 lgt6_sss.green 0 1 lgt6_sss.blue 0 2 lgt6_sss.blue 0 2"
  name ShufflesssLGT6
  xpos -673
  ypos -3627
 }
set N697ff800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt6_transmission
  out1 lgt6_transmission
  fromInput2 {{0} B}
  mappings "3 lgt6_transmission.red 0 0 lgt6_transmission.red 0 0 lgt6_transmission.green 0 1 lgt6_transmission.green 0 1 lgt6_transmission.blue 0 2 lgt6_transmission.blue 0 2"
  name ShuffleTransmissionLGT6
  xpos -673
  ypos -3557
 }
set N697ffc00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt7_diffuse
  out1 lgt7_diffuse
  fromInput2 {{0} B}
  mappings "3 lgt7_diffuse.red 0 0 lgt7_diffuse.red 0 0 lgt7_diffuse.green 0 1 lgt7_diffuse.green 0 1 lgt7_diffuse.blue 0 2 lgt7_diffuse.blue 0 2"
  name ShufflediffuseLGT7
  xpos -673
  ypos -3286
 }
set N69832000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt7_specular
  out1 lgt7_specular
  fromInput2 {{0} B}
  mappings "3 black -1 -1 lgt7_specular.red 0 0 black -1 -1 lgt7_specular.green 0 1 black -1 -1 lgt7_specular.blue 0 2"
  name ShufflespecularLGT7
  xpos -673
  ypos -3208
 }
set N69832400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt7_sss
  out1 lgt7_sss
  fromInput2 {{0} B}
  mappings "3 lgt7_sss.red 0 0 lgt7_sss.red 0 0 lgt7_sss.green 0 1 lgt7_sss.green 0 1 lgt7_sss.blue 0 2 lgt7_sss.blue 0 2"
  name ShufflesssLGT7
  xpos -673
  ypos -3144
 }
set N69832800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt7_transmission
  out1 lgt7_transmission
  fromInput2 {{0} B}
  mappings "3 lgt7_transmission.red 0 0 lgt7_transmission.red 0 0 lgt7_transmission.green 0 1 lgt7_transmission.green 0 1 lgt7_transmission.blue 0 2 lgt7_transmission.blue 0 2"
  name ShuffleTransmissionLGT7
  xpos -673
  ypos -3074
 }
set N69832c00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt8_diffuse
  out1 lgt8_diffuse
  fromInput2 {{0} B}
  mappings "3 lgt8_diffuse.red 0 0 lgt8_diffuse.red 0 0 lgt8_diffuse.green 0 1 lgt8_diffuse.green 0 1 lgt8_diffuse.blue 0 2 lgt8_diffuse.blue 0 2"
  name ShufflediffuseLGT8
  xpos -673
  ypos -2791
 }
set N69833000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt8_specular
  out1 lgt8_specular
  fromInput2 {{0} B}
  mappings "3 black -1 -1 lgt8_specular.red 0 0 black -1 -1 lgt8_specular.green 0 1 black -1 -1 lgt8_specular.blue 0 2"
  name ShufflespecularLGT8
  xpos -673
  ypos -2713
 }
set N69833400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt8_sss
  out1 lgt8_sss
  fromInput2 {{0} B}
  mappings "3 lgt8_sss.red 0 0 lgt8_sss.red 0 0 lgt8_sss.green 0 1 lgt8_sss.green 0 1 lgt8_sss.blue 0 2 lgt8_sss.blue 0 2"
  name ShufflesssLGT8
  xpos -673
  ypos -2649
 }
set N69833800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt8_transmission
  out1 lgt8_transmission
  fromInput2 {{0} B}
  mappings "3 lgt8_transmission.red 0 0 lgt8_transmission.red 0 0 lgt8_transmission.green 0 1 lgt8_transmission.green 0 1 lgt8_transmission.blue 0 2 lgt8_transmission.blue 0 2"
  name ShuffleTransmissionLGT8
  xpos -673
  ypos -2579
 }
set N69833c00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt9_diffuse
  out1 lgt9_diffuse
  fromInput2 {{0} B}
  mappings "3 lgt9_diffuse.red 0 0 lgt9_diffuse.red 0 0 lgt9_diffuse.green 0 1 lgt9_diffuse.green 0 1 lgt9_diffuse.blue 0 2 lgt9_diffuse.blue 0 2"
  name ShufflediffuseLGT9
  xpos -673
  ypos -2322
 }
set N6985e000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt9_specular
  out1 lgt9_specular
  fromInput2 {{0} B}
  mappings "3 black -1 -1 lgt9_specular.red 0 0 black -1 -1 lgt9_specular.green 0 1 black -1 -1 lgt9_specular.blue 0 2"
  name ShufflespecularLGT9
  xpos -673
  ypos -2244
 }
set N6985e400 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt9_sss
  out1 lgt9_sss
  fromInput2 {{0} B}
  mappings "3 lgt9_sss.red 0 0 lgt9_sss.red 0 0 lgt9_sss.green 0 1 lgt9_sss.green 0 1 lgt9_sss.blue 0 2 lgt9_sss.blue 0 2"
  name ShufflesssLGT9
  xpos -673
  ypos -2180
 }
set N6985e800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt9_transmission
  out1 lgt9_transmission
  fromInput2 {{0} B}
  mappings "3 lgt9_transmission.red 0 0 lgt9_transmission.red 0 0 lgt9_transmission.green 0 1 lgt9_transmission.green 0 1 lgt9_transmission.blue 0 2 lgt9_transmission.blue 0 2"
  name ShuffleTransmissionLGT9
  xpos -673
  ypos -2110
 }
push $N6985e800
push $N6985e400
push $N6985e000
push $N69833c00
push $N69833800
push $N69833400
push $N69833000
push $N69832c00
push $N69832800
push $N69832400
push $N69832000
push $N697ffc00
push $N697ff800
push $N697ff400
push $N697ff000
push $N697fec00
push $N697fe800
push $N697fe400
push $N697fe000
push $N697cdc00
push $N697cd800
push $N697cd400
push $N697cd000
push $N697ccc00
push $N697cc800
push $N697cc400
push $N697cc000
push $N697a1c00
push $N697a1800
push $N697a1400
push $N697a1000
push $N697a0c00
push $N697a0800
push $N697a0400
push $N697a0000
push $N6977dc00
push $N6977d800
push $N6977d400
push $N6977d000
push $N6977c800
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_diffuse
  name Copy2
  xpos -545
  ypos -6001
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_specular
  name Copy3
  xpos -545
  ypos -5923
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_sss
  name Copy4
  xpos -545
  ypos -5859
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_transmission
  name Copy5
  xpos -545
  ypos -5789
 }
push $N6977c400
 Shuffle2 {
  fromInput1 {{0} B}
  in1 diffuse_albedo
  out1 diffuse_albedo
  fromInput2 {{0} B}
  mappings "3 diffuse_albedo.red 0 0 diffuse_albedo.red 0 0 diffuse_albedo.green 0 1 diffuse_albedo.green 0 1 diffuse_albedo.blue 0 2 diffuse_albedo.blue 0 2"
  name ShuffleAlbedo
  xpos -473
  ypos -6194
 }
set N6989c000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 emission
  out1 emission
  fromInput2 {{0} B}
  mappings "3 emission.red 0 0 emission.red 0 0 emission.green 0 1 emission.green 0 1 emission.blue 0 2 emission.blue 0 2"
  name ShuffleEmission
  xpos -473
  ypos -6085
 }
push $N6989c000
push $N6977c000
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels diffuse_albedo
  name Copy1
  xpos -345
  ypos -6206
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels emission
  name Copy42
  xpos -345
  ypos -6097
 }
 Switch {
  inputs 2
  which {{lgt0}}
  name Switch1
  xpos -345
  ypos -5777
 }
 Dot {
  name Dot10
  xpos -311
  ypos -5695
 }
set N6989d000 [stack 0]
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_diffuse
  name Copy6
  xpos -545
  ypos -5710
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_specular
  name Copy7
  xpos -545
  ypos -5632
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_sss
  name Copy8
  xpos -545
  ypos -5568
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_transmission
  name Copy9
  xpos -545
  ypos -5498
 }
push $N6989d000
 Switch {
  inputs 2
  which {{lgt1}}
  name Switch2
  xpos -347
  ypos -5486
 }
 Dot {
  name Dot20
  xpos -319
  ypos -5173
 }
set N698e0400 [stack 0]
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt2_diffuse
  name Copy10
  xpos -545
  ypos -5188
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt2_specular
  name Copy11
  xpos -545
  ypos -5110
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt2_sss
  name Copy12
  xpos -545
  ypos -5046
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt2_transmission
  name Copy13
  xpos -545
  ypos -4976
 }
push $N698e0400
 Switch {
  inputs 2
  which {{lgt2}}
  name Switch3
  xpos -353
  ypos -4964
 }
 Dot {
  name Dot21
  xpos -324
  ypos -4835
 }
set N698e1800 [stack 0]
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt3_diffuse
  name Copy14
  xpos -545
  ypos -4850
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt3_specular
  name Copy15
  xpos -545
  ypos -4772
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt3_sss
  name Copy16
  xpos -545
  ypos -4708
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt3_transmission
  name Copy17
  xpos -545
  ypos -4638
 }
push $N698e1800
 Switch {
  inputs 2
  which {{lgt3}}
  name Switch4
  xpos -358
  ypos -4626
 }
 Dot {
  name Dot22
  xpos -324
  ypos -4476
 }
set N6992ec00 [stack 0]
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt4_diffuse
  name Copy18
  xpos -545
  ypos -4491
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt4_specular
  name Copy19
  xpos -545
  ypos -4413
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt4_sss
  name Copy20
  xpos -545
  ypos -4349
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt4_transmission
  name Copy21
  xpos -545
  ypos -4279
 }
push $N6992ec00
 Switch {
  inputs 2
  which {{lgt4}}
  name Switch5
  xpos -358
  ypos -4267
 }
 Dot {
  name Dot23
  xpos -324
  ypos -4129
 }
set N69980000 [stack 0]
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt5_diffuse
  name Copy22
  xpos -545
  ypos -4144
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt5_specular
  name Copy23
  xpos -545
  ypos -4066
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt5_sss
  name Copy24
  xpos -545
  ypos -4002
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt5_transmission
  name Copy25
  xpos -545
  ypos -3932
 }
push $N69980000
 Switch {
  inputs 2
  which {{lgt5}}
  name Switch6
  xpos -358
  ypos -3920
 }
 Dot {
  name Dot24
  xpos -324
  ypos -3766
 }
set N69981400 [stack 0]
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt6_diffuse
  name Copy26
  xpos -545
  ypos -3781
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt6_specular
  name Copy27
  xpos -545
  ypos -3703
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt6_sss
  name Copy28
  xpos -545
  ypos -3639
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt6_transmission
  name Copy29
  xpos -545
  ypos -3569
 }
push $N69981400
 Switch {
  inputs 2
  which {{lgt6}}
  name Switch7
  xpos -358
  ypos -3557
 }
 Dot {
  name Dot31
  xpos -324
  ypos -3283
 }
set N699c6800 [stack 0]
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt7_diffuse
  name Copy30
  xpos -545
  ypos -3298
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt7_specular
  name Copy31
  xpos -545
  ypos -3220
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt7_sss
  name Copy32
  xpos -545
  ypos -3156
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt7_transmission
  name Copy33
  xpos -545
  ypos -3086
 }
push $N699c6800
 Switch {
  inputs 2
  which {{lgt7}}
  name Switch8
  xpos -358
  ypos -3074
 }
 Dot {
  name Dot32
  xpos -324
  ypos -2788
 }
set N699c7c00 [stack 0]
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt8_diffuse
  name Copy34
  xpos -545
  ypos -2803
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt8_specular
  name Copy35
  xpos -545
  ypos -2725
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt8_sss
  name Copy36
  xpos -545
  ypos -2661
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt8_transmission
  name Copy37
  xpos -545
  ypos -2591
 }
push $N699c7c00
 Switch {
  inputs 2
  which {{lgt8}}
  name Switch9
  xpos -358
  ypos -2579
 }
 Dot {
  name Dot33
  xpos -324
  ypos -2319
 }
set N69a11000 [stack 0]
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt9_diffuse
  name Copy38
  xpos -545
  ypos -2334
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt9_specular
  name Copy39
  xpos -545
  ypos -2256
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt9_sss
  name Copy40
  xpos -545
  ypos -2192
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt9_transmission
  name Copy41
  xpos -545
  ypos -2122
 }
push $N69a11000
 Switch {
  inputs 2
  which {{lgt9}}
  name Switch10
  xpos -358
  ypos -2110
 }
 Switch {
  inputs 2
  which {{bypassLGT}}
  name Switch11
  xpos -95
  ypos -2110
 }
 Dot {
  name Dot4
  note_font "Bitstream Vera Sans"
  xpos -61
  ypos -1079
 }
set N69a58400 [stack 0]
 NoOp {
  name channelCheck
  note_font "Bitstream Vera Sans"
  xpos -317
  ypos -1082
 }
push $N6972d800
 NoOp {
  name channelCheckBeauty
  xpos -309
  ypos -6493
 }
push $N6972dc00
 NoOp {
  name NoOp1
  xpos 174
  ypos -6390
 }
 Input {
  inputs 0
  name Inpututility
  label "\[value number]"
  xpos -553
  ypos -719
  number 1
 }
 Dot {
  name Dot1
  xpos -519
  ypos -610
 }
 Dot {
  name Dot12
  xpos -365
  ypos -610
 }
set N69a59c00 [stack 0]
 Dot {
  name Dot11
  xpos -364
  ypos -109
 }
set N69a86000 [stack 0]
 Dot {
  name Dot8
  xpos -364
  ypos -16
 }
set N69a86400 [stack 0]
 Dot {
  name Dot5
  xpos -364
  ypos 100
 }
set N69a86800 [stack 0]
 Dot {
  name Dot2
  xpos -364
  ypos 189
 }
set N69a86c00 [stack 0]
 Dot {
  name Dot13
  xpos -365
  ypos 293
 }
set N69a87000 [stack 0]
 Dot {
  name Dot14
  xpos -365
  ypos 382
 }
set N69a87400 [stack 0]
 Dot {
  name Dot15
  xpos -366
  ypos 524
 }
set N69a87800 [stack 0]
 Dot {
  name Dot16
  xpos -366
  ypos 613
 }
set N69a87c00 [stack 0]
 Dot {
  name Dot17
  xpos -367
  ypos 717
 }
set N69a9e000 [stack 0]
 Dot {
  name Dot18
  xpos -367
  ypos 806
 }
set N69a9e400 [stack 0]
 Dot {
  name Dot19
  xpos -367
  ypos 956
 }
set N69a9e800 [stack 0]
 Dot {
  name Dot25
  xpos -367
  ypos 1045
 }
set N69a9ec00 [stack 0]
 Dot {
  name Dot26
  xpos -368
  ypos 1149
 }
set N69a9f000 [stack 0]
 Dot {
  name Dot27
  xpos -368
  ypos 1238
 }
set N69a9f400 [stack 0]
 Dot {
  name Dot28
  xpos -367
  ypos 1374
 }
set N69a9f800 [stack 0]
 Dot {
  name Dot29
  xpos -363
  ypos 1472
 }
set N69a9fc00 [stack 0]
 Dot {
  name Dot30
  xpos -363
  ypos 1598
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 uv_extra
  out1 uvs
  fromInput2 {{0} B}
  mappings "2 uv_extra.red 0 0 uvs.red 0 0 uv_extra.green 0 1 uvs.green 0 1"
  name ShuffleUVs
  xpos -263
  ypos 1594
  disable {{parent.bypassUtility}}
 }
push $N69a9fc00
 Shuffle2 {
  fromInput1 {{0} B}
  in1 motionvector
  out1 motionvector
  fromInput2 {{0} B}
  mappings "3 motionvector.red 0 0 motionvector.red 0 0 motionvector.green 0 1 motionvector.green 0 1 motionvector.blue 0 2 motionvector.blue 0 2"
  name ShuffleMotionVector
  xpos -265
  ypos 1469
  disable {{parent.bypassUtility}}
 }
push $N69a9f800
 Shuffle2 {
  fromInput1 {{0} B}
  in1 depth
  out1 depth
  fromInput2 {{0} B}
  mappings "1 depth.Z 0 0 depth.Z 0 0"
  name ShuffleDepth
  xpos -267
  ypos 1371
  disable {{parent.bypassUtility}}
 }
push $N69a9f400
push $N69a9f000
push $N69a9ec00
push $N69a9e800
push $N69a9e400
push $N69a9e000
push $N69a87c00
push $N69a87800
push $N69a87400
push $N69a87000
push $N69a86c00
push $N69a86800
push $N69a86400
 Shuffle2 {
  fromInput1 {{0} B}
  in1 N
  out1 N
  fromInput2 {{0} B}
  mappings "6 N.Z 0 2 N.Z 0 2 black -1 -1 N.red 0 3 black -1 -1 N.green 0 4 N.X 0 0 N.X 0 0 N.Y 0 1 N.Y 0 1 black -1 -1 N.blue 0 5"
  name ShuffleN
  xpos -247
  ypos -19
  disable {{parent.bypassUtility}}
 }
push $N69a86000
 Shuffle2 {
  fromInput1 {{0} B}
  in1 P
  out1 P
  fromInput2 {{0} B}
  mappings "6 P.Z 0 2 P.Z 0 2 black -1 -1 P.red 0 3 black -1 -1 P.green 0 4 P.X 0 0 P.X 0 0 P.Y 0 1 P.Y 0 1 black -1 -1 P.blue 0 5"
  name ShuffleP
  xpos -253
  ypos -112
  disable {{parent.bypassUtility}}
 }
push $N69a59c00
push $N69a58400
 CopyMetaData {
  inputs 2
  name CopyMetaData2
  xpos -95
  ypos -613
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels P
  name CopyP
  xpos -95
  ypos -124
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels N
  name CopyN
  xpos -95
  ypos -31
 }
add_layer {crypto_asset crypto_asset.red crypto_asset.green crypto_asset.blue}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_asset
  name CopyCryptoAsset
  xpos -95
  ypos 85
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_asset00 crypto_asset00.red crypto_asset00.green crypto_asset00.blue crypto_asset00.alpha}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_asset00
  name CopyCryptoAsset00
  xpos -96
  ypos 174
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_asset01 crypto_asset01.red crypto_asset01.green crypto_asset01.blue crypto_asset01.alpha}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_asset01
  name CopyCryptoAsset01
  xpos -96
  ypos 278
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_asset02 crypto_asset02.red crypto_asset02.green crypto_asset02.blue crypto_asset02.alpha}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_asset02
  name CopyCryptoAsset02
  xpos -97
  ypos 367
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_material crypto_material.red crypto_material.green crypto_material.blue}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_material
  name CopyCryptoMaterial
  xpos -97
  ypos 509
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_material00 crypto_material00.red crypto_material00.green crypto_material00.blue crypto_material00.alpha}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_material00
  name CopyCryptoMaterial00
  xpos -98
  ypos 598
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_material01 crypto_material01.red crypto_material01.green crypto_material01.blue crypto_material01.alpha}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_material01
  name CopyCryptoMaterial01
  xpos -98
  ypos 702
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_material02 crypto_material02.red crypto_material02.green crypto_material02.blue crypto_material02.alpha}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_material02
  name CopyCryptoMaterial02
  xpos -99
  ypos 791
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_object crypto_object.red crypto_object.green crypto_object.blue}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_object
  name CopyCryptoObject
  xpos -98
  ypos 941
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_object00 crypto_object00.red crypto_object00.green crypto_object00.blue crypto_object00.alpha}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_object00
  name CopyCryptoObject00
  xpos -99
  ypos 1030
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_object01 crypto_object01.red crypto_object01.green crypto_object01.blue crypto_object01.alpha}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_object01
  name CopyCryptoObject01
  xpos -99
  ypos 1134
  disable {{1-parent.copyCryptos}}
 }
add_layer {crypto_object02 crypto_object02.red crypto_object02.green crypto_object02.blue crypto_object02.alpha}
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels crypto_object02
  name CopyCryptoObject02
  xpos -100
  ypos 1223
  disable {{1-parent.copyCryptos}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels depth
  name CopyDepth
  xpos -100
  ypos 1359
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels motionvector
  name CopyMotionVector
  xpos -100
  ypos 1457
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels uvs
  name CopyUVs
  xpos -100
  ypos 1583
 }
 Output {
  name Output1
  xpos -100
  ypos 1797
 }
 Viewer {
  frame_range 1025-1225
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos 25
  ypos 1878
 }
end_group
push $cut_paste_input
Group {
 name GNOMON_Grade_lightGroup_
 tile_color 0x2b11ffff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10182
 ypos 2466
 addUserKnob {20 User l Main}
 addUserKnob {6 hasAOVbundle +INVISIBLE +STARTLINE}
 hasAOVbundle {{"\[exists input0]"}}
 addUserKnob {22 detectChannels l "Detect Channels" T "import nuke\nimport os\nn2C = nuke.thisNode() \nn = nuke.thisGroup()\nhasAOV = n.knob(\"hasAOVbundle\").getValue()\nif hasAOV == 0:\n    nuke.message (\"no AOV bundle attached\")\nelse:\n    n2C.begin()\n    chCheck = nuke.toNode('channelCheck')\n    allChannelsRaw = list()\n    allChannelsFiltered = list()\n    for chan in chCheck.channels():\n        nameSplit = chan.rsplit(\"_\").__getitem__(0)\n        if nameSplit not in allChannelsRaw:\n            if \"lgt\" in nameSplit:\n                allChannelsRaw.append(nameSplit)\n\n\nselLgtGrp = n.knob(\"lightGroup\").setValues(allChannelsRaw) " +STARTLINE}
 addUserKnob {26 affectText l "Apply CC to "}
 addUserKnob {4 lightGroup M {lgt0 lgt1}}
 lightGroup lgt1
 addUserKnob {22 UpdateLayers l "Update Layers" T "selLgtGrp = n.knob(\"lightGroup\").value()\nsetDif = selLgtGrp + \"_diffuse\"\nsetSpec = selLgtGrp + \"_specular\"\nsetSSS = selLgtGrp + \"_sss\"\nsetTrans = selLgtGrp + \"_transmission\"\nn.knob(\"lgtDiffuse\").setValue(setDif)\nn.knob(\"lgtSpec\").setValue(setSpec)\nn.knob(\"lgtSss\").setValue(setSSS)\nn.knob(\"lgtTrans\").setValue(setTrans)" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 lgtLayers l "Light Group Layers "}
 addUserKnob {41 lgtDiffuse l diffuse T ShuffleLgtDIFUSE.in1}
 addUserKnob {41 lgtSpec l specular T ShuffleLgtSPECULAR.in1}
 addUserKnob {41 lgtSss l sss T ShuffleLgtSSS.in1}
 addUserKnob {41 lgtTrans l transmission T ShuffleLgtTRANSMISSION.in1}
 addUserKnob {26 ""}
 addUserKnob {26 applyTo l "Apply To"}
 addUserKnob {6 ApplyDiffuse l Diffuse +STARTLINE}
 ApplyDiffuse true
 addUserKnob {6 ApplySpecular l Specular -STARTLINE}
 ApplySpecular true
 addUserKnob {6 ApplySSS l SSS -STARTLINE}
 ApplySSS true
 addUserKnob {6 ApplyTransmission l Transmission -STARTLINE}
 ApplyTransmission true
 addUserKnob {26 ""}
 addUserKnob {41 blackpoint T Grade1.blackpoint}
 addUserKnob {41 whitepoint T Grade1.whitepoint}
 addUserKnob {41 black l lift T Grade1.black}
 addUserKnob {41 white l gain T Grade1.white}
 addUserKnob {41 multiply T Grade1.multiply}
 addUserKnob {41 add l offset T Grade1.add}
 addUserKnob {41 gamma T Grade1.gamma}
 addUserKnob {41 reverse T Grade1.reverse}
 addUserKnob {20 "" n -1}
 addUserKnob {20 "" n -1}
 addUserKnob {20 Info}
 addUserKnob {26 CustomTextNacho l "" +STARTLINE T "Gnomon Workshop Example by  <font color=\"green\"><b>Nacho Thomas</b></font>"}
}
 Input {
  inputs 0
  name InputAOVbundle
  xpos 0
  ypos -1001
 }
 Dot {
  name Dot54
  note_font "Bitstream Vera Sans"
  xpos 34
  ypos -834
 }
set N69bad000 [stack 0]
 NoOp {
  name channelCheck
  note_font "Bitstream Vera Sans"
  xpos -222
  ypos -837
 }
 Input {
  inputs 0
  name InputMask
  xpos 1021
  ypos 448
  number 1
 }
 Dot {
  name Dot22
  xpos 1055
  ypos 542
 }
 Dot {
  name Dot23
  xpos 926
  ypos 542
 }
set N69bf2000 [stack 0]
push $N69bad000
 Dot {
  name Dot1
  xpos 34
  ypos -94
 }
set N69bf2400 [stack 0]
 Dot {
  name Dot2
  xpos 542
  ypos -94
 }
set N69bf2800 [stack 0]
 Dot {
  name Dot3
  xpos 649
  ypos -94
 }
set N69bf2c00 [stack 0]
 Dot {
  name Dot4
  xpos 750
  ypos -94
 }
set N69bf3000 [stack 0]
 Dot {
  name Dot5
  xpos 857
  ypos -94
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_transmission
  out1 lgtCurrent_transmission
  fromInput2 {{0} B}
  mappings "4 lgt1_transmission.red 0 0 lgtCurrent_transmission.red 0 0 lgt1_transmission.green 0 1 lgtCurrent_transmission.green 0 1 lgt1_transmission.blue 0 2 lgtCurrent_transmission.blue 0 2 black -1 -1 lgtCurrent_transmission.alpha 0 3"
  name ShuffleLgtTRANSMISSION
  xpos 823
  ypos -12
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_transmission
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_transmission.red 0 0 rgba.red 0 0 lgtCurrent_transmission.green 0 1 rgba.green 0 1 lgtCurrent_transmission.blue 0 2 rgba.blue 0 2 lgtCurrent_transmission.alpha 0 3 rgba.alpha 0 3"
  name Shuffle4
  xpos 823
  ypos 50
 }
 Dot {
  name Dot9
  xpos 857
  ypos 389
 }
set N69c14000 [stack 0]
 Dot {
  name Dot17
  xpos 857
  ypos 469
 }
 Grade {
  inputs 1+1
  name Grade1
  xpos 820
  ypos 609
 }
 set C69c14800 [stack 0]
 Dot {
  name Dot21
  xpos 857
  ypos 840
 }
set N69c14c00 [stack 0]
 Dot {
  name Dot10
  xpos 857
  ypos 1980
 }
push $N69bf2000
 Dot {
  name Dot24
  xpos 805
  ypos 542
 }
set N69c15400 [stack 0]
push $N69bf3000
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_sss
  out1 lgtCurrent_sss
  fromInput2 {{0} B}
  mappings "4 lgt1_sss.red 0 0 lgtCurrent_sss.red 0 0 lgt1_sss.green 0 1 lgtCurrent_sss.green 0 1 lgt1_sss.blue 0 2 lgtCurrent_sss.blue 0 2 black -1 -1 lgtCurrent_sss.alpha 0 3"
  name ShuffleLgtSSS
  xpos 716
  ypos -14
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_sss
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_sss.red 0 0 rgba.red 0 0 lgtCurrent_sss.green 0 1 rgba.green 0 1 lgtCurrent_sss.blue 0 2 rgba.blue 0 2 lgtCurrent_sss.alpha 0 3 rgba.alpha 0 3"
  name Shuffle3
  xpos 716
  ypos 49
 }
 Dot {
  name Dot8
  xpos 750
  ypos 302
 }
set N69c3e000 [stack 0]
 Dot {
  name Dot16
  xpos 750
  ypos 480
 }
clone $C69c14800 {
  inputs 1+1
  xpos 719
  ypos 614
  selected false
 }
 Dot {
  name Dot20
  xpos 750
  ypos 795
 }
set N69c3ec00 [stack 0]
 Dot {
  name Dot11
  xpos 750
  ypos 1893
 }
push $N69c15400
 Dot {
  name Dot25
  xpos 709
  ypos 542
 }
set N69c3f400 [stack 0]
push $N69bf2c00
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_specular
  out1 lgtCurrent_specular
  fromInput2 {{0} B}
  mappings "4 lgt1_specular.red 0 0 lgtCurrent_specular.red 0 0 lgt1_specular.green 0 1 lgtCurrent_specular.green 0 1 lgt1_specular.blue 0 2 lgtCurrent_specular.blue 0 2 black -1 -1 lgtCurrent_specular.alpha 0 3"
  name ShuffleLgtSPECULAR
  xpos 615
  ypos -14
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_specular
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_specular.red 0 0 rgba.red 0 0 lgtCurrent_specular.green 0 1 rgba.green 0 1 lgtCurrent_specular.blue 0 2 rgba.blue 0 2 lgtCurrent_specular.alpha 0 3 rgba.alpha 0 3"
  name Shuffle2
  xpos 615
  ypos 49
 }
 Dot {
  name Dot7
  xpos 649
  ypos 219
 }
set N69c5e000 [stack 0]
 Dot {
  name Dot15
  xpos 649
  ypos 475
 }
clone $C69c14800 {
  inputs 1+1
  xpos 618
  ypos 608
  selected false
 }
 Dot {
  name Dot19
  xpos 649
  ypos 733
 }
set N69c5ec00 [stack 0]
 Dot {
  name Dot12
  xpos 649
  ypos 1810
 }
push $N69c3f400
 Dot {
  name Dot26
  xpos 610
  ypos 542
 }
push $N69bf2800
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_diffuse
  out1 lgtCurrent_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt1_diffuse.red 0 0 lgtCurrent_diffuse.red 0 0 lgt1_diffuse.green 0 1 lgtCurrent_diffuse.green 0 1 lgt1_diffuse.blue 0 2 lgtCurrent_diffuse.blue 0 2 black -1 -1 lgtCurrent_diffuse.alpha 0 3"
  name ShuffleLgtDIFUSE
  xpos 508
  ypos -12
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_diffuse
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_diffuse.red 0 0 rgba.red 0 0 lgtCurrent_diffuse.green 0 1 rgba.green 0 1 lgtCurrent_diffuse.blue 0 2 rgba.blue 0 2 lgtCurrent_diffuse.alpha 0 3 rgba.alpha 0 3"
  name Shuffle1
  xpos 508
  ypos 56
 }
 Dot {
  name Dot6
  xpos 542
  ypos 148
 }
set N69c88000 [stack 0]
 Dot {
  name Dot14
  xpos 542
  ypos 466
 }
clone $C69c14800 {
  inputs 1+1
  xpos 508
  ypos 606
  selected false
 }
 Dot {
  name Dot18
  xpos 542
  ypos 710
 }
set N69c88c00 [stack 0]
 Dot {
  name Dot13
  xpos 542
  ypos 1739
 }
push $N69c14c00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgtCurrent_transmission
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgtCurrent_transmission.red 0 0 rgba.green 0 1 lgtCurrent_transmission.green 0 1 rgba.blue 0 2 lgtCurrent_transmission.blue 0 2 rgba.alpha 0 3 lgtCurrent_transmission.alpha 0 3"
  name Shuffle8
  xpos 757
  ypos 993
 }
push $N69c3ec00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgtCurrent_sss
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgtCurrent_sss.red 0 0 rgba.green 0 1 lgtCurrent_sss.green 0 1 rgba.blue 0 2 lgtCurrent_sss.blue 0 2 rgba.alpha 0 3 lgtCurrent_sss.alpha 0 3"
  name Shuffle7
  xpos 658
  ypos 918
 }
push $N69c5ec00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgtCurrent_specular
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgtCurrent_specular.red 0 0 rgba.green 0 1 lgtCurrent_specular.green 0 1 rgba.blue 0 2 lgtCurrent_specular.blue 0 2 rgba.alpha 0 3 lgtCurrent_specular.alpha 0 3"
  name Shuffle6
  xpos 542
  ypos 849
 }
push $N69c88c00
 Shuffle2 {
  fromInput1 {{0} B}
  out1 lgtCurrent_diffuse
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 lgtCurrent_diffuse.red 0 0 rgba.green 0 1 lgtCurrent_diffuse.green 0 1 rgba.blue 0 2 lgtCurrent_diffuse.blue 0 2 rgba.alpha 0 3 lgtCurrent_diffuse.alpha 0 3"
  name Shuffle5
  xpos 427
  ypos 784
 }
push $N69c14000
push $N69c3e000
push $N69c5e000
push $N69c88000
push $N69bf2400
 Merge2 {
  inputs 2
  operation difference
  name Merge1
  xpos 0
  ypos 145
  disable {{1-parent.ApplyDiffuse}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge2
  xpos -2
  ypos 216
  disable {{1-parent.ApplySpecular}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge3
  xpos -4
  ypos 299
  disable {{1-parent.ApplySSS}}
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge4
  xpos -6
  ypos 386
  disable {{1-parent.ApplyTransmission}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgtCurrent_diffuse
  name Copy1
  xpos -6
  ypos 772
  disable {{1-parent.ApplyDiffuse}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgtCurrent_specular
  name Copy2
  xpos -6
  ypos 837
  disable {{1-parent.ApplySpecular}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgtCurrent_sss
  name Copy3
  xpos -6
  ypos 906
  disable {{1-parent.ApplySSS}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgtCurrent_transmission
  name Copy4
  xpos -6
  ypos 981
  disable {{1-parent.ApplyTransmission}}
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_diffuse
  out1 {{{parent.ShuffleLgtDIFUSE.in1}}}
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_diffuse.red 0 0 lgt1_diffuse.red 0 0 lgtCurrent_diffuse.green 0 1 lgt1_diffuse.green 0 1 lgtCurrent_diffuse.blue 0 2 lgt1_diffuse.blue 0 2 lgtCurrent_diffuse.alpha 0 3 lgt1_diffuse.alpha 0 3"
  name Shuffle9
  xpos -6
  ypos 1116
  disable {{1-parent.ApplyDiffuse}}
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_specular
  out1 {{{parent.ShuffleLgtSPECULAR.in1}}}
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_specular.red 0 0 lgt1_specular.red 0 0 lgtCurrent_specular.green 0 1 lgt1_specular.green 0 1 lgtCurrent_specular.blue 0 2 lgt1_specular.blue 0 2 lgtCurrent_specular.alpha 0 3 lgt1_specular.alpha 0 3"
  name Shuffle10
  xpos -6
  ypos 1190
  disable {{1-parent.ApplySpecular}}
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_sss
  out1 {{{parent.ShuffleLgtSSS.in1}}}
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_sss.red 0 0 lgt1_sss.red 0 0 lgtCurrent_sss.green 0 1 lgt1_sss.green 0 1 lgtCurrent_sss.blue 0 2 lgt1_sss.blue 0 2 lgtCurrent_sss.alpha 0 3 lgt1_sss.alpha 0 3"
  name Shuffle11
  xpos -5
  ypos 1256
  disable {{1-parent.ApplySSS}}
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgtCurrent_transmission
  out1 {{{parent.ShuffleLgtTRANSMISSION.in1}}}
  fromInput2 {{0} B}
  mappings "4 lgtCurrent_transmission.red 0 0 lgt1_transmission.red 0 0 lgtCurrent_transmission.green 0 1 lgt1_transmission.green 0 1 lgtCurrent_transmission.blue 0 2 lgt1_transmission.blue 0 2 lgtCurrent_transmission.alpha 0 3 lgt1_transmission.alpha 0 3"
  name Shuffle12
  xpos -5
  ypos 1330
  disable {{1-parent.ApplyTransmission}}
 }
 Remove {
  channels lgtCurrent_diffuse
  channels2 lgtCurrent_specular
  channels3 lgtCurrent_sss
  channels4 lgtCurrent_transmission
  name Remove1
  xpos -5
  ypos 1435
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge5
  xpos 0
  ypos 1736
  disable {{1-parent.ApplyDiffuse}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge6
  xpos -2
  ypos 1807
  disable {{1-parent.ApplySpecular}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge7
  xpos -4
  ypos 1890
  disable {{1-parent.ApplySSS}}
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge8
  xpos -6
  ypos 1977
  disable {{1-parent.ApplyTransmission}}
 }
 Output {
  name Output1
  xpos -6
  ypos 2110
 }
set N69d30800 [stack 0]
push $N69d30800
 Viewer {
  inputs 2
  frame_range 1025-1225
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos -26
  ypos 2308
 }
end_group
push $cut_paste_input
Group {
 name GNOMON_checkconsistency_
 tile_color 0x5a00baff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10533
 ypos 1438
 addUserKnob {20 User l Main}
 addUserKnob {4 show M {result diffuse specular sss transmission}}
 addUserKnob {20 infoTab l Info}
 addUserKnob {26 infotext l "" +STARTLINE T "Gnomon Workshop Example by  <font color=\"green\"><b>Nacho Thomas</b></font><br />\nThis node will check if the maths of your AOV add up<br />\nIt will add diffuse, specular, sss and transmission <br />\nIf the output matches the input, the maths are correct<br />\nIf it isn't, there is probably an incorrect operation on a pass<br />\nYou can also view separately each category<br />\nThis node only works with two light groups right now<br />\n\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x7171c600
  label diffuse
  note_font_size 42
  xpos 672
  ypos -224
  bdwidth 390
  bdheight 940
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x8e388e00
  label specular
  note_font_size 42
  xpos 1141
  ypos -229
  bdwidth 346
  bdheight 306
 }
 BackdropNode {
  inputs 0
  name BackdropNode7
  tile_color 0x8e8e3800
  label sss
  note_font_size 42
  xpos 1631
  ypos -229
  bdwidth 352
  bdheight 319
 }
 BackdropNode {
  inputs 0
  name BackdropNode8
  tile_color 0x8e8e3800
  label transmission
  note_font_size 42
  xpos 2279
  ypos -230
  bdwidth 350
  bdheight 306
 }
 Input {
  inputs 0
  name InputAOVbundle
  xpos 243
  ypos -1026
 }
 Dot {
  name Dot15
  xpos 277
  ypos -153
 }
set N6a110000 [stack 0]
 Dot {
  name Dot18
  xpos 826
  ypos -149
 }
set N6a110400 [stack 0]
 Dot {
  name Dot19
  xpos 948
  ypos -149
 }
set N6a110800 [stack 0]
 Dot {
  name Dot25
  xpos 1309
  ypos -149
 }
set N6a110c00 [stack 0]
 Dot {
  name Dot26
  xpos 1431
  ypos -149
 }
set N6a111000 [stack 0]
 Dot {
  name Dot28
  xpos 1805
  ypos -149
 }
set N6a111400 [stack 0]
 Dot {
  name Dot29
  xpos 1927
  ypos -149
 }
set N6a111800 [stack 0]
 Dot {
  name Dot38
  xpos 2451
  ypos -150
 }
set N6a111c00 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_transmission
  fromInput2 {{0} B}
  mappings "4 lgt0_transmission.red 0 0 rgba.red 0 0 lgt0_transmission.green 0 1 rgba.green 0 1 lgt0_transmission.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle23
  xpos 2417
  ypos -18
 }
push $N6a111c00
 Dot {
  name Dot39
  xpos 2573
  ypos -150
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_transmission
  fromInput2 {{0} B}
  mappings "4 lgt1_transmission.red 0 0 rgba.red 0 0 lgt1_transmission.green 0 1 rgba.green 0 1 lgt1_transmission.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle24
  xpos 2539
  ypos -18
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge7
  xpos 2470
  ypos 176
 }
set N6a12ac00 [stack 0]
push $N6a111400
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_sss
  fromInput2 {{0} B}
  mappings "4 lgt0_sss.red 0 0 rgba.red 0 0 lgt0_sss.green 0 1 rgba.green 0 1 lgt0_sss.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle21
  xpos 1771
  ypos -17
 }
push $N6a111800
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_sss
  fromInput2 {{0} B}
  mappings "4 lgt1_sss.red 0 0 rgba.red 0 0 lgt1_sss.green 0 1 rgba.green 0 1 lgt1_sss.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle22
  xpos 1893
  ypos -17
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge6
  xpos 1824
  ypos 157
 }
set N6a12b800 [stack 0]
push $N6a110c00
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_specular
  fromInput2 {{0} B}
  mappings "4 lgt0_specular.red 0 0 rgba.red 0 0 lgt0_specular.green 0 1 rgba.green 0 1 lgt0_specular.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle19
  xpos 1275
  ypos -18
 }
push $N6a111000
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_specular
  fromInput2 {{0} B}
  mappings "4 lgt1_specular.red 0 0 rgba.red 0 0 lgt1_specular.green 0 1 rgba.green 0 1 lgt1_specular.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle20
  xpos 1397
  ypos -18
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge5
  xpos 1328
  ypos 117
 }
set N6a15e400 [stack 0]
push $N6a110400
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt0_diffuse.red 0 0 rgba.red 0 0 lgt0_diffuse.green 0 1 rgba.green 0 1 lgt0_diffuse.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle12
  xpos 792
  ypos -17
 }
push $N6a110800
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt1_diffuse.red 0 0 rgba.red 0 0 lgt1_diffuse.green 0 1 rgba.green 0 1 lgt1_diffuse.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle18
  xpos 914
  ypos -17
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge4
  xpos 853
  ypos 129
 }
set N6a15f000 [stack 0]
push $N6a110000
 Shuffle2 {
  fromInput1 {{0} B}
  in1 emission
  fromInput2 {{0} B}
  mappings "4 emission.red 0 0 rgba.red 0 0 emission.green 0 1 rgba.green 0 1 emission.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle11
  xpos 243
  ypos 74
 }
 Dot {
  name Dot16
  xpos 277
  ypos 554
 }
 Dot {
  name Dot17
  xpos 277
  ypos 1201
 }
push $N6a15f000
 Dot {
  name Dot20
  xpos 873
  ypos 1097
 }
push $N6a15e400
 Dot {
  name Dot27
  xpos 1356
  ypos 974
 }
push $N6a12b800
 Dot {
  name Dot30
  xpos 1852
  ypos 880
 }
push $N6a12ac00
 Merge2 {
  inputs 2
  operation plus
  name Merge14
  xpos 2464
  ypos 877
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge15
  xpos 2464
  ypos 971
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge16
  xpos 2464
  ypos 1094
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge20
  xpos 2464
  ypos 1198
 }
 Switch {
  inputs 5
  which {{show}}
  name Switch1
  xpos 1884
  ypos 1485
 }
 Output {
  name Output1
  xpos 1884
  ypos 1668
 }
push $N6a15e400
 Viewer {
  inputs 2
  frame_range 1025-1225
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos 1884
  ypos 1789
 }
end_group
push $cut_paste_input
Group {
 name GNOMON_albedoOverride_
 tile_color 0x660000ff
 note_font "Bebas Neue"
 note_font_size 30
 note_font_color 0xff7f00ff
 selected true
 xpos 10518
 ypos 2212
 addUserKnob {20 User}
 addUserKnob {6 hasAOVbundle +STARTLINE}
 hasAOVbundle {{"\[exists input0]"}}
 addUserKnob {6 hasAlbedoOverride -STARTLINE}
 hasAlbedoOverride {{"\[exists input1]"}}
 addUserKnob {41 in1 T ShuffleAlbedo.in1}
 addUserKnob {6 considerOverrideAlpha l "Consider albedo override alpha" t "If unchecked, the override will fully replace the albedo\n\nIf checked, the alpha will be considered and will  override  depending on it" +STARTLINE}
}
 Input {
  inputs 0
  name Inputalbedo
  xpos 187
  ypos 314
  number 1
 }
 Dot {
  name Dot1
  xpos 221
  ypos 373
 }
set N6a1eec00 [stack 0]
push $N6a1eec00
 Input {
  inputs 0
  name InputAOVbundle
  xpos 827
  ypos -19
 }
 Dot {
  name Dot11
  xpos 861
  ypos 240
 }
set N6a1ef400 [stack 0]
 Dot {
  name Dot9
  xpos 623
  ypos 240
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 diffuse_albedo
  out1 rgb
  fromInput2 {{0} B}
  mappings "3 diffuse_albedo.red 0 0 rgba.red 0 0 diffuse_albedo.green 0 1 rgba.green 0 1 diffuse_albedo.blue 0 2 rgba.blue 0 2"
  name ShuffleAlbedo
  xpos 589
  ypos 762
 }
set N6a1efc00 [stack 0]
 Merge2 {
  inputs 2+1
  name Merge1
  xpos 372
  ypos 778
 }
push $N6a1eec00
 Switch {
  inputs 2
  which {{parent.considerOverrideAlpha}}
  name Switch2
  xpos 372
  ypos 934
 }
push $N6a1efc00
 Switch {
  inputs 2
  which {{parent.hasAlbedoOverride}}
  name Switch1
  xpos 489
  ypos 934
 }
set N69c92300 [stack 0]
 Dot {
  name Dot2
  xpos 1366
  ypos 937
 }
set N6a22e400 [stack 0]
push $N6a1ef400
 Dot {
  name Dot12
  xpos 1410
  ypos 240
 }
set N6a22e800 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt0_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt0_diffuse.red 0 0 rgba.red 0 0 lgt0_diffuse.green 0 1 rgba.green 0 1 lgt0_diffuse.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle11
  xpos 1376
  ypos 361
 }
set N6a22ec00 [stack 0]
push $N6a1efc00
 Grade {
  black 0.01
  name Grade1
  xpos 756
  ypos 778
 }
 Dot {
  name Dot15
  xpos 1318
  ypos 781
 }
set N6a22f400 [stack 0]
 Merge2 {
  inputs 2
  operation divide
  name Merge22
  xpos 1376
  ypos 852
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge2
  xpos 1376
  ypos 999
 }
set N6a22fc00 [stack 0]
push $N6a22e400
 Dot {
  name Dot3
  xpos 1488
  ypos 937
 }
push $N6a22e800
 Dot {
  name Dot13
  xpos 1532
  ypos 240
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 lgt1_diffuse
  fromInput2 {{0} B}
  mappings "4 lgt1_diffuse.red 0 0 rgba.red 0 0 lgt1_diffuse.green 0 1 rgba.green 0 1 lgt1_diffuse.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle7
  xpos 1498
  ypos 468
 }
set N6a272800 [stack 0]
push $N6a22f400
 Dot {
  name Dot8
  xpos 1460
  ypos 781
 }
 Merge2 {
  inputs 2
  operation divide
  name Merge21
  xpos 1498
  ypos 857
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge3
  xpos 1498
  ypos 999
 }
set N6a273400 [stack 0]
 Merge2 {
  inputs 2
  operation plus
  name Merge4
  xpos 1435
  ypos 1202
 }
push $N6a22ec00
push $N6a272800
 Merge2 {
  inputs 2
  operation plus
  name Merge5
  xpos 1439
  ypos 565
 }
push $N6a22fc00
push $N6a273400
 Dot {
  name Dot5
  xpos 1532
  ypos 1477
 }
set N6a2a6000 [stack 0]
 Dot {
  name Dot7
  xpos 1532
  ypos 1564
 }
push $N6a2a6000
 Shuffle {
  out lgt1_diffuse
  name Shuffle2
  xpos 1155
  ypos 1474
 }
push $N6a22fc00
 Dot {
  name Dot4
  xpos 1410
  ypos 1282
 }
set N6a2a6c00 [stack 0]
 Dot {
  name Dot6
  xpos 1410
  ypos 1343
 }
push $N6a2a6c00
 Shuffle {
  out lgt0_diffuse
  name Shuffle1
  xpos 1146
  ypos 1279
 }
push $N69c92300
add_layer {albedoOverride albedoOverride.red albedoOverride.green albedoOverride.blue}
 Shuffle2 {
  fromInput1 {{0} B}
  out1 albedoOverride
  fromInput2 {{0} B}
  mappings "3 rgba.red 0 0 albedoOverride.red 0 0 rgba.green 0 1 albedoOverride.green 0 1 rgba.blue 0 2 albedoOverride.blue 0 2"
  name Shuffle3
  xpos 489
  ypos 1078
 }
push $N6a272800
push $N6a22ec00
push $N6a1ef400
 Merge2 {
  inputs 2
  operation difference
  name Merge6
  xpos 827
  ypos 361
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge7
  xpos 826
  ypos 468
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels albedoOverride
  name Copy4
  xpos 832
  ypos 1066
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 albedoOverride
  out1 {{{parent.ShuffleAlbedo.in1}}}
  fromInput2 {{0} B}
  mappings "3 albedoOverride.red 0 0 diffuse_albedo.red 0 0 albedoOverride.green 0 1 diffuse_albedo.green 0 1 albedoOverride.blue 0 2 diffuse_albedo.blue 0 2"
  name ShuffleAlbedoOverriden
  xpos 832
  ypos 1142
 }
 Remove {
  channels albedoOverride
  name Remove1
  xpos 832
  ypos 1166
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt0_diffuse
  name Copy1
  xpos 832
  ypos 1273
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge8
  xpos 831
  ypos 1346
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels lgt1_diffuse
  name Copy2
  xpos 831
  ypos 1462
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge9
  xpos 831
  ypos 1561
 }
 Output {
  name Output1
  xpos 831
  ypos 1724
 }
 Viewer {
  inputs 2
  frame_range 1025-1225
  colour_sample_bbox {-0.765625 -0.2541666627 -0.7645833492 -0.2531250119}
  monitorOutNDISenderName "NukeX - testAOVs_v02 - Viewer1"
  name Viewer1
  xpos 831
  ypos 1863
 }
end_group
